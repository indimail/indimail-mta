.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TINYDNS-SIGN 8"
.TH TINYDNS-SIGN 8 "2017-04-08" "perl v5.24.1" ""
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
tinydns\-sign \- Signs records in tinydns\-data(8) files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    tinydns\-sign \-g bits flags algorithm domain keyfile
\&
\&    tinydns\-sign [\-t ttl] [keyfile ...] <infile >outfile
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The first form is used to generate a public/private \s-1RSA\s0 key pair with a
modulus of length \fIbits\fR. If \fIkeyfile\fR exists, tinydns-sign will try to
read a private key from the file and print \s-1DS\s0 and \s-1DNSKEY\s0 pseudo-records for
the corresponding public key on stdout. If \fIkeyfile\fR does not exist,
tinydns-sign will generate a new key pair and write the key plus the
corresponding pseudo-records to \fIkeyfile\fR.
.PP
In the second form, tinydns-sign reads key pairs from each given \fIkeyfile\fR.
It then reads a \fItinydns\-data\fR\|(8) file from \s-1STDIN\s0 and writes the same
file to \s-1STDOUT,\s0 with the following modifications:
.IP "\(bu" 4
It will delete all generic records with \s-1RRTYPE DS\s0 (43), \s-1RRSIG\s0 (46),
\&\s-1DNSKEY\s0 (48), \s-1NSEC3\s0(50), \s-1NSEC3PARAM\s0(51) and private types 65281 and 65282.
.IP "\(bu" 4
It will turn each . record into a Z record and a & record.
.IP "\(bu" 4
It will adjust the serial number of all Z records to the current time,
unless the serial number begins with two zeroes. Note that an \s-1SOA\s0 must have a
fixed serial for generating a matching \s-1RRSIG\s0 record.
.IP "\(bu" 4
It will create new \s-1DS, DNSKEY\s0 and \s-1NSEC3PARAM\s0 records from each
corresponding pseudo record (see below) present in the file.
.IP "\(bu" 4
It will create \s-1NSEC3\s0 records for all names in all zones that have at
least one \s-1DNSKEY\s0 and \s-1NSEC3PARAM\s0 in the file.
.IP "\(bu" 4
It will create a generic record with type 65281 for each name
(including empty non-terminals) containing the owner of its matching \s-1NSEC3 RR.\s0
.IP "\(bu" 4
It will create generic records with type 65282 for each hex digit (i.
e. 0\-9a\-f) below the zone apex containing all \s-1NSEC3\s0 hashes starting with that
digit.
.IP "\(bu" 4
It will create \s-1RRSIG\s0 records for all RR-sets in all zones that have at
least one \s-1DNSKEY\s0 in the file. If both \s-1DNSKEYS\s0 with and without the \s-1SEP\s0 flag set
are present, then those with the \s-1SEP\s0 flag will be used only for RRSIGs on
\&\s-1DNSKEY\s0 RRs and those without the \s-1SEP\s0 flag will be used for the remaining
RR-sets. Otherwise, RRSIGs will be created using all DNSKEYs.
.Sp
RRSIGs will be valid beginning one hour in the past and ending at (now + \fIttl\fR)
seconds. \fIttl\fR defaults to 432000 (5 days).
.SS "Pseudo-Records"
.IX Subsection "Pseudo-Records"
Pseudo-records are records defined in a syntax that's only understood by
tinydns-sign. To \fItinydns\-data\fR\|(8) they look like comments, i. e. they are
ignored.
.PP
tinydns-sign will create one or more generic records for each pseudo-record.
All generic records with an RR-type for which a pseudo-record can be defined
are deleted from the input. (Otherwise, removing a pseudo-record would not
result in removal of the corresponding generic record.)
.PP
In contrast to standard tinydns-data behaviour, trailing colons in
pseudo-records are \fBnot\fR optional.
.PP
Currently, pseudo-records are defined for the following RR-types:
.IP "\(bu" 4
#Kname:flags:proto:algorithm:key:ttl:timestamp:lo
.Sp
This generates a \s-1DNSKEY\s0 record for \fIname\fR. \fIflags\fR. \fIproto\fR and \fIalgorithm\fR
are decimal numbers. At the time of writing, \fIproto\fR must be 3. tinydns-sign
only supports \fIalgorithm\fRs 7 (\s-1RSA\-SHA1\s0), 8 (\s-1RSA\-SHA256\s0) and 10 (\s-1RSA\-SHA512\s0).
\&\fIkey\fR is base\-64 encoded key material, depending on the selected
\&\fIalgorithm\fR. \fIttl\fR, \fItimestamp\fR and \fIlo\fR are as usual.
.Sp
It is an error to have a \s-1DNSKEY\s0 pseudo-record in the input without a
corresponding \fIkeyfile\fR containing the matching private key.
.IP "\(bu" 4
#Dname:tag:algorithm:digest:fingerprint:ttl:timestamp:lo
.Sp
This generates a \s-1DS\s0 record for \fIname\fR. \fItag\fR is the key tag, \fIalgorithm\fR
specifies the algorithm of the referenced key and \fIdigest\fR is the digest type
(all in decimal).  \fIfingerprint\fR is the hex-encoded actual digest value
(omitting leading/trailing zeroes is not permitted!). \fIttl\fR, \fItimestamp\fR and
\&\fIlo\fR are as usual.
.IP "\(bu" 4
#Pname:algorithm:flags:iter:len:salt:ttl:timestamp:lo
.Sp
This generates an \s-1NSEC3PARAM\s0 record for \fIname\fR with the given \fIalgorithm\fR,
\&\fIflags\fR, \fIiter\fRation count, salt \fIlen\fRgth and \fIsalt\fR. If \fIsalt\fR is empty,
a new random salt with the given salt \fIlen\fRgth (4 bytes if \fIlen\fR is empty)
will be generated. If \fIsalt\fR is non-empty, it must be a string of hex digits
with even length. The salt length is derived from the given salt value, i. e.
\&\fIlen\fR is ignored in that case.  \fIttl\fR, \fItimestamp\fR and \fIlo\fR are as usual.
.Sp
tinydns-sign currently only supports \fIalgorithm\fR 1 (\s-1SHA\-1\s0). At the time of
writing, \fIflags\fR is defined to be 0, and the \fIiter\fRation count is limited
depending on the key length (see \s-1RFC\-5155\s0).
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
tinydns-sign will exit with status 0 if it thinks all went well. Warning
messages will not trigger a nonzero exit status.
.PP
tinydns-sign will exit with nonzero status if an error occurred. In this case,
the output is most likely incomplete and should not be used to replace an
input file.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fItinydns\-data\fR\|(8),
\&\s-1RFC\-4034\s0 <http://tools.ietf.org/html/rfc4034>,
\&\s-1RFC\-4035\s0 <http://tools.ietf.org/html/rfc4035>,
\&\s-1RFC\-5155\s0 <http://tools.ietf.org/html/rfc5155>
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
.IP "\(bu" 4
Location code handling is incomplete in that location codes must be
present for all RRs in a zone, or for none at all.
.IP "\(bu" 4
Timestamps are currently mostly ignored, i. e. signatures will happily
outlive the RR-sets which they sign.
.IP "\(bu" 4
It is currently not possible to protect the private keys with a
passphrase.
.IP "\(bu" 4
It is not possible to have a signed zone and a signed child zone in
the same data file.
.IP "\(bu" 4
\&\s-1NSEC3\s0 RRs with Opt-Out child zones are not supported.
.IP "\(bu" 4
The pseudo-RRs with type 65282 contain a list of hash values. The list
cannot grow bigger than 65kBytes (about 3270 hashes). This is not a problem
for a typical domain, but it would be a problem if tinydns were to serve the
\&.de zone, for example. Also, the list is searched sequentially, which can
cause a performance impact long before this limit is reached.
.SH "CAVEATS"
.IX Header "CAVEATS"
.IP "\(bu" 4
The system clock should be reasonably close to \s-1UTC\s0 (i. e. within a few minutes).
.IP "\(bu" 4
Stock tinydns/axfrdns will happily work with signed data.cdb files,
but they will not produce correct \s-1DNSSEC\s0 responses!
.IP "\(bu" 4
If a zone contains both keys with and without the \s-1SEP\s0 flag, you must
make sure that both key sets cover the same set of algorithms. This is due to
a requirement in \s-1RFC\-4035\s0 section 2.2.
.SH "AUTHOR"
.IX Header "AUTHOR"
(C) 2012 Peter Conrad <mailto:conrad@quisquis.de>
.PP
This program is free software: you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License version 3 as
published by the Free Software Foundation.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
