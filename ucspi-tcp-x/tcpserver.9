.TH tcpserver 1
.SH NAME
tcpserver \- accepts incoming TCP connections.
.SH SYNOPSIS
.B tcpserver
[
.I opts
]
.I host
.I port
.I prog[.so]
.SH DESCRIPTION
.I opts
is a series of getopt-style options.
.I host
is one argument.
.I port
is one argument.
.I prog
[.\fIso\fR]
consists of one or more arguments. 

\fBtcpserver\fR(1) waits for connections from TCP clients. For each
connection, it runs \fIprog\fR, with descriptor 0 reading from the network
and descriptor 1 writing to the network. It also sets up several
environment variables. if \fIprog.so\fR is specified, it is expected that
prog.so points to a shared object, which gets loaded using dlopen(3) call.
Specifying a shared object can significantly improve performance by loading
the object only once.

The server's address is given by \fIhost\fR and \fIport\fR. \fIport\fR may
be a name from /etc/services or a number; if it is 0, \fBtcpserver\fR(1)
will choose a free TCP port.
\fIhost\fR may be 0, allowing connections to any local IP address; or a
dotted-decimal IP address, allowing connections only to that address; or a
host name, allowing connections to the first IP address for that host.
Host names are fed through qualification using dns_ip4_qualify
(dns_ip6_qualify for ipv6).

\fBtcpserver(1)\fR works differently on Linux and FreeBSD. By default,
FreeBSD does not route IPv4 traffic to AF_INET6 sockets. The default
behavior intentionally violates RFC2553 for security reasons. IPv4 traffic
may be routed with certain per-socket/per-node configuration, however, it
is not recommended to do so. Consult ip6(4) for details. Linux, however
allows connections to any local IPv4 or IPv6 addresses. So on FreeBSD, to
overcome this limitation, \fBtcpserver\fR(1) creates two sockets and binds
both IPv4 and IPv6 addresses. It then uses select(2) to carry out operation
to accept a connection from the right socket.

\fBtcpserver\fR(1) dumps the list of active connections on stderr when it
receives SIGUSR1. \fBtcpserver\fR(1) exits when it receives SIGTERM.

.SH OPTIONS
.B General options:
.TP
.B \-q
Quiet. Do not print error messages. 
.TP
.B \-Q
(Default.) Print error messages. 
.TP
.B \-v
Verbose. Print error messages and status messages. 
.TP
.B \-V
Verbose. Print error messages, status messages and IP connection table. 
.P
.B Connection options:
.TP
.B \-c \fIn
|
.B \fIfile

Do not handle more than \fIn\fR simultaneous connections. If there are
\fIn\fR simultaneous copies of prog running, defer acceptance of a new
connection until one copy finishes. \fIn\fR must be a positive integer.
Default: 40. In the second form, \fIfile\fR can be a full path to a
filename containing an integer specifying \fIn\fR. This file will be
reread when \fBtcpserver\fR(1) receives SIGHUP.

.TP
.B \-C \fIn
Do not handle more than \fIn\fR simultaneous connections from a particular
host. If there are \fIn\fR simultaneous copies of prog running, defer
acceptance of a new connection until one copy finishes. \fIn\fR must be a
positive integer. Default: 20. This can be also handled by having the
environment variable $\fBMAXPERIP\fR compiled in the \fIrules\fR cdb
database. The $\fBMAXPERIP\fR environment variables gives
\fBtcpserver\fR(1) the ability to have different per host concurrency limit
for each and every host that is defined in the rules database.

.TP
.B \-x \fIcdb
Follow the rules compiled into \fIcdb\fR by \fBtcprules\fR(1). These rules
may specify setting environment variables or rejecting connections from bad
sources. You can rerun \fBtcprules\fR(1) to change the rules while
\fBtcpserver\fR(1) is running. 

.TP
.B \-X
With
.B -x \fIcdb,
allow connections even if \fIcdb\fR does not exist. Normally
\fBtcpserver\fR(1) will drop the connection if \fIcdb\fR does not exist.

.TP
.B \-m \fIdb.conf
Follow rules specified in the MySQL table tcprules. This table has 4
columns. The column \fIiprules\fR contains an IP address which can include
wildcards. eg. 202.144.*.?, 202.144.10-20.1, etc. The column \fIdecision\fR
can have the value '\fID\fR' to deny connections for matching IP
addresses. The column \fIenv\fR contains a list of comma separated
environment variables. e.g HOME=/tmp,SERVER=galaxy. The \fIdb.conf\fR file
has the following layout

.EX
database server ip:database user:database password:database name:table name
.EE

with this option, \fBtcpserver\fR(1) will connect to the \fBMySQL\fR
server specified by parameters in \fIdb.conf\fR file. The connect timeout
can be controlled by the environment variable $\fBMYSQL_TIMEOUT\fR.

To enable the -m option, you have to set $\fBMYSQL_LIB\fR variable to point
to the mysql shared library. e.g.

.EX
  MYSQL_LIB= /usr/lib64/mysql/libmysqlclient.so.21.0.15
.EE

You can set $\fBMYSQL_LIB\fR environment variable in
/service/\fIname\fR/variables/MYSQL_LIB (here \fIname\fR refers to a service
under \fIsupervise\fR(8)). You can also set the value in the control file
\fImysql_lib\fR. Environment variable takes precedence over the control file.

.TP
.B \-B \fIbanner
Write \fIbanner\fR to the network immediately after each connection is made.
\fBtcpserver\fR(1) writes \fIbanner\fR before looking up
$\fBTCPREMOTEHOST\fR, before looking up $TCPREMOTEINFO, and before checking
\fIcdb\fR. This feature can be used to reduce latency in protocols where
the client waits for a greeting from the server. 

.TP
.B \-g \fIgid
Switch group ID to \fIgid\fR after preparing to receive connections.
\fIgid\fR must be a positive integer. 

.TP
.B \-u \fIuid
Switch user ID to \fIuid\fR after preparing to receive connections.
\fIuid\fR must be a positive integer. 

.TP
.B \-U
Same as
.B \-g
\fIGID\fR
.B \-u
\fIUID\fR. Typically $\fIGID\fR and $\fIUID\fR are set by
\fBenvuidgid\fR(8).

.TP
.B \-1
After preparing to receive connections, print the local port number to
standard output. 

.TP
.B \-4
Fall back to IPv4 sockets. This is necessary for terminally broken
systems like OpenBSD which will not let IPv6 sockets connect to
V4-mapped IPv6 addresses. Please note that this also applies to DNS
lookups, so you will have to use an DNS resolver with an IPv6 address to
accept IPv6 connections. Use \fBDNSCACHEIP\fR to set the DNS resolver
IP dynamically.

.TP
.B \-6
Force IPv6 mode in \fBUCSPI\fR environment variables, even for
IPv4 connections. This will set $\fBPROTO\fR to \fBTCP6\fR and put
IPv4-mapped IPv6 addresses in $\fBTCP6LOCALIP\fR and $\fBTCP6REMOTEIP\fR.

.TP
.B \-I\fIinterface
Bind to the network interface \fIinterface\fR ("eth0" on Linux, for example).
This is only defined and needed for IPv6 link-local addresses.

.TP
.B \-b \fIn
Allow a backlog of approximately \fIn\fR TCP SYNs. On some systems, \fIn\fR
is silently limited to 5. On systems supporting SYN cookies, the backlog is
irrelevant. 

.TP
.B \-o
Leave IP options alone. If the client is sending packets along an IP source
route, send packets back along the same route.

.TP
.B \-O
(Default.) Kill IP options. A client can still use source routing to connect
and to send data, but packets will be sent back along the default route.

.TP
.B \-d
Delay sending data for a fraction of a second whenever the remote host is
responding slowly. This is currently the default, but it may not be in the
future; if you want it, set it explicitly. 

.TP
.B \-D
Never delay sending data; enable TCP_NODELAY. 

.P
.B Data-gathering options: 

.TP
.B \-h
(Default.) Look up the remote host name in DNS to set the environment variable
$\fBTCPREMOTEHOST\fR. 

.TP
.B \-H
Do not look up the remote host name in DNS; remove the environment variable
$\fBTCPREMOTEHOST\fR. To avoid loops, you must use this option for servers on TCP
port 53. 

.TP
.B \-p
Paranoid. After looking up the remote host name in DNS, look up the IP
addresses in DNS for that host name, and remove the environment variable
$TCPREMOTEHOST if none of the addresses match the client's IP address. The
environment variable $\fBTCPPARANOID\fR is set if host has a reverse dns but IP
does not match $\fBTCPREMOTEIP\fR

.TP
.B \-P
(Default.) Not paranoid. 

.TP
.B \-l \fIlocalname
Do not look up the local host name in DNS; use \fIlocalname\fR for the
environment variable $\fBTCPLOCALHOST\fR. A common choice for
\fIlocalname\fR is 0. To avoid loops, you must use this option for servers
on TCP port 53. 

.TP
.B \-r
(Default.) Attempt to obtain $\fBTCPREMOTEINFO\fR from the remote host. 

.TP
.B  \-R
Do not attempt to obtain $\fBTCPREMOTEINFO\fR from the remote host. To
avoid loops, you must use this option for servers on TCP ports 53 and 113.

.TP
.B \-t \fIn
Give up on the $TCPREMOTEINFO connection attempt after
\fIn\fR seconds. Default: 26.

.TP
.B \-s
Use default cert servercert.pem in @qsysconfdir@/certs. The location
of certificate directory can be changed by using -i option or setting
$\fBCERTDIR\fR environment variable.

.TP
-\fBi\fR \fIcertdir\fR
Directory having certificates.
Default is @qsysconfdir@/certs.

.TP
.B \-n \fIcertfile
Use \fIcertfile\fR as the default certificate instead of servercert.pem.

.TP
.B \-a \fIcafile
Specify \fIcafile\fR as the file containing CA certificates. Sometimes,
special CA certificates are needed if an intermediate certificate used
by your issuing CA expires. Note that the file given with -a is passed
to SSL_CTX_load_verify_locations and thus may contain several CA
certificates, which will be used during SSL connection negotiation to
close any gap in the certificate chain.

.TP
-\fBf\fR \fIcipher_list\fR
Use ciphers listed in \fIcipher_list\fR. Without this \fBdotls\fR uses
TLS_CIPHER_LIST environment variable if set or system configured
PROFILE=SYSTEM ciphers.

.TP
-\fBM\fR \fItls_method\fR
Use \fItls_method\fR to set client/server method / protocol. This will be
one of SSLv23, SSLv3, TLSv1, TLSv1_1, TLSv1_2, TLSv1_3 values.
The actual protocol version used will be negotiated to the highest version
mutually supported by the client and the server. The supported protocols
are SSLv3, TLSv1, TLSv1_1, TLSv1_2 and TLSv1_3. Ths option mus not be used
to avoid the version-specific methods described below, which are deprecated.

.SH IPv4-mapped IPv6 addresses
Setting up \fBtcpserver\fR(1) with simultaneous bindings to IPv4 and IPv6
addresses, the Unix kernel employs the mapping

.EX
::ffff:a.b.c.d
for the IPv4 address
a.b.c.d
.EE

Setting up \fBtcpserver\fR(1) in IPv4 mode (-4) only or in compatibility
mode, IPv4 addresses are considered in their native format without the IPv6
prefix. Thus, usual IPv4 addresses can be entered in rules.cdb even in
common IPv4/IPv6 bindings.

.SH DNS RESOLVER SETTINGS

\fBDNSCACHEIP\fR, \fBDNSREWRITEFILE\fR

Use $\fBDNSCACHEIP\fR to set the DNS resolver's IP(s) dynamically irrespectively
from the settings in /etc/resolv.conf. The individual IPs are separated by
blanks; IPv6 LLU addresses may be appended with the interface name
following a '%' sign. If the environment variable $\fBLOCALDOMAIN\fR is
populated, this name will be appended to unqualified host names.
Additional rewriting of local to public names is facilitated in case the
file /etc/dnsrewrite exists and is populated, or alternatively, the
environment variable $\fBDNSREWRITEFILE\fR points to a different file. See
djbdns(7), qualification(5)

.SH Loading Shared Objects
\fBtcpserver\fR(1) can load shared objects by specifying a shared object on the
command line. In such cases \fBtcpserver\fR(1) will execute a function whose name
is the basename of the shared object.

A special case can be setup for qmail-smtpd and rblmstpd
by specifying the following environment variables

.EX
PLUGIN0=@prefix@/lib/indimail/plugins/qmail_smtpd.so
PLUGIN0_dir=@qsysconfdir@
PLUGIN0_init=smtp_init
PLUGIN1=@prefix@/lib/indimail/plugins/rblsmtpd.so
.EE

The above causes \fBtcpserver\fR(1) to load qmail_smtpd.so and execute the smtp_init(1)
function, after changing directory to /var/indimail, in the parent. smtp_init()
loads all qmail-smtpd control files. Here PLUGIN0 is defined as
@prefix@/lib/indimail/plugins/qmail_smtpd.so, which causes the function
qmail_smtpd() to be preloaded. This improves the perfomance of the smtp 
service. In the above example, rblsmtpd.so
is loaded without executing any initialization function and without changing
directory. On SIGHUP, \fBtcpserver\fR(1) executes the function smtp_init(0). The
variable PLUGINn_dir should be used if your function expects to be in a
particular directory to function properly. PLUGIN1 causes \fBtcpserver\fR(1) to preload
rblsmtpd.so and if \fIprog\fR is @prefix@/lib/indimail/plugins/rblsmtpd.so, it
will simply execute the function \fIrblsmtpd\fR, from the shared library
rblsmtpd.so already preloaded in the memory.

The function (basename of the shared objec) is passed argc, argv and envp.

.EX
func(int argc, char **argv, char **env)
.EE

Here argc is the number of arguments passed to the shared object, argv the
arguments and envp is the modified environment variables set by \fBtcpserver\fR(1).
See tcp-env(1). If you want your function to inherit all env variables set
by \fBtcpserver\fR(1), just do the following in your function

.EX
environ = envp;
.EE

Now with the above set of variables you just need to have an invocation of
\fBtcpserver\fR(1) similar to below, which will cause \fBtcpserver\fR(1) to execute
the function \fBrblsmtpd\fR(argc, argv) followed by function
\fBqmail_smtpd\fR(argc, arg) for every connection. This is almost equivalent
to executing the binary versions rblsmtpd, qmail-smtpd.

.EX
tcpserver 127.0.0.1 25 /usr/indimail/lib/plugins/rblsmtpd.so -rdnsbl-1.uceprotect.net \\
    /usr/indimail/lib/plugins/qmail_smtpd.so
.EE

.SH ENVIRONMENT
.TP
.B TLS_CIPHER_LIST
Specifies the ciphers that should be used in SSL/TLS mode. See
.I openssl(1)
for more information.
.TP
.B CERTDIR
Sub-directory relative to @qsysconfdir@, having servercert.pem.
Default is @qsysconfdir@/certs.

.SH NOTES

This NOTE is valid only when \fBdotls\fR(1) is acting as a server.

A script in cron uses the following openssl commands to pre-generate 2048
bites RSA and DH parameters. You can pass --maxbits argument to
\fIupdate_tmprsadh\fR to generate these with higher bits. You can set the
environment variable \fBSSL_BITS\fR to make dotls choose specific bits for
the RSA/DH parameters. These files are generated in @qsysconfdir@/certs.

.EX
/usr/bin/openssl genrsa  -out    rsa2048.pem 2048
/usr/bin/openssl dhparam -out -2  dh2048.pem 2048
.EE

Some ciphersuites may use ephemeral Diffie-Hellman (DH) key exchange. In
these cases, the session data is negotiated using the ephemeral/temporary
DH key and the key supplied and certified by the certificate chain is only
used for signing. Anonymous ciphers (without a permanent server key) also
use ephemeral DH keys.

Using ephemeral DH key exchange yields forward secrecy as the connection
can only be decrypted when the DH key is known. By generating a temporary
DH key inside the server application that is lost when the application is
left, it becomes impossible for an attacker to decrypt past sessions, even
if they get hold of the normal (certified) key, as this key was only used
for signing.

In order to perform a DH key exchange the server must use a DH group (DH
parameters) and generate a DH key. The server will always generate a new DH
key during the negotiation.

As generating DH parameters is extremely time consuming, an application
should not generate the parameters on the fly. DH parameters can be reused,
as the actual key is newly generated during the negotiation.

Typically applications should use well known DH parameters that have
built-in support in OpenSSL. The macro SSL_set_dh_auto(3ossl) configures
OpenSSL to use the default built-in DH parameters for the SSL object.
Passing a value of 1 in the onoff parameter switches the feature on, and
passing a value of 0 switches it off. The default setting is off.

If "auto" DH parameters are switched on then the parameters will be
selected to be consistent with the size of the key associated with the
server's certificate. If there is no certificate (e.g. for PSK
ciphersuites), then it it will be consistent with the size of the
negotiated symmetric cipher key.

Applications may supply their own DH parameters instead of using the
built-in values. This approach is discouraged and applications should in
preference use the built-in parameter support described above. Applications
wishing to supply their own DH parameters should call
SSL_set0_tmp_dh_pkey(3ossl) to supply the parameters for SSL. The
parameters should be supplied in the dhpkey argument as an EVP_PKEY
containg DH parameters. Ownership of the dhpkey value is passed to the
SSL_CTX or SSL object as a result of this call, and so the caller should
not free it if the function call is succesful..

.SH SEE ALSO
tcprules(1),
tcprulescheck(1),
argv0(1),
fixcrio(1),
recordio(1),
rblsmtpd(1),
tcpclient(1),
who@(1),
date@(1),
finger@(1),
http@(1),
tcpcat(1),
mconnect(1),
openssl(1),
dlopen(3),
supervise(8),
svscan(8),
tcp-environ(5),
socket(2),
select(2),
accept(2)

http://cr.yp.to/ucspi-tcp.html
