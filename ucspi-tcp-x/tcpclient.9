.\" vim: tw=75
.TH tcpclient 1

.SH NAME
tcpclient \- creates an outgoing TLS/non-TLS TCP IPv4/IPv6 connection.

.SH SYNOPSIS
.lf
\fBtcpclient\fR [\fIopts\fR] \fIhost\fR/\fIsocket\fR [\fIport\fR]
[\fIprog\fR]

.SH DESCRIPTION
\fIopts\fR is a series of getopt-style options. \fIhost\fR/\fIsocket\fR is
one argument. If \fIsocket\fR is provided as a path, \fBtcpclient\fR uses
UNIX domain socket to connect (See unix(7)). In this case \fIport\fR is
not provided. If \fIhost\fR is not a filesystem path, \fIhost\fR is used as
a TCP/IP address and TCP port is used where \fIport\fR is one argument.
\fIprog\fR consists of one or more arguments. \fBtcpclient\fR attempts to
connect to a TCP server or a UNIX socket. Depending on whether \fIprog\fR
is provided or omitted, \fBtcpclient\fR does one of the two things below.

if \fIprog\fR is provided, it runs \fIprog\fR, with descriptor 6 reading
from the network/socket and descriptor 7 writing to the network/socket. It
also sets up several environment variables (see .BR tcp-environ (5)).

If \fIprog\fR is omitted, \fBtcpclient\fR enters client mode where it
passes data from descriptor 0 to the network and data from the network to
descriptor 1. client mode is similar to how you would use programs like
telnet(1), ssh(1), etc.

\fBtcpclient\fR can also initiate a SSL/TLS session with a remote host (-n
option). This requires a \fIclientcert\fR to be provided. In client mode,
one can also do opportunistic TLS by using \fB\-s\fR \fIstarttls\fR option.
The currently supported option for \fIstarttls\fR are \fBsmtp\fR,
\fBpop3\fR and \fBimap\fR.

For TLS/SSL sessions, \fBtcpclient\fR sets the environment variable
\fBTLS_PROVIDER\fR with details of the TLS connnection if passed the -z
option.

The server's address is given by a \fIsocket\fR path or \fIhost\fR and
\fIport\fR. \fIport\fR may be a name from /etc/services or a number.
\fIhost\fR may be 0, referring to the local machine, or a dotted-decimal IP
address or IPv6 address, or a host name; it is fed through qualification
using dns_ip4_qualify.

If the server has several IP addresses, \fBtcpclient\fR tries each address
in turn.

.SH OPTIONS
\fBGeneral options\fR:

.TP
.B \-q
Quiet. Do not print error messages.

.TP
.B \-Q
(Default.) Print error messages.

.TP
.B \-v
Verbose. Print error messages and status messages.
.P
.B Connection options:

.TP
.B \-T \fIx\fR+\fIy
Timeout on the connection attempt after
.I x\fR+\fIy
seconds. Default: 2+58. When a host has several IP addresses,
.B tcpclient
tries to connect to the first IP address, waits
.I x
seconds, tries to connect to the second IP address, waits
.I x
seconds, etc.; then it retries each address that timed out, waiting
.I y
seconds per address. You may omit
.RI + y
to skip the second try. Before version 0.88,
.BR tcpserver (1)
will use only
.I x
(default: 60). For a UNIX domain socket, there is just one connection
attempt.

.TP
.B \-i \fIlocalip
Use
.I localip
as the IP address for the local side of the connection; quit if
.I localip
is not available. Normally
.B tcpclient
lets the operating system choose an address. This option is not used for
UNIX domain sockets.

.TP
.B \-p \fIlocalport
Use
.I localport
as the TCP port for the local side of the connection; quit if
.I localport
is not available. Normally
.B tcpclient
lets the operating system choose a port. This option is not used for UNIX
domain sockets.

.TP
.B \-d
Delay sending data for a fraction of a second whenever the remote host is
responding slowly. This is currently the default, but it may not be in the
future; if you want it, set it explicitly. This option is not used for UNIX
domain sockets.

.TP
.B \-D
Never delay sending data; enable TCP_NODELAY. This option is not used for
UNIX domain sockets.

.TP
.B \-C \fIcertdir
Directory having certificates.
Default is @qsysconfdir@/certs.

.TP
.B \-n \fIclientcert
Use \fIcertfile\fR as the TLS/SSL certificate. If the -n option is not
provided, tcpclient will not initiate a TLS/SSL session. \fIcertfile\fR can
be an empty string to use \fBTLS_CERTFILE\fR environment variable.

.TP
.B \-c \fIcafile
Specify \fIcafile\fR as the file containing CA certificates. Sometimes,
special CA certificates are needed if an intermediate certificate used
by your issuing CA expires. Note that the file given with -c is passed
to SSL_CTX_load_verify_locations and thus may contain several CA
certificates, which will be used during SSL connection negotiation to
close any gap in the certificate chain. If this is not provided, the file
@qsysconfdir@/certs/serverca.pem will be used.

.TP
-\fBL\fR \fIcrlfile\fR
A list of Certificate Revocation Lists (CRLs). If present it
should contain the CRLs of the CAs in \fIcafile\fR and server certs that
will be checked for revocation. If this is not provided, the file
close any gap in the certificate chain. If this is not provided, the file
@qsysconfdir@/certs/servercrl.pem will be used.

.TP
-\fBz\fR
Set \fBTLS_PROVIDER\fR environment variables with details of the TLS/SSL
connection. This environment variable will be available for \fIprog\fR
when using TLS/SSL.

.TP
-\fBf\fR \fIcipher_list\fR
Use ciphers listed in \fIcipher_list\fR. Without this \fBtcpclient\fR uses
TLS_CIPHER_LIST environment variable if set (or system configured
PROFILE=SYSTEM ciphers for TLSv1.2 and below). For TLSv1.3 the environment
variable TLS_CIPHER_SUITE is used instead. See openssl-ciphers(1ossl).

.TP
-\fBM\fR \fItls_method\fR
Use \fItls_method\fR to set client/server method / protocol. This will be
one of SSLv23, SSLv3, TLSv1, TLSv1_1, TLSv1_2, TLSv1_3 values.
Without this option, the actual protocol version used will be negotiated to
the highest version mutually supported by the client and the server. The
supported protocols at this moment are TLSv1.2 and TLSv1.3. Older protocols
have been deprecated and removed. It is best not to use this option to let
\fBtcpclient\fR choose the highest protocol supported.

.TP
\fB\-s\fR \fIstartlsType\fR
Specify smtp, pop3 or imap for \fIstarttlsType\fR. This works only when
running in \fBclient mode\fR (when \fIprog\fR is omitted). In client mode,
\fBtcpclient\fR will initiate SSL/TLS negotation after issuing
\fBSTARTTLS\fR command itself to the remote server.

.TP
.B \-m \fIhost
Match \fIhost\fR with common name in certificate (CN)

.TP
.B \-a \fItimeoutdata
Timeout if read or write to/from \fIhost\fR exceeds \fItimeoutdata\fR
seconds.

.P
.B Data-gathering options:

.TP
.B \-h
(Default.) Look up the remote host name in DNS to set the environment
variable $TCPREMOTEHOST. This option is not used for UNIX domain sockets.

.TP
.B \-H
Do not look up the remote host name in DNS; remove the environment
variable $TCPREMOTEHOST. This option is not used for UNIX domain sockets.

.TP
.B \-l \fIlocalname
Do not look up the local host name in DNS; use
.I localname
for the environment variable $TCPLOCALHOST. A common choice for localname
is 0. This option is not used for UNIX domain sockets.

.TP
.B \-r
(Default.) Attempt to obtain $TCPREMOTEINFO from the remote host. This
option is not used for UNIX domain sockets.

.TP
.B \-R
Do not attempt to obtain $TCPREMOTEINFO from the remote host. This option
is not used for UNIX domain sockets.

.TP
.B \-t \fIn
Timeout on the $TCPREMOTEINFO connection attempt after
.I n
seconds. Default: 26. This option is not used for UNIX domain sockets.

.SH ENVIRONMENT
.TP 0
.B TLS_CERTFILE
client ssl certificate. This is used when an empty string is passed as the
argument to the -n option.
Default is clientcert.pem

.TP
.B SERVERCA
CA certificate. This can be overriden by the -c option.
Default is @qsysconfdir@/certs/serverca.pem

.TP
.B SERVERCRL
Certificate Revocation Lists.
Default is @qsysconfdir@/certs/servercrl.pem

.TP
.B TLS_CIPHER_LIST
A set of OpenSSL cipher strings. Multiple ciphers contained in a string
should be separated by a colon. This can be overriden by the -f option.

.TP
.B CERTDIR
Sub-directory relative to @qsysconfdir@, having clientcert.pem.
Default is @qsysconfdir@/certs.

.SH EXAMPLES
.EX
1. Connect to port 25 and issue the starttls command. Use default
   certificate \fI@qsysconfdir@/certs/clientcert.pem\fR.

   $ tcpclient -n "" -s smtp 0 25

2. Connect to port 110 and issue the STLS command. Use default certificate
   \fI@qsysconfdir@/certs/clientcert.pem\fR.

   $ tcpclient -n "" -s pop3 0 110

3. Connect to port 143, issue the STARTTLS  command and then run a script.
   read from descriptor 6 reads from network, write to descriptor 1 writes
   to network. Use default certificate \fI@qsysconfdir@/certs/clientcert.pem\fR.

   $ tcpclient -n "" -s imap 0 143 /usr/bin/my_script

4. Connect to port 143 and issue the STARTTLS command, like openssl
   s_client -starttls. Use default certificate
   \fI@qsysconfdir@/certs/clientcert.pem\fR.

   $ tcpclient -n "" -s imap 0 143

5. Connect to port 25 on 127.0.0.1.

   $ tcpclient 127.0.0.1 25

6. Connect to port 465 on 127.0.0.1 like openssl s_client

   $ tcpclient -n @qsysconfdir@/certs/clientcert.pem 127.0.0.1 465

7. Run a script under tcpclient that connects to a SSL server on port 5555
   read from descriptor 6 reads from network, write to descriptor 7 writes
   to network. Certificate used is the value of TLS_CERTFILE env variable.

   $ tcpclient -n "" 0 5555 /usr/bin/my_script

8. Connect to qmail-smtpd on UNIX socket /run/indimail/smtpd like telnet
   read from descriptor 0 reads from socket, write to descriptor 1 writes
   to socket.

   a) run tcpserver

   $ tcpserver -vn @qsysconfdir@/certs/servercert.pem \\
     /run/indimail/smtpd /usr/sbin/qmail-smtpd

   b) run tcpclient

   $ tcpclient -n @qsysconfdir@/certs/clientcert.pem /run/indimail/smtpd
.EE

.SH SEE ALSO
tcpserver(1),
dotls(1),
openssl(1),
tcprules(1),
tcprulescheck(1),
argv0(1),
fixcrio(1),
recordio(1),
rblsmtpd(1),
who@(1),
date@(1),
finger@(1),
http@(1),
tcpcat(1),
mconnect(1),
tcp-environ(5),
openssl-ciphers(1ossl).

http://cr.yp.to/ucspi-tcp.html
