.TH "dotls" "1" "06 Mar 2010" "Manvendra Bhangui" ""

.SH NAME
dotls \- Generic TLS/SSL protocol wrapper for non-TLS programs
.SH SYNOPSIS

\fBdotls\fR [-ndftMCT ] [-s smtp|pop3] \fB\fIprog\fB\fR \fB\fIarg\fB\fR\fI ...\fR

.SH "DESCRIPTION"
.PP
The \fBdotls\fR program is used by applications to encrypt a
network connection using SSL/TLS, without having the application
deal with the gory details of SSL/TLS.

.PP
\fBdotls\fR is not usually run directly from the command line.
An application typically creates a network connection, then runs
\fBdotls\fR with appropriate options to encrypt the network
connection with SSL/TLS. \fBdotls\fR can also do opportunistic
SSL/TLS (or delayed encryption) for smtp in server mode.

\fBdotls\fR can be run under \fBtcpserver\fR(1) to provide SSL/TLS or
opportunistic TLS for qmail-smtpd, qmail-pop3d. This is known as
\fBserver mode\fR.

\fBdotls\fR can be run under \fBtcpclient\fR(1) to connect to any SSL/TLS
enabled server. This is known is \fBclient mode\fR. This gets enabled
when you use \fB\-T\fR or the \fB\-C\fR options.

If the environment variable \fBBANNER\fR is set, and -s option has not been
specified, \fBdotls\fR can print the value of \fBBANNER\fR environment
variable, on the network to the client, before starting a SSL/TLS session.

\fBdotls\fR will directly execute \fIprog\fR if \fBNOTLS\fR environment
variable is set. This can be set using the \fBtcpserver\fR(1) rules file to
bypass SSL/TLS for hosts that don't work if STARTLS or TLS is enabled.

\fBdotls\fR is not needed by indimail-mta, as all features offered by
\fBdotls\fR are built-in tcpserver(1) and tcpclient(1), provided by
ucspi-tcp package from indimail-mta git repo at,
https://github.com/mbhangui/indimail-mta/tree/master/ucspi-tcp-x

\fBdotls\fR intercepts client commands for the \fBEHLO\fR, \fBCAPA\fR,
\fBSTARTTLS\fR, \fBSTLS\fR, \fBQUIT\fR requests. For the \fBEHLO\fR and
\fBCAPA\fR requests, it offers \fBSTARTTLS\fR and \fBSTLS\fR capability on
behalf of \fIprog\fR. All other commands are passed unaltered to
\fIprog\fR.

\fBdotls\fR sets the environment variable \fBTLS_PROVIDER\fR with details
of the TLS connnection.

.SH "OPTIONS"
.TP
-\fBd\fR \fIcertdir\fR
Directory having certificates.
Default is @qsysconfdir@/certs.

.TP
-\fBn\fR \fIcertfile\fR
Use \fIcertfile\fR as the certificate
The certificate to use and is required for SSL/TLS servers.
\fIcertfile\fR must not be world-readable. This option overrides
environment variable TLS_CERTFILE. If this is not provided, the file
@qsysconfdir@/certs/clientcert.pem will be used.

.TP
-\fBc\fR \fIcafile\fR
Specify \fIcafile\fR as the file containing CA certificates. Sometimes,
special CA certificates are needed if an intermediate certificate used
by your issuing CA expires. Note that the file given with -c is passed
to SSL_CTX_load_verify_locations and thus may contain several CA
certificates, which will be used during SSL connection negotiation to
close any gap in the certificate chain. If this is not provided, the file
@qsysconfdir@/certs/clientca.pem will be used.

.TP
-\fBL\fR \fIcrlfile\fR
A list of Certificate Revocation Lists (CRLs). If present it
should contain the CRLs of the CAs in \fIcafile\fR and client certs that
will be checked for revocation. If this is not provided, the file
@qsysconfdir@/certs/clientcrl.pem will be used.

.TP
-\fBf\fR \fIcipher_list\fR
Use ciphers listed in \fIcipher_list\fR. Without this \fBdotls\fR uses
TLS_CIPHER_LIST environment variable if set or system configured
PROFILE=SYSTEM ciphers.

.TP
-\fBM\fR \fItls_method\fR
Use \fItls_method\fR to set client/server method / protocol. This will be
one of SSLv23, SSLv3, TLSv1, TLSv1_1, TLSv1_2, TLSv1_3 values.
The actual protocol version used will be negotiated to the highest version
mutually supported by the client and the server. The supported protocols
are SSLv3, TLSv1, TLSv1.1, TLSv1.2 and TLSv1.3. Ths option must not be used
to avoid version-specific methods since they are now deprecated.

.TP
-\fBt\fR \fItimeout\fR
Timeout after \fItimeout\fR seconds if no data is received

.TP
-\fBs\fR \fIstartlsType\fR
Specify smtp or pop3 for \fIstarttlsType\fR. In this mode,
\fBdotls\fR will offer STARTTLS extension. It will initiate SSL/TLS
negotation only when it receives \fBSTARTTLS\fR command from client.
Currently, \fBsmtp\fR and \fBpop3\fR are supported. If this is not
provided, \fBdotls\fR will directly initiate a TLS session.

.TP
-\fBC\fR
\fBclient\fR mode. In this mode, \fBdotls\fR acts as a tls client,
reading fd 0 for input and using fd 1 for output.

.TP
-\fBT\fR
\fBtcpclient\fR mode. In this mode, \fBdotls\fR acts as a tls client,
reading fd 6 for input and using fd 7 for output. Use this if \fIprog\fR has
been specifically written for tcpclient(1).

.SH "ENVIRONMENT VARIABLES"
.PP
\fBdotls\fR reads the following environment variables in
order to configure the SSL/TLS protocol:
.TP
.B CERTDIR
Directory having servercert.pem. This can be overriden by the -d option.
Default is @qsysconfdir@/certs.

.TP
.B TLS_CERTFILE
client/server ssl certificate. This can be overriden by the -n option.
Default is @qsysconfdir@/certs/servercert.pem in server mode and
@qsysconfdir@/certs/clientcert.pem in client mode.

.TP
.B CLIENTCA
CA certificate. This can be overriden by the -c option.
Default is @qsysconfdir@/certs/clientca.pem

.TP
.B CLIENTCRL
Certificate Revocation Lists.
Default is @qsysconfdir@/certs/clientcrl.pem

.TP
.B TLS_CIPHER_LIST
A set of OpenSSL cipher strings. Multiple ciphers contained in a string
should be separated by a colon. This can be overriden by the -f option.

.SH EXAMPLES
.EX
1. Add STARTTLS extension for qmail-smtpd
   tcpserver 0 25 /usr/bin/dotls -s smtp /var/qmail/bin/qmail-smtpd

2. Provide SMTPS service on port 465 for qmail-smtpd
   tcpserver 0 465 /usr/bin/dotls /var/qmail/bin/qmail-smtpd

3. Add STLS extension for qmail-pop3d
   tcpserver 0 110 /usr/bin/dotls -s pop3 qmail-popup host \\
     checkpassword qmail-pop3d Maildir

4. Provide POP3S service on port 993 for qmail-pop3d
   tcpserver 0 993 /usr/bin/dotls qmail-popup host checkpassword \\
     qmail-pop3d Maildir

5. Run a script under tcpclient that connects to a SSL server on port 5555
   read from fd 0 reads from network & write to fd 1 writes to network
   tcpclient 0 555 /usr/bin/dotls -C /usr/bin/myscript

6. Run a script under tcpclient that connects to a SSL server on port 5555
   read from fd 6 reads from network & write to fd 7 writes to network
   tcpclient 0 555 /usr/bin/dotls -CT /usr/bin/myscript
.EE

.SH NOTES

This NOTE is valid only when \fBdotls\fR(1) is acting as a server.

A script \fIupdate_tmprsadh\fR in cron uses the following openssl commands
to pre-generate 2048 bites RSA and DH parameters. You can pass --maxbits
argument to \fIupdate_tmprsadh\fR to generate these with higher bits. You
can set the environment variable \fBSSL_BITS\fR to make tcpclient choose
specific bits for the RSA/DH parameters. These files are generated in
@qsysconfdir@/certs. \fIupdate_rmprsadh\fR is installed to be run by cron
if you have installed indimail from Open Build Service.

.EX
/usr/bin/openssl genrsa  -out    rsa2048.pem 2048
/usr/bin/openssl dhparam -out -2  dh2048.pem 2048
.EE

Some ciphersuites may use ephemeral Diffie-Hellman (DH) key exchange. In
these cases, the session data is negotiated using the ephemeral/temporary
DH key and the key supplied and certified by the certificate chain is only
used for signing. Anonymous ciphers (without a permanent server key) also
use ephemeral DH keys.

Using ephemeral DH key exchange yields forward secrecy as the connection
can only be decrypted when the DH key is known. By generating a temporary
DH key inside the server application that is lost when the application is
left, it becomes impossible for an attacker to decrypt past sessions, even
if they get hold of the normal (certified) key, as this key was only used
for signing.

In order to perform a DH key exchange the server must use a DH group (DH
parameters) and generate a DH key. The server will always generate a new DH
key during the negotiation.

As generating DH parameters is extremely time consuming, an application
should not generate the parameters on the fly. DH parameters can be reused,
as the actual key is newly generated during the negotiation.

Typically applications should use well known DH parameters that have
built-in support in OpenSSL. The macro SSL_set_dh_auto(3ossl) configures
OpenSSL to use the default built-in DH parameters for the SSL object.
Passing a value of 1 in the onoff parameter switches the feature on, and
passing a value of 0 switches it off. The default setting is off.

If "auto" DH parameters are switched on then the parameters will be
selected to be consistent with the size of the key associated with the
server's certificate. If there is no certificate (e.g. for PSK
ciphersuites), then it it will be consistent with the size of the
negotiated symmetric cipher key.

Applications may supply their own DH parameters instead of using the
built-in values. This approach is discouraged and applications should in
preference use the built-in parameter support described above. Applications
wishing to supply their own DH parameters should call
SSL_set0_tmp_dh_pkey(3ossl) to supply the parameters for SSL. The
parameters should be supplied in the dhpkey argument as an EVP_PKEY
containg DH parameters. Ownership of the dhpkey value is passed to the
SSL_CTX or SSL object as a result of this call, and so the caller should
not free it if the function call is succesful..

.SH "SEE ALSO"
.PP
\fBtcpclient\fR(1),
\fBtcpserver\fR(1),
\fBqmail-smtpd\fR(8),
\fBqmail-pop3d\fR(8)
