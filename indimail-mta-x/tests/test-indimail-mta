#!/bin/sh
#
# $Id: test-indimail-mta,v 1.8 2023-09-08 16:11:12+05:30 Cprogrammer Exp mbhangui $
#
start=$(date +'%s')
user=$(whoami)
tuser=tuser
myuid=$(id -u)
mygid=$(id -g)
real_domain=argos.indimail.org
dkim_key=/etc/indimail/control/domainkeys/$real_domain/$(echo $real_domain | cut -d. -f1)
#
#
verbose=0
testdir=/tmp/qmail-test
maildir=$testdir/$user/Maildir
servicedir=$testdir/service
sysconfdir=$testdir/etc/indimail
cntrldir=$sysconfdir/control
certdir=$sysconfdir/certs
logdir=$testdir/logs
bindir=/usr/bin
sbindir=/usr/sbin
qmail_newu=$sbindir/qmail-newu
qmail_start=$sbindir/qmail-start
qmail_inject=$bindir/qmail-inject
qmail_smtpd=$sbindir/qmail-smtpd
qmail_remote=$sbindir/qmail-remote
setuidgid=$bindir/setuidgid
tcpserver=$bindir/tcpserver
qmail_queue=$sbindir/qmail-queue
dkim=$bindir/dkim
qmail_dkim=$sbindir"/qmail-dkim"
dk_filter=$bindir/dk-filter
dknewkey=$bindir/dknewkey
s_nail=/usr/bin/s-nail
smtp_port=2050
smtp_socket=$testdir/run/smtpd
sleep_int=2
HOSTNAME=$(uname -n)
domainkey_dir=$cntrldir/domainkeys
#real_domain=indimail.org
real_domain_rsa2048=/etc/indimail/control/domainkeys/argos.indimail.org/argos
real_domain_rsa4096=/etc/indimail/control/domainkeys/argos.indimail.org/b4096
real_domain_ed25519=/etc/indimail/control/domainkeys/argos.indimail.org/ed25519
nokeyerror=35
out=/dev/null

trap do_cleanup_failed EXIT

do_cleanup_failed()
{
	if [ $failed -eq 0 ] ; then
		return 0
	fi
	if [ -n "$svpid" ] ; then
		shutdown_svscan $svpid
	fi
	sudo /bin/rm -rf $servicedir
	sudo /bin/rm -rf $logdir
	sudo /bin/rm -rf $testdir/queue
	sudo /bin/rm -rf $testdir/bin
	sudo /bin/rm -rf $testdir/tmp
	sudo /bin/rm -rf $testdir/run
	sudo /bin/rm -rf $testdir/sleep.out
	sudo /bin/rm -rf $testdir/svscan.out
	sudo /bin/rm -rf $testdir/tcpclient.smtp
	sudo /bin/rm -rf $testdir/.vacation.dir/*
	sudo /bin/rm -rf $sysconfdir/users
}

check_mail()
{
	if [ $# -eq 1 ] ; then
		dir=$1
	else
		dir=$maildir
	fi
	count=0
	ret=1
	(
	while true
	do
		mcount=$(ls $dir/new | wc -l)
		if [ $mcount -gt 0 ] ; then
			mail_file=$(ls -lt $dir/new|head -2|tail -1|awk '{print $9}')
			/bin/rm -f $dir/new/$mail_file
			return 0
		fi
		sleep 1
		count=$(expr "$count" + 1)
		echo count=$count
		if [ $count -gt 5 ] ; then
			echo "Failed to receive Mail" 1>&2
			break
		fi
	done
	return 1
	) >> $logdir/mail/mail.log 2>&1
}

check_mail_header()
{
	count=0
	ret=1
	(
	while true
	do
		mcount=$(ls $maildir/new | wc -l)
		if [ $mcount -gt 0 ] ; then
			mail_file=$(ls -lt $maildir/new|head -2|tail -1|awk '{print $9}')
			grep "$1" $maildir/new/$mail_file
			if [ $? -eq 0 ] ; then
				/bin/rm -f $maildir/new/$mail_file
				return 0
			else
				cat $maildir/new/$mail_file
				/bin/rm -f $maildir/new/$mail_file
				return 1
			fi
		fi
		sleep 1
		count=$(expr "$count" + 1)
		echo count=$count
		if [ $count -gt 5 ] ; then
			echo "Failed to receive Mail" 1>&2
			break
		fi
	done
	return 1
	) >> $logdir/mail/mail.log 2>&1
}

shutdown_svscan()
{
	if [ -d $servicedir/.svscan/log ] ; then
		sudo kill $1
		sleep 5
		sudo svc -dx $servicedir/* $servicedir/*/log $servicedir/.svscan/log
	else
		sudo kill $1
		sleep 5
		sudo svc -dx $servicedir/* $servicedir/*/log
	fi
}

setup_maildir()
{
	if [ -d $maildir/new ] ; then
		find $maildir/new -type f -exec /bin/rm -f {} \;
	fi
	if [ -d $testdir/tuser/Maildir/new ] ; then
		find $testdir/tuser/Maildir/new -type f -exec /bin/rm -f {} \;
	fi
	mkdir -p $cntrldir
	mkdir -p $sysconfdir/users
	echo "Creating $maildir" 1>&2
	for i in cur new tmp
	do
		mkdir -p $maildir/$i
		mkdir -p $testdir/tuser/Maildir/$i
	done
}

setup_assign()
{
	echo "Creating $sysconfdir/users/assign" 1>&2
	(
	echo "=$user:$user:$myuid:$mygid:$testdir/$user:::"
	echo "+$user-:$user:$myuid:$mygid:$testdir/$user:-::"
	echo "=tuser:tuser:$myuid:$mygid:$testdir/tuser:::"
	echo "+tuser-:tuser:$myuid:$mygid:$testdir/tuser:-::"
	echo "."
	) > $sysconfdir/users/assign
	echo "Creating $sysconfdir/users/cdb" 1>&2
	$qmail_newu $sysconfdir/users
}

setup_queue()
{
	echo "Creating queue in $testdir/queue" 1>&2
	sudo queue-fix -s 23 -b 0 $testdir/queue
}

setup_config()
{
	echo "Creating default config files in $cntrldir"
	env CONTROLDIR=$cntrldir config-fast $HOSTNAME
	sudo /usr/sbin/svctool --cntrldir=$cntrldir --config=qmail
	sudo /usr/sbin/svctool --certdir=$certdir    --config=cert \
		--postmaster=postmaster@$HOSTNAME --common_name=$HOSTNAME
	cp /etc/indimail/bogofilter.cf.example $sysconfdir
	sudo /usr/sbin/svctool --sysconfdir=$sysconfdir --config=bogofilter
	tr -dc 'A-Za-z0-9' </dev/urandom | head -c 16 > $cntrldir/batvkey
	echo ./Maildir/                           > $cntrldir/defaultdelivery
	echo TLSv1_2:TLSv1_3                      > $cntrldir/tlsclientmethod
	echo TLSv1_2:TLSv1_3                      > $cntrldir/tlsservermethod
	echo blocked@$HOSTNAME                    > $cntrldir/badmailfrom
	echo blocked@$HOSTNAME                    > $cntrldir/badrcptto
	echo @$HOSTNAME                           > $cntrldir/nodnscheck
	echo 10                                   > $cntrldir/timeoutremote
	echo 10                                   > $cntrldir/timeoutsmtpd
	sudo chown -R $user $cntrldir
	ls -l $cntroldir/global_vars
}

test_tcpclient_script()
{
	(
	echo "#!/bin/sh"
	echo "exec 0<&6"
	echo "exec 1>&7"
	echo "read key"
	echo "greeting=\$(echo \$key | awk '{print \$1}')"
	echo "if [ \$greeting -ne 220 ] ; then"
	echo "	echo \"Greeting failed\" 1>&2"
	echo "	printf \"QUIT\r\n\""
	echo "fi"
	echo "printf \"EHLO\r\n\""
	echo "while true"
	echo "do"
	echo "	read line"
	echo "	echo \$line |grep \"250 \" >/dev/null"
	echo "	if [ \$? -eq 0 ] ; then"
	echo "		echo \$line 1>&2"
	echo "		break"
	echo "	fi"
	echo "	echo \$line 1>&2"
	echo "done"
	echo "printf \"MAIL FROM:<$user@$HOSTNAME>\r\n\" 1>&2"
	echo "printf \"MAIL FROM:<$user@$HOSTNAME>\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "code=\$(echo \$key |cut -c1-3)"
	echo "if [ \$code -ne 250 ] ; then"
	echo "	echo \"MAIL From failed: code=\$code\" 1>&2"
	echo "	exit 1"
	echo "fi"
	echo "printf \"RCPT TO:<$user@$HOSTNAME>\r\n\" 1>&2"
	echo "printf \"RCPT TO:<$user@$HOSTNAME>\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "code=\$(echo \$key |cut -c1-3)"
	echo "if [ \$code -ne 250 ] ; then"
	echo "	echo \"RCPT To failed: code=\$code\" 1>&2"
	echo "	exit 1"
	echo "fi"
	echo "printf \"DATA\r\n\" 1>&2"
	echo "printf \"DATA\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "code=\$(echo \$key |cut -c1-3)"
	echo "if [ \$code -ne 354 ] ; then"
	echo "	echo \"DATA command: code=\$code\" 1>&2"
	echo "	exit 1"
	echo "fi"
	echo "printf \"To: $user@$HOSTNAME\r\n\" 1>&2"
	echo "printf \"To: $user@$HOSTNAME\r\n\""
	echo "printf \"From: $user@$HOSTNAME\r\n\" 1>&2"
	echo "printf \"From: $user@$HOSTNAME\r\n\""
	echo "printf \"Subject: Test Message\r\n\" 1>&2"
	echo "printf \"Subject: Test Message\r\n\""
	echo "printf \"Date: \$(date -R)\r\n\" 1>&2"
	echo "printf \"Date: \$(date -R)\r\n\""
	echo "printf \"\r\n\" 1>&2"
	echo "printf \"\r\n\""
	echo "printf \"This is a test message\r\n\" 1>&2"
	echo "printf \"This is a test message\r\n\""
	echo "printf \".\r\n\" 1>&2"
	echo "printf \".\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "code=\$(echo \$key |cut -c1-3)"
	echo "if [ \$code -ne 250 ] ; then"
	echo "	echo \"SMTP Transaction failed: code=\$code\" 1>&2"
	echo "	exit 1"
	echo "fi"
	echo "printf \"QUIT\r\n\" 1>&2"
	echo "printf \"QUIT\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "exit 0"
	) > $testdir/tcpclient.smtp
	chmod +x $testdir/tcpclient.smtp
	case $1 in
		1)
		tcpclient -vDHR 0 $smtp_port $testdir/tcpclient.smtp > $logdir/tcpclient/tcpclient.log 2>&1
		;;
		2)
		if [ $# -eq 2 ] ; then
			tcpclient -M $2 -vDHRn $certdir/servercert.pem 0 \
				$smtp_port $testdir/tcpclient.smtp > $logdir/tcpclient/tcpclient.log 2>&1
		else
			tcpclient -vDHRn $certdir/servercert.pem 0 \
				$smtp_port $testdir/tcpclient.smtp > $logdir/tcpclient/tcpclient.log 2>&1
		fi
		;;
		3)
		tcpclient -v $smtp_socket $testdir/tcpclient.smtp > $logdir/tcpclient/tcpclient.log 2>&1
		;;
		4)
		tcpclient -vn $certdir/servercert.pem $smtp_socket $testdir/tcpclient.smtp \
			> $logdir/tcpclient/tcpclient.log 2>&1
		;;
	esac
	/bin/rm -f $testdir/tcpclient.smtp
	if [ $# -eq 2 ] ; then
		tls="$2"
	else
		tls="auto"
	fi
	check_mail
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing mail doing SMTP with tcpclient TLS=$tls succeeded"
	else
		(
		echo "  testing mail doing SMTPS with tcpclient TLS=$tls failed"
		echo "tcpclient.log"
		cat $logdir/tcpclient/tcpclient.log
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		)
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
}

run_qmail_send()
{
	(
	sudo env - \
		PATH=/bin:/usr/sbin \
		BIGTODO=0 \
		QPWGR=1 \
		CONTROLDIR=$cntrldir \
		CERTDIR=$certdir \
		CONFSPLIT=23 \
		QUEUEDIR=$testdir/queue \
		ASSIGNDIR=$sysconfdir/users \
		$qmail_start -s ./Maildir/ > $logdir/qmail-send/qmail-send.log 2>&1
	) &
}

get_send_pid()
{
	while true
	do
		send_pid=$(/bin/ps -ef | grep qmail-send |grep $testdir |grep -E -v "qmail-clean|grep" | awk '{print $2}')
		if [ -n "$send_pid" ] ; then
			break
		fi
		sleep 1
	done
	echo $send_pid
}

test_qmail_inject()
{
	echo "Starting qmail-inject"
	(
	echo "From: $2"
	echo "To: $3"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) | sudo $setuidgid -g qcerts $1 env - \
		QUEUEDIR=$testdir/queue \
		QMAILQUEUE=$qmail_queue \
		CONTROLDIR=$cntrldir \
		BIGTODO=0 \
		CONFSPLIT=23 \
		$qmail_inject $3
	check_mail
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing qmail-inject, qmail send+receive succeeded"
	else
		sudo kill $send_pid
		(
		echo "  testing qmail-inject, qmail send+receive failed"
		cat $logdir/qmail-send/qmail-send.log
		) | less
		exit 1
	fi
}

create_authsmtp()
{
	if [ -f $testdir/bin/authsmtp ] ; then
		return 0
	fi
	(
	echo "#!/bin/sh"
	echo "if [ \$# -lt 1 ] ; then"
	echo "	exit 2"
	echo "fi"
	echo "var=\`tr [\"\\0\"] [\"\\n\"] 0<&3\`"
	echo "user=\`echo \$var | cut -d ' ' -f1\`"
	echo "pass=\`echo \$var | cut -d ' ' -f2\`"
	echo "exec 4>$testdir/tmp/authsmtp.\$\$ 3<$testdir/tmp/authsmtp.\$\$"
	echo "/bin/rm -f $testdir/tmp/authsmtp.\$\$"
	echo "echo \$var | tr [\" \"] [\"\\0\"] 1>&4"
	echo "if [ \"\$user\" = \"$user@$HOSTNAME\" -a \"\$pass\" = \"abcd12345678\" ] ; then"
	echo "	exit 0"
	echo "fi"
	echo "exec \$*"
	) > $testdir/bin/authsmtp
	chmod +x $testdir/bin/authsmtp
}

start_tcpserver_smtp()
{
	echo
	echo "Starting SMTP on port $smtp_port using tcpserver"
	(
	sudo env - \
		USE_QPWGR=1 \
		BIGTODO=0 \
		STARTTLS=1 \
		CONFSPLIT=23 \
		QUEUEDIR=$testdir/queue \
		CONTROLDIR=$cntrldir \
		CERTDIR=$certdir \
		ENABLE_CRAM=1 \
		DEBUG=1 \
		DEBUG_LOGIN=1 \
		QMAILQUEUE="$sbindir/qmail-dkim $sbindir/qmail-spamfilter" \
		SPAMFILTER="/usr/bin/bogofilter -p -d /etc/indimail" \
		SPAMEXITCODE=0 \
		REJECTSPAM=0 \
		MAKE_SEEKABLE=1 \
		DKIMVERIFY="" \
		$tcpserver -u qmaild -g qmail -HR 0 $smtp_port $qmail_smtpd $HOSTNAME \
			$testdir/bin/authsmtp /sbin/sys-checkpwd /bin/false
	) > $logdir/smtpd/smtpd.log 2>&1 &

	count=0
	while true
	do
		smtp_pid=$(/bin/ps -ef|grep -v sudo|grep $smtp_port|grep qmail-smtpd|awk '{print $2}')
		if [ -n "$smtp_pid" ] ; then
			break
		fi
		sleep 1
	done
	sudo kill -0 $smtp_pid
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing SMTP on port $smtp_port using tcpserver succeeded"
	else
		sudo kill $send_pid $smtp_pid
		(
		echo "  testing SMTP on port $smtp_port using tcpserver failed"
		echo "$logdir/smtpd/smtpd.log"
		cat $logdir/smtpd/smtpd.log
		) |less
		exit 1
	fi
}

start_tcpserver_smtp_unix()
{
	echo
	echo "Starting SMTP on socket $smtp_socket using tcpserver"
	(
	env - \
		USE_QPWGR=1 \
		STARTTLS=1 \
		BIGTODO=0 \
		CONFSPLIT=23 \
		QUEUEDIR=$testdir/queue \
		CONTROLDIR=$cntrldir \
		CERTDIR=$certdir \
		ENABLE_CRAM=1 \
		DEBUG=1 \
		DEBUG_LOGIN=1 \
		QMAILQUEUE="$sbindir/qmail-dkim $sbindir/qmail-spamfilter" \
		SPAMFILTER="/usr/bin/bogofilter -p -d /etc/indimail" \
		SPAMEXITCODE=0 \
		REJECTSPAM=0 \
		MAKE_SEEKABLE=1 \
		DKIMVERIFY="" \
		$tcpserver $smtp_socket $qmail_smtpd $HOSTNAME \
			$testdir/bin/authsmtp /sbin/sys-checkpwd /bin/false
	) > $logdir/smtpd/smtpd.log 2>&1 &

	smtp_pid=$(/bin/ps -ef|grep $smtp_socket|grep qmail-smtpd|awk '{print $2}')
	kill -0 $smtp_pid
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing SMTP on socket $smtp_socket using tcpserver succeeded"
	else
		sudo kill $send_pid $smtp_pid
		(
		echo "  testing SMTP on socket $smtp_socket using tcpserver failed"
		echo "$logdir/smtpd/smtpd.log"
		cat $logdir/smtpd/smtpd.log
		) |less
		exit 1
	fi
}

test_smtp_tls()
{
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port -tls
	check_mail
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing mail using SMTP with STARTTLS succeeded"
	else
		(
		echo "  testing mail using SMTP with STARTTLS failed"
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		) |less
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
}

test_smtp_notls()
{
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port
	check_mail
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing mail using SMTP without STARTTLS succeeded"
	else
		sudo kill $send_pid $smtp_pid
		(
		echo "  testing mail using SMTP without STARTTLS failed"
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		echo "qmail-send.log"
		cat $logdir/qmail-send/qmail-send.log
		) |less
		exit 1
	fi
}

test_smtp_dkimverify()
{
	(
	echo "To: $user@$HOSTNAME"
	echo "From: $user@$real_domain"
	echo "Subject: Testing DKIM"
	echo "Date: $(date -R)"
	echo
	echo "This is an email to test DKIM"
	) > $testdir/mail1.txt
	(
	cat $testdir/mail1.txt|dkim -z 2 -s $dkim_key
	cat $testdir/mail1.txt && rm -f $testdir/mail1.txt
	) >$testdir/tmp/mail2.txt
	swaks --data - -n -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port < $testdir/tmp/mail2.txt
	check_mail_header "DKIM-Status: good"
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing mail using SMTP for DKIM verification succeeded"
		/bin/rm -f $testdir/tmp/mail1.txt $testdir/tmp/mail2.txt
	else
		(
		echo "  testing mail using SMTP for DKIM verification failed"
		echo "mail.txt"
		cat $testdir/tmp/mail2.txt
		echo "----------------------------------------"
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		) | less
		sudo kill $send_pid $smtp_pid
		/bin/rm -f $testdir/tmp/mail1.txt $testdir/tmp/mail2.txt
		exit 1
	fi
}

test_smtp_bogofilter()
{
	(
	echo "To: $user@$HOSTNAME"
	echo "From: $user@$HOSTNAME"
	echo "Subject: Testing DKIM"
	echo "Date: $(date -R)"
	echo
	echo "This is an email to test DKIM"
	) | swaks --data - -n -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port
	check_mail_header "X-Bogosity"
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing mail using SMTP for spamfilter succeeded"
	else
		sudo kill $send_pid $smtp_pid
		(
		echo "  testing mail using SMTP for spamfilter failed"
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		) | less
		exit 1
	fi
}

test_smtps()
{
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port --tls-on-connect
	check_mail
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  $1 succeeded"
	else
		sudo kill $send_pid $smtp_pid
		(
		echo "  $1 failed"
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		) | less
		exit 1
	fi
}

test_smtp_auth_login()
{
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port --a LOGIN -au $user@$HOSTNAME -ap "abcd12345678"
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "AUTH LOGIN:")
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing mail using SMTP with LOGIN authentication succeeded"
		else
			sudo kill $send_pid $smtp_pid
			(
			echo "  testing mail using SMTP with LOGIN authentication failed"
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
			) | less
			exit 1
		fi
	else
		sudo kill $send_pid $smtp_pid
		(
		echo "  testing mail using SMTP with LOGIN authentication failed"
		echo "$logdir/smtpd/smtpd.log"
		cat $logdir/smtpd/smtpd.log
		) | less
		exit 1
	fi
}

test_smtp_auth_plain()
{
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port --a PLAIN -au $user@$HOSTNAME -ap "abcd12345678"
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "AUTH PLAIN:")
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing mail using SMTP with PLAIN authentication succeeded"
		else
			sudo kill $send_pid $smtp_pid
			(
			echo "  testing mail using SMTP with PLAIN authentication failed"
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
			) | less
			exit 1
		fi
	else
		sudo kill $send_pid $smtp_pid
		(
		echo "  testing mail using SMTP with PLAIN authentication failed"
		echo "$logdir/smtpd/smtpd.log"
		cat $logdir/smtpd/smtpd.log
		) | less
		exit 1
	fi
}

test_smtp_auth_cram_md5()
{
	pass=$(sudo grep $user /etc/shadow|cut -d: -f2)
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port --a CRAM-MD5 -au "$user" -ap "$pass"
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "AUTH CRAM-MD5:")
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing mail using SMTP with CRAM-MD5 authentication succeeded"
		else
			sudo kill $send_pid $smtp_pid
			(
			echo "  testing mail using SMTP with CRAM-MD5 authentication failed"
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
			) | less
			exit 1
		fi
	else
		sudo kill $send_pid $smtp_pid
		(
		echo "  testing mail using SMTP with CRAM-MD5 authentication failed"
		echo "$logdir/smtpd/smtpd.log"
		cat $logdir/smtpd/smtpd.log
		) | less
		exit 1
	fi
}

test_qmail_remote_auth()
{
	case $1 in
		"CRAM-MD5")
		u=$user
		pass=$(sudo grep $user /etc/shadow|cut -d: -f2)
		;;
		*)
		u=$user@$HOSTNAME
		pass="abcd12345678"
		;;
	esac
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $user@$HOSTNAME"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) | env - \
		SMTPROUTE="$HOSTNAME:127.0.0.1:$smtp_port $u $pass" \
		AUTH_SMTP="$1" \
		CONTROLDIR="$cntrldir" \
		$qmail_remote $HOSTNAME $user@$HOSTNAME "" 10 $user@$HOSTNAME >$testdir/qremote.$$
	cat $testdir/qremote.$$ >> $logdir/qmail-remote/qmail-remote.log
	addr=$(batv -k $(cat $cntrldir/batvkey) -v $(sed -n 1p $testdir/qremote.$$|awk '{print $2}'|sed 's/^.\(.*\).$/\1/') 2>/dev/null)
	batv_status=$?
	/bin/rm -f $testdir/qremote.$$
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "AUTH $1:")
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing qmail-remote AUTH $1, qmail-remote send+receive succeeded"
		else
			sudo kill $send_pid $smtp_pid
			(
			echo "  testing qmail-remote AUTH $1, qmail-remote send+receive failed"
			if [ $log_type -eq 1 ] ; then
				echo "$logdir/smtpd/smtpd.log"
				cat $logdir/smtpd/smtpd.log
			elif [ -f $logdir/smtpd/current ] ; then
				echo "$logdir/smtpd/current"
				cat $logdir/smtpd/current
			fi
			echo "qmail-remote.log"
			cat $testdir/qremote.$$
			) | less
			exit 1
		fi
	else
		sudo kill $send_pid $smtp_pid
		(
		echo "  testing qmail-remote AUTH $1, qmail-remote send+receive failed"
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		echo "qmail-remote.log"
		cat $testdir/qremote.$$
		) | less
		exit 1
	fi
	if [ " $1" = " CRAM-MD5" ] ; then
		if [ $batv_status -eq 0 -a "$addr" = "$user@$HOSTNAME" ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing BATV signing+verification succeeded"
		else
			sudo kill $send_pid $smtp_pid
			(
			echo "  testing BATV signing+verification failed"
			if [ $log_type -eq 1 ] ; then
				echo "$logdir/smtpd/smtpd.log"
				cat $logdir/smtpd/smtpd.log
			elif [ -f $logdir/smtpd/current ] ; then
				echo "$logdir/smtpd/current"
				cat $logdir/smtpd/current
			fi
			echo "qmail-remote.log"
			$testdir/qremote.$$
			) | less
			exit 1
		fi
	fi
}

test_qmail_remote_routing()
{
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $user@$HOSTNAME"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) > $testdir/mail.txt
	
	/bin/rm -f $cntrldir/batvkey
	env - \
		SMTPROUTE="$HOSTNAME:127.0.0.1:$smtp_port" \
		CONTROLDIR=$cntrldir \
		$qmail_remote $HOSTNAME $user@$HOSTNAME "" 10 $user@$HOSTNAME 1>$testdir/qremote.$$ <$testdir/mail.txt
	cat $testdir/qremote.$$ >> $logdir/qmail-remote/qmail-remote.log
	/bin/rm -f $testdir/qremote.$$
	check_mail
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing qmail-remote SMTPROUTE env qmail-remote send+receive succeeded"
	else
		sudo kill $send_pid $smtp_pid
		(
		echo "  testing qmail-remote SMTPROUTE env qmail-remote send+receive failed"
		echo "qmail-remote.log"
		$testdir/qremote.$$
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		) | less
		exit 1
	fi

	echo "$HOSTNAME:127.0.0.1:$smtp_port" > $cntrldir/smtproutes
	env - \
		CONTROLDIR=$cntrldir \
		$qmail_remote $HOSTNAME $user@$HOSTNAME "" 10 $user@$HOSTNAME 1>$testdir/qremote.$$ <$testdir/mail.txt
	cat $testdir/qremote.$$ >> $logdir/qmail-remote/qmail-remote.log
	/bin/rm -f $testdir/qremote.$$ $testdir/mail.txt
	check_mail
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing qmail-remote smtproutes control file qmail-remote send+receive succeeded"
	else
		sudo kill $send_pid $smtp_pid
		(
		echo "  testing qmail-remote smtproutes control file qmail-remote send+receive failed"
		echo "qmail-remote.log"
		$testdir/qremote.$$
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		) | less
		exit 1
	fi
}

test_qmail_remote_auth_cdb()
{
	echo "$HOSTNAME:127.0.0.1:$smtp_port /s" > $cntrldir/smtproutes
	(
	echo "=$user@$HOSTNAME:$user@$HOSTNAME abcd12345678 AUTH_SMTP=plain:"
	echo "."
	) > $cntrldir/remote_auth
	env CONTROLDIR=$cntrldir cdb-database remote_auth
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing cdb-database for qmail-remote authentication succeeded"
	else
		echo "  testing cdb-database for qmail-remote authentication failed"
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $user@$HOSTNAME"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) > $testdir/mail.txt

	env - \
		SMTPROUTE="$HOSTNAME:127.0.0.1:$smtp_port /s" \
		AUTH_SMTP="" \
		CONTROLDIR=$cntrldir \
		$qmail_remote $HOSTNAME $user@$HOSTNAME "" 10 $user@$HOSTNAME 1>$testdir/qremote.$$ <$testdir/mail.txt
	cat $testdir/qremote.$$ >> $logdir/qmail-remote/qmail-remote.log
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "AUTH PLAIN:")
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing qmail-remote using remote_auth.cdb qmail-remote send+receive succeeded"
		else
			(
			echo "  testing qmail-remote using remote_auth.cdb qmail-remote send+receive failed"
			echo "qmail-remote.log"
			cat $testdir/qremote.$$
			) | less
			sudo kill $send_pid $smtp_pid
			exit 1
		fi
	else
		(
		echo "  testing qmail-remote using remote_auth.cdb qmail-remote send+receive failed"
		echo "qmail-remote.log"
		cat $testdir/qremote.$$
		) | less
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
	/bin/rm -f $testdir/qremote.$$ $testdir/mail.txt
}

test_qmail_remote_starttls()
{
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $user@$HOSTNAME"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) | env - \
		SMTPROUTE="$HOSTNAME:127.0.0.1:$smtp_port" \
		CONTROLDIR="$cntrldir" \
		$qmail_remote $HOSTNAME $user@$HOSTNAME "" 10 $user@$HOSTNAME >$testdir/qremote.$$
	cat $testdir/qremote.$$ >> $logdir/qmail-remote/qmail-remote.log
	/bin/rm -f $testdir/qremote.$$
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "TLS=TLSv.*")
		if [ $? -eq 0 ] ; then
			last_line=$(echo $last_line|awk '{print $17}')
			tcount=$(expr $tcount + 1)
			echo "  testing qmail-remote STARTTLS $last_line, qmail-remote send+receive succeeded"
		else
			sudo kill $send_pid $smtp_pid
			(
			echo "  testing qmail-remote STARTTLS, qmail-remote send+receive failed"
			if [ $log_type -eq 1 ] ; then
				echo "$logdir/smtpd/smtpd.log"
				cat $logdir/smtpd/smtpd.log
			elif [ -f $logdir/smtpd/current ] ; then
				echo "$logdir/smtpd/current"
				cat $logdir/smtpd/current
			fi
			echo "qmail-remote.log"
			cat $testdir/qremote.$$
			) | less
			exit 1
		fi
	else
		sudo kill $send_pid $smtp_pid
		(
		echo "  testing qmail-remote STARTTLS, qmail-remote send+receive failed"
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		echo "qmail-remote.log"
		cat $testdir/qremote.$$
		) | less
		exit 1
	fi
}

test_qmail_remote_smtps()
{
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $user@$HOSTNAME"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) | env - \
		SMTPROUTE="$HOSTNAME:127.0.0.1:$smtp_port" \
		SMTPS=1 \
		CONTROLDIR="$cntrldir" \
		$qmail_remote $HOSTNAME $user@$HOSTNAME "" 10 $user@$HOSTNAME >$testdir/qremote.$$
	cat $testdir/qremote.$$ >> $logdir/qmail-remote/qmail-remote.log
	/bin/rm -f $testdir/qremote.$$
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "TLS=TLSv.*")
		if [ $? -eq 0 ] ; then
			last_line=$(echo $last_line|awk '{print $17}')
			tcount=$(expr $tcount + 1)
			echo "  testing qmail-remote SMTPS $last_line, qmail-remote send+receive succeeded"
		else
			sudo kill $send_pid $smtp_pid
			(
			echo "  testing qmail-remote SMTPS, qmail-remote send+receive failed"
			if [ $log_type -eq 1 ] ; then
				echo "$logdir/smtpd/smtpd.log"
				cat $logdir/smtpd/smtpd.log
			elif [ -f $logdir/smtpd/current ] ; then
				echo "$logdir/smtpd/current"
				cat $logdir/smtpd/current
			fi
			echo "qmail-remote.log"
			cat $testdir/qremote.$$
			) | less
			exit 1
		fi
	else
		sudo kill $send_pid $smtp_pid
		(
		echo "  testing qmail-remote SMTPS, qmail-remote send+receive failed"
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		echo "qmail-remote.log"
		cat $testdir/qremote.$$
		) | less
		exit 1
	fi
}

terminate_smtp()
{
	if [ -n "$1" ] ; then
		sudo kill $*
		sleep $sleep_int
	fi
}

terminate_send()
{
	if [ -n "$1" ] ; then
		sudo kill $*
		sleep $sleep_int
	fi
}

start_tcpserver_smtps()
{
	if [ $# -eq 0 ] ; then
		tls_ver=TLSv1_3
	elif [ -n "$1" ] ; then
		tls_ver=$1
	else
		tls_ver=""
	fi
	if [ "$tls_ver" = "TLSv1_3"  ] ; then
		echo TLSv1_2:TLSv1_3         > $cntrldir/tlsclientmethod
		echo TLSv1_2:TLSv1_3         > $cntrldir/tlsservermethod
	elif [ "$tls_ver" = "TLSv1_2"  ] ; then
		echo TLSv1_2                 > $cntrldir/tlsclientmethod
		echo TLSv1_2                 > $cntrldir/tlsservermethod
	else
		/bin/rm -f                     $cntrldir/tlsclientmethod
		/bin/rm -f                     $cntrldir/tlsservermethod
	fi
	echo
	if [ -n "$tls_ver" ] ; then
		echo "Starting SMTPS on port $smtp_port TLS=$tls_ver using tcpserver"
	else
		echo "Starting SMTPS on port $smtp_port TLS=auto    using tcpserver"
	fi
	(
	sudo env - \
		USE_QPWGR=1 \
		SMTPS=1 \
		BIGTODO=0 \
		CONFSPLIT=23 \
		QUEUEDIR=$testdir/queue \
		CONTROLDIR=$cntrldir \
		CERTDIR=$certdir \
		$tcpserver -u qmaild -g qmail -HR 0 $smtp_port $qmail_smtpd
	) > $logdir/smtpd/smtpd.log 2>&1 &

	count=0
	while true
	do
		smtp_pid=$(/bin/ps -ef|grep -v sudo|grep $smtp_port|grep qmail-smtpd|awk '{print $2}')
		if [ -n "$smtp_pid" ] ; then
			break
		fi
		sleep 1
	done
	sudo kill -0 $smtp_pid
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing SMTPS on port $smtp_port using tcpserver succeeded"
	else
		sudo kill $send_pid $smtp_pid
		(
		echo "  testing SMTPS on port $smtp_port using tcpserver failed"
		echo "$logdir/smtpd/smtpd.log"
		cat $logdir/smtpd/smtpd.log
		) | less
		exit 1
	fi
}

start_tcpserver_smtps_unix()
{
	echo
	echo "Starting SMTPS on socket $smtp_socket using tcpserver"
	(
	env - \
		USE_QPWGR=1 \
		SMTPS=1 \
		BIGTODO=0 \
		CONFSPLIT=23 \
		QUEUEDIR=$testdir/queue \
		CONTROLDIR=$cntrldir \
		CERTDIR=$certdir \
		$tcpserver $smtp_socket $qmail_smtpd
	) > $logdir/smtpd/smtpd.log 2>&1 &

	smtp_pid=$(/bin/ps -ef|grep $smtp_socket|grep qmail-smtpd|awk '{print $2}')
	kill -0 $smtp_pid
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing SMTPS on socket $smtp_socket using tcpserver succeeded"
	else
		sudo kill $send_pid $smtp_pid
		(
		echo "  testing SMTPS on socket $smtp_socket using tcpserver failed"
		echo "$logdir/smtpd/smtpd.log"
		cat $logdir/smtpd/smtpd.log
		) | less
		exit 1
	fi
}

setup_svscan_without_svscanlog()
{
	echo
	echo "Starting svscan services without svscanlog"
	sudo /bin/rm -rf $servicedir
	sudo /bin/rm -rf $logdir/smtpd
	sudo /bin/rm -rf $logdir/qmail-send

	mkdir -p $servicedir/smtpd/variables
	mkdir -p $servicedir/smtpd/log
	echo 1              > $servicedir/smtpd/variables/USE_QPWGR
	echo 1              > $servicedir/smtpd/variables/SMTPS
	echo 0              > $servicedir/smtpd/variables/BIGTODO
	echo 23             > $servicedir/smtpd/variables/CONFSPLIT
	echo $cntrldir      > $servicedir/smtpd/variables/CONTROLDIR
	echo $testdir/queue > $servicedir/smtpd/variables/QUEUEDIR
	echo $certdir       > $servicedir/smtpd/variables/CERTDIR
	printf "#!/bin/sh\nexec envdir ./variables $tcpserver -u qmaild -g qmail -v -HR 0 $smtp_port $qmail_smtpd 2>&1\n" > $servicedir/smtpd/run
	printf "#!/bin/sh\nexec /usr/sbin/multilog t $logdir/smtpd\n" > $servicedir/smtpd/log/run
	chmod +x $servicedir/smtpd/run
	chmod +x $servicedir/smtpd/log/run

	mkdir -p $servicedir/qmail-send/variables
	mkdir -p $servicedir/qmail-send/log
	echo /bin:/usr/sbin    > $servicedir/qmail-send/variables/PATH
	echo 0                 > $servicedir/qmail-send/variables/BIGTODO
	echo 1                 > $servicedir/qmail-send/variables/QPWGR
	echo 23                > $servicedir/qmail-send/variables/CONFSPLIT
	echo $cntrldir         > $servicedir/qmail-send/variables/CONTROLDIR
	echo $testdir/queue    > $servicedir/qmail-send/variables/QUEUEDIR
	echo $sysconfdir/users > $servicedir/qmail-send/variables/ASSIGNDIR
	echo $certdir          > $servicedir/qmail-send/variables/CERTDIR
	printf "#!/bin/sh\nexec envdir ./variables $qmail_start -s ./Maildir/ 2>&1\n" > $servicedir/qmail-send/run
	printf "#!/bin/sh\nexec /usr/sbin/multilog t $logdir/qmail-send\n" > $servicedir/qmail-send/log/run
	chmod +x $servicedir/qmail-send/run
	chmod +x $servicedir/qmail-send/log/run
}

start_svscan_without_svscanlog()
{
	(
	sudo env - \
		DISABLE_RUN=1 \
		SILENT=1 \
		PATH=/bin:/usr/sbin \
		/usr/sbin/svscan $servicedir
	) > $logdir/svscan/svscan.log 2>&1 &
	sleep 1
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	sudo kill -0 $svpid
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing svscan (without svscanlog) startup succeeded"
	else
		shutdown_svscan $svpid
		(
		echo "  testing svscan (without svscanlog) startup failed"
		echo "svscan.log"
		cat $logdir/svscan/svscan.log
		) | less
		exit 1
	fi
	for i in smtpd smtpd/log qmail-send qmail-send/log
	do
		sudo svok $servicedir/smtpd
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing service $i startup succeeded"
		else
			shutdown_svscan $svpid
			(
			echo "  testing service $i startup failed"
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
			echo "qmail-send.log"
			cat $logdir/qmail-send/current
			) | less
			exit 1
		fi
	done
}

test_stop_smtps()
{
	sudo svc -d $servicedir/smtpd
	sleep $sleep_int
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port --tls-on-connect 2>/dev/null
	if [ $? -eq 2 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing stopping of service using svc succeeded"
	else
		shutdown_svscan $svpid
		(
		echo "  testing stopping of service using svc failed"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		) | less
		exit 1
	fi
}

test_stop_supervise()
{
	sudo svc -dx $servicedir/smtpd
	sleep $sleep_int
	sudo svok $servicedir/smtpd
	if [ $? -eq 100 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing stopping of supervise using svc succeeded"
	else
		shutdown_svscan $svpid
		(
		echo "  testing stopping of supervise using svc failed"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		) | less
		exit 1
	fi
}

test_restart_service_using_hup()
{
	sudo kill -1 $svpid
	sleep $sleep_int
	sudo svok $servicedir/smtpd
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing restarting of supervise by sending hup to svscan succeeded"
	else
		shutdown_svscan $svpid
		(
		echo "  testing restarting of supervise by sending hup to svscan failed"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		) | less
		exit 1
	fi
}

test_restart_service_using_svc()
{
	tcpserver_pid1=$(sudo svstat $servicedir/smtpd|awk '{print $6}')
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int
	tcpserver_pid2=$(sudo svstat $servicedir/smtpd|awk '{print $6}')
	
	if [ $tcpserver_pid2 -ne $tcpserver_pid1 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing restarting of supervise using svc succeeded"
	else
		shutdown_svscan $svpid
		(
		echo "  testing restarting of supervise using svc failed"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		) | less
		exit 1
	fi
}

test_multilog()
{
	grep "HELO <$HOSTNAME> MAIL from <mbhangui@$HOSTNAME> RCPT <mbhangui@$HOSTNAME> AUTH <local-rcpt> Size: .* TLS=TLSv1.3" $logdir/smtpd/current >/dev/null
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing logging using multilog succeeded"
	else
		shutdown_svscan $svpid
		(
		echo "  testing logging using multilog failed"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		) | less
		exit 1
	fi
}

test_blocked()
{
	if [ $# -eq 0 ] ; then
		swaks -S --to blocked@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port --tls-on-connect >/dev/null
	else
		swaks -S --to $user@$HOSTNAME  --from blocked@$HOSTNAME -server localhost --port $smtp_port --tls-on-connect >/dev/null
	fi
	if [ $? -eq 0 ] ; then
		shutdown_svscan $svpid
		(
		if [ $# -eq 0 ] ; then
			echo "  testing badrcptto failed"
		else
			echo "  testing badmailfrom failed"
		fi
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		) | less
		exit 1
	else
		if [ $# -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing badrcptto succeeded"
		else
			tcount=$(expr $tcount + 1)
			echo "  testing badmailfrom succeeded"
		fi
	fi
}

setup_svscan_with_svscanlog()
{
	echo
	echo "Starting svscan services with svscanlog"
	sudo /bin/rm -rf $logdir/svscan
	mkdir -p $logdir/svscan
	sudo /bin/rm -f $testdir/svscan.out
	mkdir -p $servicedir/.svscan/log
	mkdir -p $servicedir/.svscan/variables
	printf "#!/bin/sh\nexec echo hello world > $testdir/svscan.out\n" > $servicedir/.svscan/run
	printf "#!/bin/sh\nexec echo goodbye world > $testdir/svscan.out\n" > $servicedir/.svscan/shutdown
	printf "#!/bin/sh\nexec /usr/sbin/multilog t $logdir/svscan\n" > $servicedir/.svscan/log/run
	chmod +x $servicedir/.svscan/run
	chmod +x $servicedir/.svscan/shutdown
	chmod +x $servicedir/.svscan/log/run
	echo 1 > $servicedir/.svscan/variables/DISABLE_RUN
	echo 1 > $servicedir/.svscan/variables/SCANLOG
	echo 1 > $servicedir/.svscan/variables/SILENT
	echo   > $servicedir/.svscan/variables/INITCMD
	echo "/bin:/usr/sbin" > $servicedir/.svscan/variables/PATH
	#SMTPS
}

start_svscan_with_svscanlog()
{
	(
	cd $servicedir/.svscan
	exec sudo envdir -c variables /usr/sbin/svscan $servicedir
	) &
	sleep $sleep_int
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	sudo kill -0 $svpid
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing svscan (with svscanlog) startup succeeded"
	else
		shutdown_svscan $svpid
		(
		echo "  testing svscan (with svscanlog) startup failed"
		echo "svscan.log"
		cat $logdir/svscan/current
		) | less
		exit 1
	fi
}

test_svscan_log()
{
	grep "@.* svscan: info: pid: .*: starting..." $logdir/svscan/current >/dev/null
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing svscan log succeeded"
	else
		shutdown_svscan $svpid
		(
		echo "  testing svscan log failed"
		echo "svscan.log"
		cat $logdir/svscan/current
		) | less
		exit 1
	fi
}

test_svscan_run()
{
	if [ "$(cat $testdir/svscan.out 2>/dev/null)" = "hello world" ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing svscan run script execution succeeded"
	else
		shutdown_svscan $svpid
		(
		echo "  testing svscan run script execution failed"
		echo "svscan.log"
		cat $logdir/svscan/current
		) | less
		exit 1
	fi
}

test_svscan_shutdown()
{
	shutdown_svscan $svpid
	if [ "$(cat $testdir/svscan.out 2>/dev/null)" = "goodbye world" ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing svscan shutdown script execution succeeded"
	else
		shutdown_svscan $svpid
		(
		echo "  testing svscan shutdown script execution failed"
		echo "svscan.log"
		cat $logdir/svscan/current
		) | less
		exit 1
	fi
}

start_new_service()
{
	sudo /bin/rm -rf $servicedir/sleep
	/bin/rm -f $testdir/sleep.out
	mkdir -p $servicedir/sleep/log
	printf "#!/bin/sh\nexec sleep 2243\n" > $servicedir/sleep/run
	printf "#!/bin/sh\nexec /usr/sbin/multilog t $logdir/sleep\n" > $servicedir/sleep/log/run
	printf "#!/bin/sh\nexec echo shutdown sleep service > $testdir/sleep.out\n" > $servicedir/sleep/shutdown
	chmod +x $servicedir/sleep/run
	chmod +x $servicedir/sleep/log/run
	chmod +x $servicedir/sleep/shutdown
	if [ $# -eq 0 ] ; then
		sudo kill -1 $svpid
		sleep 5
	else
		sleep 6
	fi
	sudo svok $servicedir/sleep
	if [ $? -eq 0 ] ; then
		if [ $# -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing starting of supervise for new service by sending hup to svscan succeeded"
		else
			tcount=$(expr $tcount + 1)
			echo "  testing starting of supervise for new service using svscan autoscan succeeded"
		fi
	else
		shutdown_svscan $svpid
		(
		if [ $# -eq 0 ] ; then
			echo "  testing starting of supervise for new service by sending hup to svscan failed"
		else
			echo "  testing starting of supervise for new service using svscan autoscan failed"
		fi
		echo "svscan.log"
		cat $logdir/svscan/current
		) | less
		exit 1
	fi
	ps -ef |grep "sleep 2243"|grep -v grep > /dev/null
	if [ $? -eq 0 ] ; then
		if [ $# -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing starting of new service by sending hup to svscan succeeded"
		else
			tcount=$(expr $tcount + 1)
			echo "  testing starting of new service using svscan autoscan succeeded"
		fi
	else
		shutdown_svscan $svpid
		(
		if [ $# -eq 0 ] ; then
			echo "  testing starting of new service by sending hup to svscan failed"
		else
			echo "  testing starting of new service using svscan autoscan failed"
		fi
		echo "svscan.log"
		cat $logdir/svscan/current
		) | less
		exit 1
	fi
	sudo svc -d $servicedir/sleep
	sleep $sleep_int
	ps -ef |grep "sleep 2243"|grep -v grep > /dev/null
	if [ $? -eq 0 ] ; then
		shutdown_svscan $svpid
		(
		echo "  testing stopping of new service failed"
		echo "svscan.log"
		cat $logdir/svscan/current
		) | less
		exit 1
	else
		tcount=$(expr $tcount + 1)
		echo "  testing stopping of new service succeeded"
	fi
	if [ "$(cat $testdir/sleep.out 2>/dev/null)" = "shutdown sleep service" ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing shutdown script of new service succeeded"
	else
		shutdown_svscan $svpid
		(
		echo "  testing shutdown script of new service failed"
		echo "svscan.log"
		cat $logdir/svscan/current
		) | less
		exit 1
	fi
}

remove_new_service()
{
	mv $servicedir/sleep $servicedir/.sleep
	sudo svc -dx $servicedir/.sleep $servicedir/.sleep/log
	sleep $sleep_int
	ps -ef |grep -E "sleep 2243|sleep 2244"|grep -v grep > /dev/null
	if [ $? -eq 0 ] ; then
		shutdown_svscan $svpid
		(
		echo "  testing removal of new service failed"
		echo "svscan.log"
		cat $logdir/svscan/current
		) | less
		exit 1
	else
		sudo /bin/rm -rf $servicedir/.sleep
		tcount=$(expr $tcount + 1)
		echo "  testing removal of new service succeeded"
	fi
}

test_supervise_subreaper()
{
	printf "#!/bin/sh\nsleep 2244 &\n" > $servicedir/sleep/run
	chmod +t $servicedir/sleep/run
	sudo svc -u $servicedir/sleep
	sleep $sleep_int
	ps ajx |grep "sleep 2244"|grep -v grep > /dev/null
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing starting of new service in supbreaper mode succeeded"
	else
		shutdown_svscan $svpid
		(
		echo "  testing starting of new service in supbreaper mode failed"
		echo "svscan.log"
		cat $logdir/svscan/current
		) | less
		exit 1
	fi
	pgid=$(ps ajx|grep "sleep 2244"|grep -v grep|awk '{print $3}')
	if [ $pgid -ne $$ ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing setting of PGID ($pgid != $$) in subreaper mode succeeded"
	else
		echo "  testing setting of PGID ($pgid = $$) in subreaper mode failed"
	fi
	sudo svc -d $servicedir/sleep
	sleep $sleep_int
	ps -ef |grep "sleep 2244"|grep -v grep > /dev/null
	if [ $? -eq 0 ] ; then
		shutdown_svscan $svpid
		(
		echo "  testing stopping of new service in subreaper mode failed"
		echo "svscan.log"
		cat $logdir/svscan/current
		) | less
		exit 1
	else
		tcount=$(expr $tcount + 1)
		echo "  testing stopping of new service in subreaper mode succeeded"
	fi
}

test_recipients()
{
	/bin/rm -f $servicedir/smtpd/variables/SMTPS
	(
	echo "apollo.indimail.org"
	echo "mediacenter.indimail.org"
	echo "nocheck.com"
	) >> $cntrldir/rcpthosts
	echo           3 > $servicedir/smtpd/variables/CHECKRECIPIENT
	echo $sysconfdir > $servicedir/smtpd/variables/SYSCONFDIR
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int

	(
	echo "!nocheck.com"
	echo "@$HOSTNAME:users/recipients.cdb"
	echo "indimail.org:users/extra.cdb"
	echo "*:users/recipients.cdb"
	echo "users/legacy.cdb"
	) > $cntrldir/recipients

	(
	echo user1@$HOSTNAME
	echo user2@mediacenter.indimail.org
	) > $sysconfdir/users/recipients

	echo user1@apollo.indimail.org > $sysconfdir/users/extra
	echo user3@apollo.indimail.org > $sysconfdir/users/legacy
	env SYSCONFDIR=$sysconfdir qmail-cdb -r
	r1=$?
	env SYSCONFDIR=$sysconfdir qmail-cdb -r extra
	r2=$?
	env SYSCONFDIR=$sysconfdir qmail-cdb -r legacy
	r3=$?
	if [ $r1 -eq 0 -a $r2 -eq 0 -a $r3 -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing qmail-cdb succeeded"
	else
		echo "  testing qmail-cdb failed"
		shutdown_svscan $svpid
	fi

	(
	echo "#!/bin/sh"
	echo "exec 0<&6"
	echo "exec 1>&7"
	echo "read key"
	echo "greeting=\$(echo \$key | awk '{print \$1}')"
	echo "if [ \$greeting -ne 220 ] ; then"
	echo "	echo \"Greeting failed\" 1>&2"
	echo "	printf \"QUIT\r\n\""
	echo "fi"
	echo "printf \"EHLO\r\n\""
	echo "while true"
	echo "do"
	echo "	read line"
	echo "	echo \$line |grep \"250 \" >/dev/null"
	echo "	if [ \$? -eq 0 ] ; then"
	echo "		echo \$line 1>&2"
	echo "		break"
	echo "	fi"
	echo "	echo \$line 1>&2"
	echo "done"
	echo "printf \"MAIL FROM:<$user@$HOSTNAME>\r\n\" 1>&2"
	echo "printf \"MAIL FROM:<$user@$HOSTNAME>\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "code=\$(echo \$key |cut -c1-3)"
	echo "if [ \$code -ne 250 ] ; then"
	echo "	echo \"MAIL From failed: code=\$code\" 1>&2"
	echo "	exit 1"
	echo "fi"
	for i in user1@nocheck.com user1@$HOSTNAME user1@apollo.indimail.org user2@mediacenter.indimail.org user3@$HOSTNAME user3@apollo.indimail.org
	do
		echo "printf \"RCPT TO:<$i>\r\n\" 1>&2"
		echo "printf \"RCPT TO:<$i>\r\n\""
		echo "read key"
		echo "echo \$key 1>&2"
		echo "code=\$(echo \$key |cut -c1-3)"
		echo "if [ \$code -ne 250 ] ; then"
		if [ "$i" = "user3@$HOSTNAME" ] ; then
		echo "	if [ \"$i\" != \"user3@$HOSTNAME\" ] ; then"
		echo "		echo \"RCPT To failed: code=\$code\" 1>&2"
		echo "		exit 1"
		echo "	fi"
		else
		echo "	echo \"RCPT To failed: code=\$code\" 1>&2"
		echo "	exit 1"
		fi
		echo "fi"
	done
	echo "printf \"QUIT\r\n\" 1>&2"
	echo "printf \"QUIT\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "exit 0"
	) > $testdir/tcpclient.smtp
	chmod +x $testdir/tcpclient.smtp

	tcpclient -vDHR 0 $smtp_port $testdir/tcpclient.smtp > $logdir/tcpclient/tcpclient.log 2>&1
	status1=$?
	sed -i '72d;75d' $testdir/tcpclient.smtp
	echo "!*" >> $cntrldir/recipients
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int

	tcpclient -vDHR 0 $smtp_port $testdir/tcpclient.smtp >> $logdir/tcpclient/tcpclient.log 2>&1
	status2=$?
	if [ $status1 -eq 0 -a $status2 -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing recipient extension succeeded"
	else
		shutdown_svscan $svpid
		(
		echo "  testing recipient extension failed"
		echo "tcpclient.log"
		cat $logdir/tcpclient/tcpclient.log
		) | less
		exit 1
	fi
}

do_setup()
{
	echo "Starting Setup"
	# basic setup for maildir, assign config and queue
	sudo /bin/rm -rf $logdir
	mkdir -p $logdir/setup
	mkdir -p $logdir/qmail-remote
	mkdir -p $logdir/mail
	mkdir -p $logdir/tcpclient
	mkdir -p $logdir/qmail-send
	mkdir -p $logdir/svscan
	mkdir -p $logdir/smtpd
	(
	mkdir -p $testdir/tmp
	chmod 1777 $testdir/tmp
	mkdir -p $testdir/bin
	mkdir -p $testdir/run
	setup_maildir
	setup_assign
	setup_config
	setup_queue
	) > $logdir/setup/setup.log 2>&1
}

do_without_svscan()
{
	# use qmail-start to start qmail-send
	run_qmail_send
	send_pid=$(get_send_pid)
	test_qmail_inject $user $user $user

	# start smtp using tcpserver
	start_tcpserver_smtp
	create_authsmtp
	smtp_pid=$(/bin/ps -ef|grep $smtp_port|grep -v sudo|grep qmail-smtpd|awk '{print $2}')
	sleep $sleep_int
	test_qmail_remote_auth "PLAIN"
	test_qmail_remote_auth "LOGIN"
	test_qmail_remote_auth "CRAM-MD5"
	test_qmail_remote_routing
	test_qmail_remote_auth_cdb
	test_qmail_remote_starttls
	test_smtp_tls
	test_smtp_notls
	test_smtp_dkimverify
	test_smtp_bogofilter
	test_smtp_auth_login
	test_smtp_auth_plain
	test_smtp_auth_cram_md5
	test_tcpclient_script 1 # test smtp using tcpclient
	terminate_smtp $smtp_pid

	# start smtps using tcpserver
	for i in TLSv1_2 TLSv1_3
	do
		start_tcpserver_smtps $i
		if [ -n "$i" ] ; then
			test_smtps "testing mail doing SMTPS with swaks     qmail-smtpd-TLS=$i"
		else
			test_smtps "testing mail doing SMTPS with swaks     qmail-smtpd-TLS=auto"
		fi
		echo $i > $cntrldir/tlsclientmethod
		test_qmail_remote_smtps
		for j in TLSv1_2 TLSv1_3
		do
			test_tcpclient_script 2 $j # test smtps using tcpclient
		done
		terminate_smtp $smtp_pid
	done

	start_tcpserver_smtp_unix
	smtp_pid=$(/bin/ps -ef|grep $smtp_socket|grep qmail-smtpd|awk '{print $2}')
	test_tcpclient_script 3 # test smtp using tcpclient
	terminate_smtp $smtp_pid

	start_tcpserver_smtps_unix
	smtp_pid=$(/bin/ps -ef|grep $smtp_socket|grep qmail-smtpd|awk '{print $2}')
	test_tcpclient_script 4 # test smtps using tcpclient
	terminate_smtp $smtp_pid

	# terminate qmail-send
	terminate_send $send_pid
}

do_svscan_without_svscanlog()
{
	# start svscan without svscanlog
	setup_svscan_without_svscanlog
	start_svscan_without_svscanlog
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	test_smtps "testing mail using SMTPS by qmail-smtpd"
	test_recipients
	do_autoresponder
	do_qmail_qfilter
	test_stop_smtps
	test_stop_supervise
	test_restart_service_using_hup
	test_restart_service_using_svc
	test_multilog
	start_new_service
	remove_new_service
}

do_svscan_with_svscanlog()
{
	# start svscan with svscanlog
	setup_svscan_with_svscanlog
	printf "#!/bin/sh\nexec envdir ./variables $tcpserver -n $certdir/servercert.pem -u qmaild -g qmail -HR 0 $smtp_port $qmail_smtpd 2>&1\n" > $servicedir/smtpd/run
	/bin/rm -f $servicedir/smtpd/variables/SMTPS
	start_svscan_with_svscanlog
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	test_svscan_log
	test_svscan_run
	test_smtps "testing mail using SMTPS by tcpserver"
	test_svscan_shutdown

	# start svscan with svscanlog and AUTOSCAN
	echo 1 > $servicedir/.svscan/variables/AUTOSCAN
	echo 5 > $servicedir/.svscan/variables/SCANINTERVAL
	#echo 1 > $servicedir/smtpd/variables/SMTPS
	#printf "#!/bin/sh\nexec envdir ./variables $tcpserver -u qmaild -g qmail -HR 0 $smtp_port $qmail_smtpd 2>&1\n" > $servicedir/smtpd/run
	start_svscan_with_svscanlog
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	start_new_service 1
	test_supervise_subreaper
	remove_new_service
	test_blocked
	test_blocked 1
}

do_qmail_qfilter()
{
	echo $testdir/bin/qfrontend > $servicedir/smtpd/variables/QMAILQUEUE
	printf "#!/bin/sh\nexec envdir ./variables $tcpserver -u qmaild -g qmail -HR 0 $smtp_port $qmail_smtpd 2>&1\n" > $servicedir/smtpd/run
	(
	echo "#!/bin/sh"
	echo "exec qmail-qfilter $testdir/bin/filter1 -- $testdir/bin/filter2"
	) > $testdir/bin/qfrontend
	(
	echo "#!/bin/sh"
	echo "sed -e 's{abcd{$HOSTNAME{' -e 's{Subject: .*{Subject: Testing qmail-qfilter{'"
	echo "exit 0"
	) > $testdir/bin/filter1
	(
	echo "#!/bin/sh"
	echo "cat"
	echo "echo Recipients"
	echo "echo \$QMAILRCPTS"
	echo "echo \"Envelope Size \$ENVSIZE\""
	echo "echo \"Message Size \$MSGSIZE\""
	echo "echo Regards Manny"
	echo "exit 0"
	) > $testdir/bin/filter2

	sudo svc -r $servicedir/smtpd
	sleep $sleep_int
	chmod +x $testdir/bin/qfrontend $testdir/bin/filter1 $testdir/bin/filter2
	(
	echo "Sending mail from abcd"
	) | swaks -S --header "Subject: Test Mail" --to $user@$HOSTNAME --from $user@$HOSTNAME \
		--server localhost --port $smtp_port --body -
	count=0
	ret=1
	while true
	do
		mcount=$(ls $maildir/new | wc -l)
		if [ $mcount -gt 0 ] ; then
			mail_file=$(ls -lt $maildir/new|head -2|tail -1|awk '{print $9}')
			grep "Sending mail from $HOSTNAME" $maildir/new/$mail_file >/dev/null
			if [ $? -eq 0 ] ; then
				tcount=$(expr $tcount + 1)
				echo "  testing qmail-qfilter succeeded"
				return 0
			else
				echo "  testing qmail-qfilter failed"
				exit 1
			fi
		fi
		sleep 1
		count=$(expr "$count" + 1)
		echo count=$count
		if [ $count -gt 5 ] ; then
			echo "Failed to receive Mail" 1>&2
			break
		fi
	done
	return 1
}

do_autoresponder()
{
	if [ -d $testdir/.vacation.dir ] ; then
		/bin/rm -f $testdir/.vacation.dir/*
	else
		mkdir -p $testdir/.vacation.dir
	fi
	echo "I'm on leave" > $testdir/.vacation.msg
	(
	echo "|/usr/bin/autoresponder -q $testdir/.vacation.msg $testdir/.vacation.dir" 
	echo "$testdir/tuser/Maildir/"
	) > $testdir/tuser/.qmail
	subject="Testing Autoresponder"
	(
	echo "From: $user@$real_domain"
	echo "To: tuser@$real_domain"
	echo "Subject: $subject"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) | sudo $setuidgid -g qcerts $user env - \
		QUEUEDIR=$testdir/queue \
		QMAILQUEUE=$qmail_queue \
		CONTROLDIR=$cntrldir \
		BIGTODO=0 \
		CONFSPLIT=23 \
	$qmail_inject -f$user@$real_domain tuser
	reply_subject="Subject: Autoreply: Re: $subject"
	count=0
	ret=1
	subject=""
	while true
	do
		mcount=$(ls $maildir/new | wc -l)
		if [ $mcount -gt 0 ] ; then
			mail_file=$(ls -lt $maildir/new|head -2|tail -1|awk '{print $9}')
			subject=$(grep ^Subject: $maildir/new/$mail_file)
			/bin/rm -f $maildir/new/$mail_file
			break
		fi
		sleep 1
		count=$(expr "$count" + 1)
		if [ $count -gt 5 ] ; then
			echo "Failed to receive Mail" 1>&2
			break
		fi
	done
	if [ "$reply_subject" = "$subject" ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing autoresponder succeeded"
	else
		sudo kill $send_pid $smtp_pid
		(
		echo "  testing autoresponder failed"
		echo "Expected subject as $reply_subject but got $subject"
		echo "qmail-send.log"
		cat $logdir/qmail-send/qmail-send.log
		) |less
		exit 1
	fi
}

do_dkim_tests()
{
	echo "Starting DKIM Tests"
	mkdir -p $testdir
	if [ ! -d $domainkey_dir ] ; then
		mkdir -p $domainkey_dir
	fi
	/bin/rm -f $cntrldir/dkimkeys
	for i in example.com example.org
	do
		if [ ! -d $domainkey_dir/$i ] ; then
			sudo mkdir -p $domainkey_dir/$i
		fi
		if [ ! -f $domainkey_dir/$i/default ] ; then
			echo "Creating private key bits 4096 $domainkey_dir/$i/default"
			sudo $dknewkey -e -b 4096 $domainkey_dir/$i/default >$out
			sudo chmod 644 $domainkey_dir/$i/default
		fi
		if [ ! -f $domainkey_dir/$i/dkimkeys1 ] ; then
			echo "Creating private key bits 2048 $domainkey_dir/$i/dkimkeys1"
			sudo $dknewkey -e -b 2048 $domainkey_dir/$i/dkimkeys1 >$out
			sudo chmod 644 $domainkey_dir/$i/dkimkeys1
		fi
		if [ ! -f $domainkey_dir/$i/dkimkeys2 ] ; then
			echo "Creating private key $domainkey_dir/$i/dkimkeys2"
			sudo $dknewkey -e -t ed25519 $domainkey_dir/$i/dkimkeys2 >$out
			sudo chmod 644 $domainkey_dir/$i/dkimkeys2
		fi
	done

	for i in test default
	do
		if [ ! -f $domainkey_dir/$i ] ; then
			echo "Creating private key bits 4096 $domainkey_dir/$i"
			sudo $dknewkey -e -b 4096 $domainkey_dir/$i >$out
			sudo chmod 644 $domainkey_dir/$i
		fi
	done

	for i in example.com example.org
	do
		if [ ! -d $domainkey_dir/$i ] ; then
			sudo mkdir -p $domainkey_dir/$i
		fi
		if [ ! -f $domainkey_dir/$i/ed25519 ] ; then
			echo "Creating private key $domainkey_dir/$i/ed25519"
			sudo $dknewkey -e -t ed25519 $domainkey_dir/$i/ed25519 >$out
			sudo chmod 644 $domainkey_dir/$i/ed25519
		fi
	done
	mkdir -p $cntrldir

	# Test No 1
	failed=0
	echo "testing real domain $real_domain (rsa2048,rsa4096,ed25519) using dkim with selector from dns"
	for k in $real_domain_rsa2048 $real_domain_rsa4096 $real_domain_ed25519
	do
		case $k in
			$real_domain_rsa2048)
			echo "    testing rsa2048"
			;;
			$real_domain_rsa4096)
			echo "    testing rsa4096"
			;;
			$real_domain_ed25519)
			echo "    testing ed25519"
			;;
		esac
		if [ $verbose -gt 0 ] ; then
			echo "testing real domain $real_domain $ktype DKIM record"
		fi
		ktype=$(cat $k.pub| grep "k="|sed 's{v=DKIM1;{{'|cut -d= -f2|cut -d';' -f1)
		case $ktype in
			"rsa")
			enc="2"
			;;
			"ed25519")
			enc="4"
			;;
		esac
		(
		echo "From: postmaster@$real_domain"
		echo "To: postmaster@$real_domain"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) > /tmp/mail.txt 
		(cat /tmp/mail.txt | $bindir/dkim -z $enc -s "$k"; cat /tmp/mail.txt) | $bindir/dkim -v > $out
		ret=$?
		/bin/rm -f /tmp/mail.txt
		if [ $ret -eq 0 ] ; then
			if [ $verbose -gt 0 ] ; then
				echo "SUCCESS: [ret=$ret] domain=$real_domain key=$k"
				echo
			fi
			echo SUCCESS ======================== >$out
		else
			echo "FAILED : [ret=$ret] domain=$real_domain key=$k"
			echo
			echo FAILURE [$ret] ======================== >$out
			echo >>$out
			failed=1
		fi
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		echo "  Success"
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for real domain $real_domain (rsa2048,rsa4096,ed25519) using $dkim with selector from dns"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for real domain $real_domain (rsa2048,rsa4096,ed25519) using $dkim with selector from dns"
	fi
	tcount=$(expr $tcount + 1)

	# Test No 2
	failed=0
	echo "testing multi-signature real domain $real_domain (rsa4096+ed25519) signing+verification by dkim with selector from dns"
	if [ $verbose -gt 0 ] ; then
		echo "testing real domain $real_domain multi DKIM record"
	fi
	(
	echo "From: postmaster@$real_domain"
	echo "To: postmaster@$real_domain"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) > /tmp/mail.txt 
	(cat /tmp/mail.txt | $bindir/dkim -z 2 -s $real_domain_rsa4096 -z 4 -s $real_domain_ed25519; cat /tmp/mail.txt) | $bindir/dkim -vV >$out 2>/tmp/err.out
	ret=$?
	/bin/rm -f /tmp/mail.txt
	grep Signature /tmp/err.out | sed -e 's{Signature #{    Signature{g' \
		-e 's{01{rsa-256{' -e 's{02{ed25519{' -e 's{Failure.*{Failure - Correct{'
	if [ $ret -eq 0 ] ; then
		if [ $verbose -gt 0 ] ; then
			echo "SUCCESS: [ret=$ret] domain=$real_domain key=$real_domain_rsa4096+$real_domain_ed25519"
			echo
		fi
		echo SUCCESS ======================== >$out
	else
		echo "FAILED : [ret=$ret] domain=$real_domain key=$real_domain_rsa4096+$real_domain_ed25519"
		echo
		echo FAILURE [$ret] ======================== >$out
		echo >>$out
		failed=1
	fi

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		echo "  Success"
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for multi-signature real domain $real_domain (rsa4096+ed25519) using $dkim with selector from dns"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for multi-signature real domain $real_domain (rsa4096+ed25519) using $dkim with selector from dns"
	fi
	tcount=$(expr $tcount + 1)

	# Test No 3
	failed=0
	echo "testing multi-signature real domain $real_domain (rsa4096+ed25519) signing by qmail-dkim, verification by dkim with selector from dns"
	if [ $verbose -gt 0 ] ; then
		echo "testing real domain $real_domain multi DKIM record"
	fi
	(
	echo "From: postmaster@$real_domain"
	echo "To: postmaster@$real_domain"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) | env - \
			CONTROLDIR=/tmp \
			DKIMSIGN="$real_domain_rsa4096" \
			DKIMSIGNOPTIONS="-z 2" \
			DKIMSIGNEXTRA="$real_domain_ed25519" \
			DKIMSIGNOPTIONSEXTRA="-z 4" \
			DKIMQUEUE=/bin/cat \
			$qmail_dkim | $bindir/dkim -vV >$out 2>/tmp/err.out
	ret=$?
	grep Signature /tmp/err.out | sed -e 's{Signature #{    Signature{g' \
		-e 's{01{ed25519{' -e 's{02{rsa-256{' -e 's{Failure.*{Failure - Correct{'
	if [ $ret -eq 0 ] ; then
		if [ $verbose -gt 0 ] ; then
			echo "SUCCESS: [ret=$ret] domain=$real_domain key=$real_domain_rsa4096+$real_domain_ed25519"
			echo
		fi
		echo SUCCESS ======================== >$out
	else
		echo "FAILED : [ret=$ret] domain=$real_domain key=$real_domain_rsa4096+$real_domain_ed25519"
		echo
		echo FAILURE [$ret] ======================== >$out
		echo >>$out
		failed=1
	fi

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		echo "  Success"
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for multi-signature real domain $real_domain (rsa4096+ed25519) using $dkim with selector from dns"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for multi-signature real domain $real_domain (rsa4096+ed25519) using $dkim with selector from dns"
	fi
	tcount=$(expr $tcount + 1)

	# Test No 4
	failed=0
	echo "testing real domain $real_domain (rsa2048+rsa4096+ed25519) using qmail-dkim with selector from dns"
	for k in $real_domain_rsa2048 $real_domain_rsa4096 $real_domain_ed25519
	do
		if [ $verbose -gt 0 ] ; then
			echo "testing real domain $real_domain"
		fi
		case $k in
			$real_domain_rsa2048)
			echo "    testing rsa2048"
			;;
			$real_domain_rsa4096)
			echo "    testing rsa4096"
			;;
			$real_domain_ed25519)
			echo "    testing ed25519"
			;;
		esac
		ktype=$(cat $k.pub| grep "k="|sed 's{v=DKIM1;{{'|cut -d= -f2|cut -d';' -f1)
		case $ktype in
			"rsa")
			enc="2"
			;;
			"ed25519")
			enc="4"
			;;
		esac
		(
		echo "From: postmaster@$real_domain"
		echo "To: postmaster@$real_domain"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | env - \
			DKIMSIGN="$k" \
			DKIMSIGNOPTIONS="-z $enc" \
			DKIMQUEUE=/bin/cat \
			$qmail_dkim | env - \
				DKIMVERIFY="" \
				DKIMQUEUE=/bin/cat \
				$qmail_dkim > $out
		ret=$?
		if [ $ret -eq 0 ] ; then
			if [ $verbose -gt 0 ] ; then
				echo "SUCCESS: [ret=$ret] domain=$real_domain key=$real_domain_key"
				echo
			fi
			echo SUCCESS ======================== >$out
		else
			echo "FAILED : [ret=$ret] domain=$real_domain key=$real_domain_key"
			echo
			echo FAILURE [$ret] ======================== >$out
			echo >>$out
			failed=1
		fi
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		echo "  Success"
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for real domain $real_domain (rsa2048,rsa4096,ed25519) using $qmail_dkim with selector from dns"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for real domain $real_domain (rsa2048,rsa4096,ed25519) using $qmail_dkim with selector from dns"
	fi
	tcount=$(expr $tcount + 1)

	# Test No 5
	echo "testing dkim with different key types (rsa2048,rsa4096,ed25519) signing+verification by dkim"
	failed=0
	for i in dkimkeys1 default ed25519
	do
		if [ $verbose -gt 0 ] ; then
			echo testing key type $i
		fi
		if [ "$i" = "ed25519" ] ; then
			enc=4
		else
			enc=2
		fi
		case $i in
			dkimkeys1)
			echo "    testing rsa2048"
			;;
			default)
			echo "    testing rsa4096"
			;;
			ed25519)
			echo "    testing ed25519"
			;;
		esac
		for j in example.com example.org
		do
			selector=$(cat $domainkey_dir/$j/$i.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
			if [ $verbose -gt 0 ] ; then
				echo "($dkim -z $enc -s $domainkey_dir/$j/$i </tmp/mail.txt;cat /tmp/mail.txt) | $dkim -v -T $selector"
			fi
			(
			echo "From: postmaster@$j"
			echo "To: postmaster@$j"
			echo "Subject: Test"
			echo "Date: $(date -R)"
			echo
			echo "Test message"
			) > /tmp/mail.txt
			(cat /tmp/mail.txt | $dkim -z $enc -s $domainkey_dir/$j/$i; cat /tmp/mail.txt) | $dkim -v -T "$selector" > $out
			ret=$?
			/bin/rm /tmp/mail.txt
			if [ $ret -eq 0 ] ; then
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret]  $selector"
					echo
				fi
				echo SUCCESS ======================== >$out
			else
				echo "FAILED : [ret=$ret] domain=$j key=$domainkey_dir/$j/$i $selector"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
				failed=1
			fi
		done
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		echo "  Success"
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for $dkim with different key types (rsa,ed25519)"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for $dkim with different key types (rsa,ed25519)"
	fi
	tcount=$(expr $tcount + 1)

	# Test No 6
	echo "testing multi-signature signing+verification by dkim"
	failed=0
	for i in example.com example.org
	do
		key1=$domainkey_dir/$i/default
		key2=$domainkey_dir/$i/ed25519
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) > /tmp/mail.txt
		(cat /tmp/mail.txt | $dkim -z 2 -s $key1 -z 4 -s $key2; cat /tmp/mail.txt) > /tmp/result.out
		/bin/rm -f /tmp/mail.txt
		for j in default ed25519
		do
			if [ $verbose -gt 0 ] ; then
				echo key $j domain $i
			fi
			selector=$(cat $domainkey_dir/$i/$j.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
			case $j in
				default)
				echo "  rsa+ed25519 with rsa-256 selector"
				;;
				ed25519)
				echo "  rsa+ed25519 with ed25519 selector"
				;;
			esac
			sig_count=$(grep DKIM-Signature /tmp/result.out|wc -l)
			$dkim -vV -T "$selector" > $out 2>/tmp/err.out < /tmp/result.out
			ret=$?
			grep Signature /tmp/err.out | sed -e 's{Signature #{    Signature{g' \
				-e 's{01{rsa-256{' -e 's{02{ed25519{' -e 's{Failure.*{Failure - Correct{'
			if [ $ret -eq 0 -a $sig_count -eq 2 ] ; then
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret]  dkim -s $key1 -s $key2..."
					echo
				fi
				echo SUCCESS ======================== >$out
			else
				echo "FAILED : [ret=$ret] domain=$i sig_count=$sig_count dkim -s $key1 -s $key2..."
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
				failed=1
			fi
		done
		/bin/rm -f /tmp/result.out /tmp/err.out
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		echo "  Success"
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for  multi-signature signing+verification by $dkim"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for  multi-signature signing+verification by $dkim"
	fi
	tcount=$(expr $tcount + 1)

	# Test No 7
	echo "testing multi-signature signing by qmail-dkim + verification by dkim DKIMSIGNEXTRA in env"
	failed=0
	key1=$domainkey_dir/%/default
	key2=$domainkey_dir/%/ed25519
	for i in example.com example.org
	do
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | env \
			CONTROLDIR=$cntrldir \
			DKIMSIGN="$key1" \
			DKIMSIGNOPTIONS="-z 2" \
			DKIMQUEUE=/bin/cat \
			DKIMSIGNEXTRA="$key2" \
			DKIMSIGNOPTIONSEXTRA="-z 4" \
			ERR_FD=2 \
		$qmail_dkim > /tmp/result.out
		sig_count=$(grep DKIM-Signature /tmp/result.out|wc -l)
		for j in default ed25519
		do
			if [ $verbose -gt 0 ] ; then
				echo key $j domain $i
			fi
			selector=$(cat $domainkey_dir/$i/$j.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
			case $j in
				default)
				echo "  rsa+ed25519 with rsa-256 selector"
				;;
				ed25519)
				echo "  rsa+ed25519 with ed25519 selector"
				;;
			esac
			$dkim -vV -T "$selector" >$out 2>/tmp/err.out < /tmp/result.out
			ret=$?
			grep Signature /tmp/err.out | sed -e 's{Signature #{    Signature{g' \
				-e 's{01{ed25519{' -e 's{02{rsa-256{' -e 's{Failure.*{Failure - Correct{'
			if [ $ret -eq 0 -a $sig_count -eq 2 ] ; then
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] domain=$i sig_count=$sig_count $qmail_dkim"
					echo
				fi
				echo SUCCESS ======================== >$out
			else
				echo "FAILED : [ret=$ret] domain=$i sig_count=$sig_count $qmail_dkim"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
				failed=1
			fi
		done
		/bin/rm -f /tmp/result.out /tmp/err.out
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		echo "  Success"
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for  multi-signature signing by $qmail_dkim + verification by $dkim DKIMSIGNEXTRA in env"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for  multi-signature signing by $qmail_dkim + verification by $dkim DKIMSIGNEXTRA in env"
	fi
	tcount=$(expr $tcount + 1)

	# Test No 8
	echo "testing multi-signature signing by qmail-dkim + verification by dkim DKIMSIGNEXTRA in dkimkeys"
	(
	echo "ex*.com:$domainkey_dir/%/dkimkeys1:DKIMSIGNEXTRA=$domainkey_dir/%/dkimkeys2,DKIMSIGNOPTIONS=-z 4"
	echo "ex.*.org:$domainkey_dir/%/dkimkeys1:QREGEX=1,DKIMSIGNEXTRA=$domainkey_dir/%/dkimkeys2,DKIMSIGNOPTIONS=-z 4"
	) >$cntrldir/dkimkeys
	failed=0
	for i in example.com example.org
	do
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | env \
		CONTROLDIR=$cntrldir \
		DKIMSIGN="" \
		DKIMSIGNOPTIONS="-z 2" \
		DKIMQUEUE=/bin/cat \
		ERR_FD=2 \
		$qmail_dkim > /tmp/result.out
		sig_count=$(grep DKIM-Signature /tmp/result.out|wc -l)
		for j in dkimkeys1 dkimkeys2
		do
			if [ $verbose -gt 0 ] ; then
				echo key $j domain $i
			fi
			selector=$(cat $domainkey_dir/$i/$j.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
			case $j in
				dkimkeys1)
				echo "  rsa+ed25519 with rsa-256 selector"
				;;
				dkimkeys2)
				echo "  rsa+ed25519 with ed25519 selector"
				;;
			esac
			$dkim -vV -T "$selector" >$out 2>/tmp/err.out < /tmp/result.out
			ret=$?
			grep Signature /tmp/err.out | sed -e 's{Signature #{    Signature{g' \
				-e 's{01{ed25519{' -e 's{02{rsa-256{' -e 's{Failure.*{Failure - Correct{'
			if [ $ret -eq 0 -a $sig_count -eq 2 ] ; then
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] domain=$i sig_count=$sig_count dkimkeys $qmail_dkim" 
					echo
				fi
				echo SUCCESS ======================== >$out
			else
				echo "FAILED : [ret=$ret] domain=$i sig_count=$sig_count dkimkeys $qmail_dkim"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
				failed=1
			fi
		done
		/bin/rm -f /tmp/result.out /tmp/err.out
	done
	/bin/rm -f $cntrldir/dkimkeys

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		echo "  Success"
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for  multi-signature signing by $qmail_dkim + verification by $dkim DKIMSIGNEXTRA in dkimkeys"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for  multi-signature signing by $qmail_dkim + verification by $dkim DKIMSIGNEXTRA in dkimkeys"
	fi
	tcount=$(expr $tcount + 1)

	# Test No 9
	echo "testing multi-signature signing+verification by qmail-dkim"
	failed=0
	key1=$domainkey_dir/%/default
	key2=$domainkey_dir/%/ed25519
	for i in example.com example.org
	do
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | env \
			CONTROLDIR=$cntrldir \
			DKIMSIGN="$key1" \
			DKIMSIGNOPTIONS="-z 2" \
			DKIMQUEUE=/bin/cat \
			DKIMSIGNEXTRA="$key2" \
			DKIMSIGNOPTIONSEXTRA="-z 4" \
			ERR_FD=2 \
			$qmail_dkim > /tmp/result.out
		sig_count=$(grep DKIM-Signature /tmp/result.out|wc -l)
		for j in default ed25519
		do
			if [ $verbose -gt 0 ] ; then
				echo key $j domain $i
			fi
			selector=$(cat $domainkey_dir/$i/$j.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
			case $j in
				default)
				echo "  rsa+ed25519 with rsa-256 selector"
				;;
				ed25519)
				echo "  rsa+ed25519 with ed25519 selector"
				;;
			esac
			cat /tmp/result.out | env - \
					DKIMVERIFY="" \
					SELECTOR_DATA="$selector" \
					DKIMQUEUE=/bin/cat \
					VERBOSE=1 \
					$qmail_dkim >$out 2>/tmp/err.out
			ret=$?
			grep Signature /tmp/err.out | sed -e 's{Signature #{    Signature{g' \
				-e 's{01{ed25519{' -e 's{02{rsa-256{' -e 's{Failure.*{Failure - Correct{'
			if [ $ret -eq 0 -a $sig_count -eq 2 ] ; then
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] domain=$i sig_count=$sig_count env - DKIMSIGN=$key1 DKIMSIGNEXTRA=$key2... $qmail_dkim"
					echo
				fi
				echo SUCCESS ======================== >$out
			else
				echo "FAILED : [ret=$ret] domain=$i sig_count=$sig_count env - DKIMSIGN=$key1 DKIMSIGNEXTRA=$key2... $qmail_dkim"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
				failed=1
			fi
		done
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		echo "  Success"
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for  multi-signature signing+verification by $qmail_dkim"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for  multi-signature signing+verification by $qmail_dkim"
	fi
	tcount=$(expr $tcount + 1)

	# Test No 10
	echo "testing multi-signature signing+verification by dk-filter"
	failed=0
	key1=$domainkey_dir/%/default
	key2=$domainkey_dir/%/ed25519
	for i in example.com example.org
	do
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | env \
			NODK="1" \
			QMAILREMOTE="1" \
  			_SENDER=postmaster@$i \
			CONTROLDIR=/tmp \
			DKIMSIGN="$key1" \
			DKIMSIGNOPTIONS="-z 2" \
			DKIMSIGNEXTRA="$key2" \
			DKIMSIGNOPTIONSEXTRA="-z 4" $dk_filter > /tmp/result.out
		sig_count=$(grep DKIM-Signature /tmp/result.out|wc -l)
		for j in default ed25519
		do
			if [ $verbose -gt 0 ] ; then
				echo key $j domain $i
			fi
			selector=$(cat $domainkey_dir/$i/$j.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
			case $j in
				default)
				echo "  rsa+ed25519 with rsa-256 selector"
				;;
				ed25519)
				echo "  rsa+ed25519 with ed25519 selector"
				;;
			esac
			cat /tmp/result.out | env - \
				NODK="1" \
				QMAILREMOTE="1" \
				DKIMVERIFY="1" \
				VERBOSE=1 \
				SELECTOR_DATA="$selector" \
			$dk_filter >$out 2>/tmp/err.out
			ret=$?
			grep Signature /tmp/err.out | sed -e 's{Signature #{    Signature{g' \
				-e 's{01{rsa-256{' -e 's{02{ed25519{' -e 's{Failure.*{Failure - Correct{'
			if [ $ret -eq 0 -a $sig_count -eq 2 ] ; then
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] domain=$i sig_count=$sig_count env - DKIMSIGN=$key1 DKIMSIGNEXTRA=$key2... dk-filter"
					echo
				fi
				echo SUCCESS ======================== >$out
			else
				echo "FAILED : [ret=$ret] domain=$i sig_count=$sig_count env - DKIMSIGN=$key1 DKIMSIGNEXTRA=$key2... dk-filter"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
				failed=1
			fi
		done
		/bin/rm -f /tmp/result.out
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		echo "  Success"
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for  multi-signature signing+verification by dk-filter"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for  multi-signature signing+verification by dk-filter"
	fi
	tcount=$(expr $tcount + 1)

	# Test No 11
	echo "testing qmail-dkim signing+verification by qmail-dkim"
	failed=0
	for i in $domainkey_dir/test $domainkey_dir/%/default $domainkey_dir/%/test $domainkey_dir/%/ed25519
	do
		for j in example.com example.org
		do
			selector=""
			if [ "$i" = "$domainkey_dir/test" -a -f $i.pub ] ; then
				selector=$(cat $i.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
			fi
			if [ -z "$selector" ] ; then
				case $i in
				$domainkey_dir/%/default)
				enc="-z 2"
				if [ -f $domainkey_dir/$j/default.pub ] ; then
					selector=$(cat $domainkey_dir/$j/default.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
				elif [ -f $domainkey_dir/default.pub ] ; then
					selector=$(cat $domainkey_dir/default.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
				fi
				;;
				$domainkey_dir/%/test)
				enc="-z 2"
				if [ -f $domainkey_dir/$j/test.pub ] ; then
					selector=$(cat $domainkey_dir/$j/test.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
				elif [ -f $domainkey_dir/test.pub ] ; then
					selector=$(cat $domainkey_dir/test.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
				fi
				;;
				$domainkey_dir/%/ed25519)
				enc="-z 4"
				if [ -f $domainkey_dir/$j/ed25519.pub ] ; then
					selector=$(cat $domainkey_dir/$j/ed25519.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
				elif [ -f $domainkey_dir/ed25519.pub ] ; then
					selector=$(cat $domainkey_dir/ed25519.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
				fi
				;;
				esac
			fi
			if [ $verbose -gt 0 ] ; then
				echo key=$i domain=$j
			fi
			(
			echo "From: postmaster@$j"
			echo "To: postmaster@$j"
			echo "Subject: Test"
			echo "Date: $(date -R)"
			echo
			echo "Test message"
			) | env - \
				CONTROLDIR=$cntrldir \
				DKIMSIGN="$i" \
				DKIMSIGNOPTIONS="$enc" \
				DKIMQUEUE=/bin/cat \
				$qmail_dkim | env - \
					DKIMVERIFY="" \
					SELECTOR_DATA="$selector" \
					DKIMQUEUE=/bin/cat \
					$qmail_dkim > $out
			ret=$?
			if [ $ret -eq 0 ] ; then
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret]  env - DKIMSIGN=$i DKIMQUEUE=/bin/cat $qmail_dkim"
					echo
				fi
				echo SUCCESS ======================== >$out
			else
				echo "FAILED : [ret=$ret] domain=$j key=$i env - DKIMSIGN=$i DKIMQUEUE=/bin/cat $qmail_dkim"
				echo
				echo FAILURE [$ret] domain=$j ======================== >$out
				echo >>$out
				failed=1
			fi
		done
	done

	for i in $domainkey_dir/%/notexist $domainkey_dir/%
	do
		for j in example.com example.org
		do
			if [ $verbose -gt 0 ] ; then
				echo key=$i domain=$j
			fi
			(
			echo "From: postmaster@$j"
			echo "To: postmaster@$j"
			echo "Subject: Test"
			echo "Date: $(date -R)"
			echo
			echo "Test message"
			) | env - \
				CONTROLDIR=$cntrldir \
				DKIMSIGN="$i" \
				DKIMQUEUE=/bin/cat \
				$qmail_dkim >$out
			ret=$?
			if [ $ret -eq 0 ] ; then
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret]  env - DKIMSIGN=$i DKIMQUEUE=/bin/cat $qmail_dkim"
					echo
				fi
				echo SUCCESS ======================== >$out
			else
				echo "FAILED : [ret=$ret] domain=$j key=$i env - DKIMSIGN=$i DKIMQUEUE=/bin/cat $qmail_dkim"
				echo
				echo FAILURE [$ret] domain=$j ======================== >$out
				echo >>$out
				failed=1
			fi
		done
	done

	for i in $domainkey_dir/notexist
	do
		for j in example.com example.org
		do
			if [ $verbose -gt 0 ] ; then
				echo key $i domain $j
			fi
			(
			echo "From: postmaster@$j"
			echo "To: postmaster@$j"
			echo "Subject: Test"
			echo "Date: $(date -R)"
			echo
			echo "Test message"
			) | env - \
				CONTROLDIR=$cntrldir \
				DKIMSIGN="$i" \
				DKIMQUEUE=/bin/cat \
				ERROR_FD=2 \
				$qmail_dkim >$out 2>&1
			ret=$?
			if [ $ret -eq 0 ] ; then
				echo "FAILED : [ret=$ret] domain=$j key=$i env - DKIMSIGN=$i DKIMQUEUE=/bin/cat $qmail_dkim"
				echo
				echo FAILURE [$ret] domain=$j ======================== > $out
				echo >>$out
				failed=1
			else
				if [ $ret -ne $nokeyerror -a $ret -ne 88 ] ; then
					echo "FAILED : [ret=$ret] domain=$j key=$i env - DKIMSIGN=$i DKIMQUEUE=/bin/cat $dkim"
					echo
					echo FAILURE [$ret] domain=$j ======================== > $out
					echo >>$out
					failed=1
				else
					if [ $verbose -gt 0 ] ; then
						echo "SUCCESS: [ret=$ret] env - DKIMSIGN=$i DKIMQUEUE=/bin/cat $dkim"
					fi
					echo SUCCESS ======================== >$out
				fi
			fi
		done
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		echo "  Success"
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test failed for $qmail_dkim signing+verification by $qmail_dkim"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for $qmail_dkim signing+verification by $qmail_dkim"
	fi
	tcount=$(expr $tcount + 1)

	# Test No 12
	echo "testing dk-filter signing"
	failed=0
	for i in $domainkey_dir/test $domainkey_dir/%/default $domainkey_dir/%/test $domainkey_dir/%/notexist $domainkey_dir/%
	do
		for j in example.com example.org
		do
			if [ $verbose -gt 0 ] ; then
				echo key $i domain $j
			fi
			(
			echo "From: postmaster@$j"
			echo "To: postmaster@$j"
			echo "Subject: Test"
			echo "Date: $(date -R)"
			echo
			echo "Test message"
			) | env - \
				NODK="1" \
				QMAILREMOTE="1" \
				CONTROLDIR=$cntrldir \
  				_SENDER=postmaster@$j \
  				DKIMSIGN=$i \
  				$dk_filter > $out
			ret=$?
			if [ $ret -eq 0 ] ; then
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret]  env - NODK=1 QMAILREMOTE=1 _SENDER=postmaster@$j DKIMSIGN=$i DKIMQUEUE=/bin/cat $dk_filter"
				fi
				echo SUCCESS ======================== >$out
			else
				echo "FAILED : [ret=$ret] domain=$j key=$i env - NODK=1 QMAILREMOTE=1 _SENDER=postmaster@$j DKIMSIGN=$i DKIMQUEUE=/bin/cat $dk_filter"
				echo
				echo FAILURE [$ret] domain=$j ======================== >$out
				echo >>$out
				failed=1
			fi
		done
	done

	for i in $domainkey_dir/notexist
	do
		for j in example.com example.org
		do
			if [ $verbose -gt 0 ] ; then
				echo key $i domain $j
			fi
			(
			echo "From: postmaster@$j"
			echo "To: postmaster@$j"
			echo "Subject: Test"
			echo "Date: $(date -R)"
			echo
			echo "Test message"
			) | env - \
				NODK="1" \
				QMAILREMOTE="1" \
				CONTROLDIR=$cntrldir \
	  			_SENDER=postmaster@$j \
				DKIMSIGN="$i" \
				DKIMQUEUE=/bin/cat $dk_filter > $out 2>&1
			ret=$?
			if [ $ret -eq 0 ] ; then
				echo SUCCESS ======================== > $out
			else
				if [ $ret -ne $nokeyerror -a $ret -ne 88 ] ; then
					echo "FAILED : [ret=$ret] domain=$j key=$i env - NODK=1 QMAILREMOTE=1 _SENDER=postmaster@$j DKIMSIGN=$i DKIMQUEUE=/bin/cat $dk_filter"
					echo
					echo FAILURE [$ret] domain=$j ======================== > $out
					echo >>$out
					failed=1
				else
					if [ $verbose -gt 0 ] ; then
						echo "SUCCESS: [ret=$ret] env - NODK=1 QMAILREMOTE=1 _SENDER=postmaster@$j DKIMSIGN=$i DKIMQUEUE=/bin/cat $dk_filter"
					fi
				fi
			fi
		done
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		echo "  Success"
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for dk-filter signing"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for dk-filter signing"
	fi
	tcount=$(expr $tcount + 1)

	# Test No 13
	echo "testing dk-filter signing+verification by dk-filter"
	failed=0
	for i in default ed25519
	do
		for j in example.com example.org
		do
			if [ $verbose -gt 0 ] ; then
				echo key $i domain $j
			fi
			case $i in 
				default)
					enc="-z 2"
					;;
				ed25519)
					enc="-z 4"
					;;
			esac
			selector=$(cat $domainkey_dir/$j/$i.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
			(
			echo "From: postmaster@$j"
			echo "To: postmaster@$j"
			echo "Subject: Test"
			echo "Date: $(date -R)"
			echo
			echo "Test message"
			) | env - \
				NODK="1" \
				QMAILREMOTE="1" \
				CONTROLDIR=$cntrldir \
  				_SENDER=postmaster@$j \
  				DKIMSIGN="$domainkey_dir/%/$i" \
				DKIMSIGNOPTIONS="$enc" \
  				$dk_filter | env - \
				NODK="1" \
				QMAILREMOTE="1" \
				DKIMVERIFY="1" \
				SELECTOR_DATA="$selector" \
			$dk_filter > $out
			ret=$?
			if [ $ret -eq 0 ] ; then
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret]  env - NODK=1 QMAILREMOTE=1 _SENDER=postmaster@$j DKIMSIGN=$i DKIMQUEUE=/bin/cat $dk_filter"
				fi
				echo SUCCESS ======================== >$out
			else
				echo "FAILED : [ret=$ret] domain=$j key=$i env - NODK=1 QMAILREMOTE=1 _SENDER=postmaster@$j DKIMSIGN=$i DKIMQUEUE=/bin/cat $dk_filter"
				echo
				echo FAILURE [$ret] domain=$j ======================== >$out
				echo >>$out
				failed=1
			fi
		done
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		echo "  Success"
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for dk-filter signing+verification by dk-filter"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for dk-filter signing+verification by dk-filter"
	fi
	tcount=$(expr $tcount + 1)

	# Test No 14
	echo "testing dkimkeys control file feature"
	failed=0
	if [ ! -d $cntrldir ] ; then
		mkdir -p $cntrldir
	fi

	(
	echo "ex*.com:$domainkey_dir/%/dkimkeys1"
	echo "ex.*.org:$domainkey_dir/%/dkimkeys2:QREGEX=1,DKIMSIGNOPTIONS=-z 4"
	) >$cntrldir/dkimkeys
	for i in example.com example.org
	do
		if [ $verbose -gt 0 ] ; then
			echo domain $i
		fi
		if [ "$i" = "example.com" ] ; then
			selector=$(cat $domainkey_dir/$i/dkimkeys1.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
		else
			selector=$(cat $domainkey_dir/$i/dkimkeys2.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
		fi
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | env -  \
			DKIMSIGN="" \
			CONTROLDIR=$cntrldir \
			DKIMQUEUE=/bin/cat \
			ERROR_FD=2 \
			$qmail_dkim | $dkim -v -T "$selector" > $out
		ret=$?
		if [ $ret -eq 0 ] ; then
			if [ $verbose -gt 0 ] ; then
				echo "SUCCESS: [ret=$ret]  dkimkeys"
				echo
			fi
			echo SUCCESS ======================== >$out
		else
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) >/tmp/mail.txt
			echo "FAILED : [ret=$ret] domain=$i dkimkeys"
			echo
			echo FAILURE [$ret] domain=$i ======================== >$out
			echo >>$out
			failed=1
		fi
	done

	(
	echo "ex*.com:$domainkey_dir/notexists"
	echo "ex*.org:$domainkey_dir/notexists:QREGEX=1"
	) >$cntrldir/dkimkeys
	for i in example.com example.org
	do
		if [ $verbose -gt 0 ] ; then
			echo domain $i
		fi
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | env -  \
			DKIMSIGN="" \
			CONTROLDIR=$cntrldir \
			DKIMQUEUE=/bin/cat \
			ERROR_FD=2 \
			$qmail_dkim > $out 2>&1
		ret=$?
		if [ $ret -eq 0 ] ; then
			echo "FAILED : [ret=$ret] domain=$i key=dkimkeys"
			echo
			echo FAILURE [$ret] domain=$j ======================== > $out
			echo >>$out
			failed=1
		else
			if [ $ret -ne $nokeyerror -a $ret -ne 88 ] ; then
				echo "FAILED : [ret=$ret] domain=$i key=dkimkeys"
				echo
				echo FAILURE [$ret] domain=$j ======================== > $out
				echo >>$out
				failed=1
			else
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] dkimkeys"
				fi
				echo SUCCESS ======================== >$out
			fi
		fi
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		echo "  Success"
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for dkimkeys"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for dkimkeys"
	fi
	tcount=$(expr $tcount + 1)

	# Test No 15
	echo "testing multi-signature signing+verification by dk-filter DKIMSIGNEXTRA in dkimkeys"
	(
	echo "ex*.com:$domainkey_dir/%/dkimkeys1:DKIMSIGNEXTRA=$domainkey_dir/%/dkimkeys2,DKIMSIGNOPTIONSEXTRA=-z 4"
	echo "ex.*.org:$domainkey_dir/%/dkimkeys1:QREGEX=1,DKIMSIGNEXTRA=$domainkey_dir/%/dkimkeys2,DKIMSIGNOPTIONSEXTRA=-z 4"
	) >$cntrldir/dkimkeys

	failed=0
	for i in example.com example.org
	do
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | env \
			NODK="1" \
			QMAILREMOTE="1" \
  			_SENDER=postmaster@$i \
			CONTROLDIR=$cntrldir \
			DKIMSIGN="" \
			DKIMSIGNOPTIONS="-z 2" \
			$dk_filter > /tmp/result.out
		sig_count=$(grep DKIM-Signature /tmp/result.out|wc -l)
		for j in dkimkeys1 dkimkeys2
		do
			if [ $verbose -gt 0 ] ; then
				echo key $j domain $i
			fi
			selector=$(cat $domainkey_dir/$i/$j.pub |sed -e 's{.*({{' -e 's{).*{{' -e '/^$/d' -e 's{"{{g' -e 's{\t{{g' | tr -d '\n')
			case $j in
				dkimkeys1)
				echo "  rsa+ed25519 with rsa-256 selector"
				;;
				dkimkeys2)
				echo "  rsa+ed25519 with ed25519 selector"
				;;
			esac
			cat /tmp/result.out | env - \
				NODK="1" \
				QMAILREMOTE="1" \
				DKIMVERIFY="1" \
				VERBOSE=1 \
				SELECTOR_DATA="$selector" \
			$dk_filter >$out 2>/tmp/err.out
			ret=$?
			grep Signature /tmp/err.out | sed -e 's{Signature #{    Signature{g' \
				-e 's{01{rsa-256{' -e 's{02{ed25519{' -e 's{Failure.*{Failure - Correct{'
			if [ $ret -eq 0 -a $sig_count -eq 2 ] ; then
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] domain=$i sig_count=$sig_count ... dk-filter"
					echo
				fi
				echo SUCCESS ======================== >$out
			else
				echo "FAILED : [ret=$ret] domain=$i sig_count=$sig_count ... dk-filter"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
				failed=1
			fi
		done
		/bin/rm -f /tmp/result.out
	done
	/bin/rm -f $cntrldir/dkimkeys

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		echo "  Success"
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for  multi-signature signing+verification by dk-filter DKIMSIGNEXTRA in dkimkeys"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for  multi-signature signing+verification by dk-filter DKIMSIGNEXTRA in dkimkeys"
	fi
	tcount=$(expr $tcount + 1)

	# Test No 16
	key1=$domainkey_dir/example.com/dkimkeys1
	qmail_inject=$bindir/qmail-inject
	qmail_queue=$sbindir/qmail-queue
	echo "testing qmail-dkim custom error feature for permanent(100)/temporary(111) failures"
	(
		echo "From: postmaster@$real_domain"
		echo "To: $user@$real_domain"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
	) > /tmp/mail.txt 
	for i in PQ pq
	do
		echo "  testing return value  for DKIMVERIFY=$i"
		(cat /tmp/mail.txt | $bindir/dkim -z 2 -s $key1; cat /tmp/mail.txt) | env - \
			QUEUEDIR=/var/indimail/queue/queue1 \
			CONFSPLIT=23 \
			BIGTODO=0 \
			DKIMVERIFY="$i" \
			QMAILQUEUE=$qmail_dkim \
			FASTQUEUE=1 \
			ERROR_FD=4 \
			$qmail_inject -a $user 2>/tmp/out.$$
		ret=$?
		echo "    return value=$ret"
		case $i in
			PQ)
			if [ $ret -eq 100 ] ; then
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] DKIMVERIFY=$i qmail-dkim custom error"
					echo
				fi
				echo SUCCESS ======================== >$out
			else
				failed=1
				echo "FAILED : [ret=$ret] DKIMVERIFY=$i qmail-dkim custom error"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
			fi
			echo "  testing error message for DKIMVERIFY=$i"
			echo "    error message=$(cat /tmp/out.$$)"
			grep "qmail-inject: fatal: qmail-dkim: signature error: permanent dns failure requesting selector (#5.7.0)" /tmp/out.$$ > /dev/null
			if [ $? -eq 0 ] ; then
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] DKIMVERIFY=$i qmail-dkim custom error message"
					echo
				fi
				echo SUCCESS ======================== >$out
			else
				failed=1
				echo "FAILED : [ret=$ret] DKIMVERIFY=$i qmail-dkim custom error message"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
			fi
			;;
			pq)
			if [ $ret -eq 111 ] ; then
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] DKIMVERIFY=$i qmail-dkim custom error"
					echo
				fi
				echo SUCCESS ======================== >$out
			else
				failed=1
				echo "FAILED : [ret=$ret] DKIMVERIFY=$i qmail-dkim custom error"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
			fi
			echo "  testing error message for DKIMVERIFY=$i"
			echo "    error message=$(cat /tmp/out.$$)"
			grep "qmail-inject: fatal: qmail-dkim: signature error: permanent dns failure requesting selector (#4.7.0)" /tmp/out.$$ > /dev/null
			if [ $? -eq 0 ] ; then
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] DKIMVERIFY=$i qmail-dkim custom error message"
					echo
				fi
				echo SUCCESS ======================== >$out
			else
				failed=1
				echo "FAILED : [ret=$ret] DKIMVERIFY=$i qmail-dkim custom error message"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
			fi
			;;
		esac
	done
	/bin/rm -f /tmp/mail.txt /tmp/out.$$
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for qmail-dkim custom error"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "Test succeeded for qmail-dkim custom error"
	fi
	tcount=$(expr $tcount + 1)
}

usage()
{
	echo "test-indimail-mta [-h|--help]" 1>&2
}

display_tests()
{
	echo "test svscan startup without svscan log"
	echo "test service startup (qmail-smtpd, qmail-send)"
	echo "test SMTPS using swaks"
	echo "test recipient extension"
	echo "test autoresponder"
	echo "test qmail-qfilter"
	echo "test stopping of service using svc"
	echo "test startup of new service by sending HUP to svscan"
	echo "test restart of service by using svc -r"
	echo "test starting of service by using svc -u"
	echo "test stopping of service by using svc -d"
	echo "test multilog"
	echo "test svscan startup with svscan log"
	echo "test svscan execution of run /service/.svscan/run"
	echo "test svscan start services configured in /service"
	echo "test SMTPS service and mail submission using swaks"
	echo "test svscan autoscan"
	echo "test svscan subreaper feature"
	echo "test blocking (badmailfrom, badrcptto)"
	echo "test DKIM using dkim, qmail-dkim, dk-filter"
}

failed=0
options=$(getopt -a -n test-indimail-mta -o "h" -l help -- "$@")
if [ $? != 0 ]; then
  usage
  exit 1
fi
eval set -- "$options"
while :
do
	case "$1" in
		-h | --help)
		usage
		display_tests
  		exit 1
		;;
		--) # end of options
		shift
		break
		;;
		*)
		echo "Unexpected option: $1 - this should'nt happen." 1>&2
		usage
  		exit 1
		;;
	esac
done
## end getopt

sudo ls /tmp > /dev/null 2>&1
if [ $? -ne 0 ] ; then
	echo "This script requires sudo privileges" 1>&2
	exit 1
fi
failed=0
do_setup
log_type=1
do_without_svscan
log_type=2
do_svscan_without_svscanlog
shutdown_svscan $svpid
do_svscan_with_svscanlog
shutdown_svscan $svpid

wait

echo
non_dkim_tcount=$tcount
do_dkim_tests

# Cleanup
sudo /bin/rm -rf $servicedir
sudo /bin/rm -rf $logdir
sudo /bin/rm -rf $testdir/queue
sudo /bin/rm -rf $testdir/sleep.out
sudo /bin/rm -rf $testdir/svscan.out
sudo /bin/rm -rf $testdir/tcpclient.smtp
sudo /bin/rm -rf $sysconfdir/users
echo
echo "All $tcount tests succeeded (non-dkim tests=$non_dkim_tcount)"
failed=0
end=$(date +'%s')
secs=$(($end-$start))
printf '%d days, %d hours, %d minutes, %d seconds\n' $((secs/86400)) $((secs%86400/3600)) $((secs%3600/60)) \
	  $((secs%60))
exit 0

#
# $Log: test-indimail-mta,v $
# Revision 1.8  2023-09-08 16:11:12+05:30  Cprogrammer
# added dkim tests
#
# Revision 1.7  2023-09-08 15:42:28+05:30  Cprogrammer
# added test for autoresponder
#
# Revision 1.6  2023-09-08 00:54:00+05:30  Cprogrammer
# added test for qmail-qfilter
#
# Revision 1.5  2023-08-26 23:18:32+05:30  Cprogrammer
# use default cipherlist, ciphersuite created by svctool
#
# Revision 1.4  2023-08-25 08:27:05+05:30  Cprogrammer
# fixed queue-fix
# removed use of hardcoded uid, gid in assign file
#
# Revision 1.3  2023-08-22 20:25:14+05:30  Cprogrammer
# added tests for TLSv1.2, TLSv1.3
#
# Revision 1.2  2023-08-04 00:09:43+05:30  Cprogrammer
# removed bashism
#
# Revision 1.1  2023-07-26 23:56:10+05:30  Cprogrammer
# Initial revision
#
#
