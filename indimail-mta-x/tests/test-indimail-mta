#!/bin/sh
user=mbhangui
testdir=/tmp/qmail-test
maildir=$testdir/$user/Maildir
servicedir=$testdir/service
sysconfdir=$testdir/etc/indimail
cntrldir=$sysconfdir/control
certdir=$sysconfdir/certs
logdir=$testdir/logs
bindir=/usr/bin
sbindir=/usr/sbin
qmail_newu=$sbindir/qmail-newu
qmail_start=$sbindir/qmail-start
qmail_inject=$bindir/qmail-inject
qmail_smtpd=$sbindir/qmail-smtpd
setuidgid=$bindir/setuidgid
tcpserver=$bindir/tcpserver
qmail_queue=$sbindir/qmail-queue
s_nail=/usr/bin/s-nail
sleep_int=2
HOSTNAME=$(uname -n)

function check_mail()
{
	count=0
	ret=1
	(
	while true
	do
		mcount=$(ls $maildir/new | wc -l)
		if [ $mcount -gt 0 ] ; then
			mail_file=$(ls -lt $maildir/new|head -2|tail -1|awk '{print $9}')
			echo "Got Mail $mail_file"
			/bin/rm -f $maildir/new/$mail_file
			return 0
		fi
		sleep 1
		count=$(expr "$count" + 1)
		echo count=$count
		if [ $count -gt 5 ] ; then
			echo "Failed to receive Mail" 1>&2
			break
		fi
	done
	return 1
	) >> $logdir/mail/mail.log 2>&1
}

function shutdown_svscan()
{
	if [ -d $servicedir/.svscan/log ] ; then
		sudo kill $1
		sleep 5
		sudo svc -dx $servicedir/* $servicedir/*/log $servicedir/.svscan/log
	else
		sudo kill $1
		sleep 5
		sudo svc -dx $servicedir/* $servicedir/*/log
	fi
}

function setup_maildir()
{
	if [ -d $maildir/new ] ; then
		find $maildir/new -type f -exec /bin/rm -f {} \;
	fi
	mkdir -p $cntrldir
	mkdir -p $sysconfdir/users
	echo "Creating $maildir" 1>&2
	for i in cur new tmp
	do
		mkdir -p $maildir/$i
	done
}

function setup_assign()
{
	echo "Creating $sysconfdir/users/assign" 1>&2
	(
	echo "=$user:$user:1000:1000:$testdir/$user:::"
	echo "+$user-:$user:1000:1000:$testdir/$user:-::"
	echo "."
	) > $sysconfdir/users/assign
	echo "Creating $sysconfdir/users/cdb" 1>&2
	$qmail_newu $sysconfdir/users
}

function setup_queue()
{
	echo "Creating queue in $testdir/queue" 1>&2
	sudo queue-fix $testdir/queue
}

function setup_config()
{
	echo "Creating default config files in $cntrldir"
	env CONTROLDIR=$cntrldir config-fast $HOSTNAME 
	echo ./Maildir/        > $cntrldir/defaultdelivery
	echo TLSv1_3           > $cntrldir/tlsclientmethod
	echo TLSv1_3           > $cntrldir/tlsservermethod
	echo blocked@$HOSTNAME > $cntrldir/badmailfrom
	echo blocked@$HOSTNAME > $cntrldir/badrcptto
	sudo /usr/sbin/svctool --cntrldir=$cntrldir --config=qmail
	sudo /usr/sbin/svctool --certdir=$certdir    --config=cert \
		--postmaster=postmaster@$HOSTNAME --common_name=$HOSTNAME
	echo @$HOSTNAME > $cntrldir/nodnscheck
	tr -dc 'A-Za-z0-9' </dev/urandom | head -c 16 > $cntrldir/batvkey
}

function test_tcpclient_script()
{
	(
	echo "#!/bin/sh"
	echo "exec 0<&6"
	echo "exec 1>&7"
	echo "read key"
	echo "greeting=\$(echo \$key | awk '{print \$1}')"
	echo "if [ \$greeting -ne 220 ] ; then"
	echo "	echo \"Greeting failed\" 1>&2"
	echo "	printf \"QUIT\r\n\""
	echo "fi"
	echo "printf \"EHLO\r\n\""
	echo "while true"
	echo "do"
	echo "	read line"
	echo "	echo \$line |grep \"250 \" >/dev/null"
	echo "	if [ \$? -eq 0 ] ; then"
	echo "		echo \$line 1>&2"
	echo "		break"
	echo "	fi"
	echo "	echo \$line 1>&2"
	echo "done"
	echo "printf \"MAIL FROM:<$user@$HOSTNAME>\r\n\" 1>&2"
	echo "printf \"MAIL FROM:<$user@$HOSTNAME>\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "code=\$(echo \$key |cut -c1-3)"
	echo "if [ \$code -ne 250 ] ; then"
	echo "	echo \"MAIL From failed: code=\$code\" 1>&2"
	echo "	exit 1"
	echo "fi"
	echo "printf \"RCPT TO:<$user@$HOSTNAME>\r\n\" 1>&2"
	echo "printf \"RCPT TO:<$user@$HOSTNAME>\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "code=\$(echo \$key |cut -c1-3)"
	echo "if [ \$code -ne 250 ] ; then"
	echo "	echo \"RCPT To failed: code=\$code\" 1>&2"
	echo "	exit 1"
	echo "fi"
	echo "printf \"DATA\r\n\" 1>&2"
	echo "printf \"DATA\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "code=\$(echo \$key |cut -c1-3)"
	echo "if [ \$code -ne 354 ] ; then"
	echo "	echo \"DATA command: code=\$code\" 1>&2"
	echo "	exit 1"
	echo "fi"
	echo "printf \"To: $user@$HOSTNAME\r\n\" 1>&2"
	echo "printf \"To: $user@$HOSTNAME\r\n\""
	echo "printf \"From: $user@$HOSTNAME\r\n\" 1>&2"
	echo "printf \"From: $user@$HOSTNAME\r\n\""
	echo "printf \"Subject: Test Message\r\n\" 1>&2"
	echo "printf \"Subject: Test Message\r\n\""
	echo "printf \"Date: \$(date -R)\r\n\" 1>&2"
	echo "printf \"Date: \$(date -R)\r\n\""
	echo "printf \"\r\n\" 1>&2"
	echo "printf \"\r\n\""
	echo "printf \"This is a test message\r\n\" 1>&2"
	echo "printf \"This is a test message\r\n\""
	echo "printf \".\r\n\" 1>&2"
	echo "printf \".\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "code=\$(echo \$key |cut -c1-3)"
	echo "if [ \$code -ne 250 ] ; then"
	echo "	echo \"SMTP Transaction failed: code=\$code\" 1>&2"
	echo "	exit 1"
	echo "fi"
	echo "printf \"QUIT\r\n\" 1>&2"
	echo "printf \"QUIT\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "exit 0"
	) > $testdir/tcpclient.smtp
	chmod +x $testdir/tcpclient.smtp
	if [ $# -eq 0 ] ; then
		tcpclient -vDHR 0 2025 $testdir/tcpclient.smtp  > $logdir/tcpclient/tcpclient.log 2>&1
	else
		tcpclient -n $certdir/servercert.pem -vDHR 0 2025 $testdir/tcpclient.smtp  > $logdir/tcpclient/tcpclient.log 2>&1
	fi
	/bin/rm -f $testdir/tcpclient.smtp
	check_mail
	if [ $? -eq 0 ] ; then
		if [ $# -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing mail doing SMTP with tcpclient succeeded"
		else
			tcount=$(expr $tcount + 1)
			echo "  testing mail doing SMTPS with tcpclient succeeded"
		fi
	else
		if [ $# -eq 0 ] ; then
			echo "  testing mail doing SMTP with tcpclient failed"
		else
			echo "  testing mail doing SMTPS with tcpclient failed"
		fi
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
}

function run_qmail_send()
{
	(
	sudo env - \
		PATH=/bin:/usr/sbin \
		BIGTODO=0 \
		QPWGR=1 \
		CONTROLDIR=$cntrldir \
		CERTDIR=$certdir \
		CONFSPLIT=23 \
		QUEUEDIR=$testdir/queue \
		ASSIGNDIR=$sysconfdir/users \
		$qmail_start -s ./Maildir/ > $logdir/qmail-send/qmail-send.log 2>&1
	) &
}

function get_send_pid()
{
	while true
	do
		send_pid=$(/bin/ps -ef | grep qmail-send |grep $testdir |grep -E -v "qmail-clean|grep" | awk '{print $2}')
		if [ -n "$send_pid" ] ; then
			break
		fi
		sleep 1
	done
	echo $send_pid
}

function do_qmail_inject()
{
	echo "Starting qmail-inject"
	(
	echo "From: $user"
	echo "To: $user"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) | sudo $setuidgid -g qcerts $user env - \
		QUEUEDIR=$testdir/queue \
		QMAILQUEUE=$qmail_queue \
		$qmail_inject $user

	check_mail
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing qmail-inject, qmail send+receive succeeded"
	else
		echo "  testing qmail-inject, qmail send+receive failed"
		sudo kill $send_pid
		exit 1
	fi
}

function create_authsmtp()
{
	if [ -f /tmp/authsmtp ] ; then
		return 0
	fi
	(
	echo "#!/bin/sh"
	echo "if [ \$# -lt 1 ] ; then"
	echo "	exit 2"
	echo "fi"
	echo "var=\`tr [\"\\0\"] [\"\\n\"] 0<&3\`"
	echo "user=\`echo \$var | cut -d ' ' -f1\`"
	echo "pass=\`echo \$var | cut -d ' ' -f2\`"
	echo "echo user=\$user 1>&2"
	echo "echo pass=\$pass 1>&2"
	echo "exec 4>/tmp/authsmtp.\$\$ 3</tmp/authsmtp.\$\$"
	echo "/bin/rm -f /tmp/authsmtp.\$\$"
	echo "echo \$var | tr [\" \"] [\"\\0\"] 1>&4"
	echo "if [ \"\$user\" = \"$user@$HOSTNAME\" -a \"\$pass\" = \"abcd12345678\" ] ; then"
	echo "	exit 0"
	echo "fi"
	echo "exec \$*"
	) >/tmp/authsmtp
	chmod +x /tmp/authsmtp
}

function start_tcpserver_smtp()
{
	echo
	echo "Starting SMTP on port 2025 using tcpserver"
	(
	sudo env - \
		USE_QPWGR=1 \
		STARTTLS=1 \
		BIGTODO=0 \
		CONFSPLIT=23 \
		QUEUEDIR=$testdir/queue \
		CONTROLDIR=$cntrldir \
		CERTDIR=$certdir \
		ENABLE_CRAM=1 \
		DEBUG=1 \
		DEBUG_LOGIN=1 \
		$tcpserver -u qmaild -g qmail -v -HR 0 2025 $qmail_smtpd $HOSTNAME /tmp/authsmtp /sbin/sys-checkpwd /bin/false > $logdir/smtpd/smtpd.log 2>&1
	) &

	count=0
	while true
	do
		bash -c "</dev/tcp/0/2025" 2>/dev/null
		if [ $? -eq 0 ] ; then
			#echo "Port 0:2025 is alive" 1>&2
			break
		fi
		count=$(expr $count + 1)
		if [ $count -gt 5 ] ; then
			echo "Failed to start qmail-smtpd" 1>&2
			exit 1
		fi
		sleep 1
	done
	smtp_pid=$(/bin/ps -ef|grep 2025|grep -v sudo|grep qmail-smtpd|awk '{print $2}')
	sudo kill -0 $smtp_pid
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing SMTP on port 2025 using tcpserver succeeded"
	else
		echo "  testing SMTP on port 2025 using tcpserver failed"
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
}

function test_smtp_tls()
{
	swaks -S --to $user@$HOSTNAME --server localhost --port 2025 -tls
	check_mail
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing mail using SMTP with STARTTLS succeeded"
	else
		echo "  testing mail using SMTP with STARTTLS failed"
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
}

function test_smtp_notls()
{
	swaks -S --to $user@$HOSTNAME --server localhost --port 2025
	check_mail
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing mail using SMTP without STARTTLS succeeded"
	else
		echo "  testing mail using SMTP without STARTTLS failed"
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
}

function test_smtps()
{
	swaks -S --to $user@$HOSTNAME --server localhost --port 2025 --tls-on-connect
	check_mail
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  $1 succeeded"
	else
		echo "  $1 failed"
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
}

function test_smtp_auth_login()
{
	swaks -S --to $user@$HOSTNAME --server localhost --port 2025 --a LOGIN -au $user@$HOSTNAME -ap "abcd12345678"
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "AUTH LOGIN:")
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing mail using SMTP with LOGIN authentication succeeded"
		else
			echo "  testing mail using SMTP with LOGIN authentication failed"
			sudo kill $send_pid $smtp_pid
			exit 1
		fi
	else
		echo "  testing mail using SMTP with LOGIN authentication failed"
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
}

function test_smtp_auth_plain()
{
	swaks -S --to $user@$HOSTNAME --server localhost --port 2025 --a PLAIN -au $user@$HOSTNAME -ap "abcd12345678"
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "AUTH PLAIN:")
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing mail using SMTP with PLAIN authentication succeeded"
		else
			echo "  testing mail using SMTP with PLAIN authentication failed"
			sudo kill $send_pid $smtp_pid
			exit 1
		fi
	else
		echo "  testing mail using SMTP with PLAIN authentication failed"
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
}

function test_smtp_auth_cram_md5()
{
	pass=$(sudo grep $user /etc/shadow|cut -d: -f2)
	swaks -S --to $user@$HOSTNAME --server localhost --port 2025 --a CRAM-MD5 -au "$user" -ap "$pass"
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "AUTH CRAM-MD5:")
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing mail using SMTP with CRAM-MD5 authentication succeeded"
		else
			echo "  testing mail using SMTP with CRAM-MD5 authentication failed"
			sudo kill $send_pid $smtp_pid
			exit 1
		fi
	else
		echo "  testing mail using SMTP with CRAM-MD5 authentication failed"
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
}

function test_qmail_remote_auth()
{
	case $1 in
		"CRAM-MD5")
		u=$user
		pass=$(sudo grep $user /etc/shadow|cut -d: -f2)
		;;
		*)
		u=$user@$HOSTNAME
		pass="abcd12345678"
		;;
	esac
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $user@$HOSTNAME"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) | env - \
		SMTPROUTE="$HOSTNAME:127.0.0.1:2025 $u $pass" \
		AUTH_SMTP="$1" \
		CONTROLDIR=$cntrldir \
		/usr/sbin/qmail-remote $HOSTNAME $user@$HOSTNAME "" 10 $user@$HOSTNAME >$testdir/qremote.$$
	cat $testdir/qremote.$$ >> $logdir/qmail-remote/qmail-remote.log
	addr=$(batv -k $(cat $cntrldir/batvkey) -v $(sed -n 1p $testdir/qremote.$$|awk '{print $2}'|sed 's/^.\(.*\).$/\1/') 2>/dev/null)
	batv_status=$?
	/bin/rm -f $testdir/qremote.$$
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "AUTH $1:")
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing qmail-remote AUTH $1, qmail-remote send+receive succeeded"
		else
			echo "  testing qmail-remote AUTH $1, qmail-remote send+receive failed"
			sudo kill $send_pid $smtp_pid
			exit 1
		fi
	else
		echo "  testing qmail-remote AUTH $1, qmail-remote send+receive failed"
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
	if [ " $1" = " CRAM-MD5" ] ; then
		if [ $batv_status -eq 0 -a "$addr" = "$user@$HOSTNAME" ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing BATV signing+verification succeeded"
		else
			echo "  testing BATV signing+verification failed"
			sudo kill $send_pid $smtp_pid
			exit 1
		fi
	fi
}

function test_qmail_remote_routing()
{
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $user@$HOSTNAME"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) > $testdir/mail.txt
	
	/bin/rm -f $cntrldir/batvkey
	env - \
		SMTPROUTE="$HOSTNAME:127.0.0.1:2025" \
		CONTROLDIR=$cntrldir \
		/usr/sbin/qmail-remote $HOSTNAME $user@$HOSTNAME "" 10 $user@$HOSTNAME 1>$testdir/qremote.$$ <$testdir/mail.txt
	cat $testdir/qremote.$$ >> $logdir/qmail-remote/qmail-remote.log
	/bin/rm -f $testdir/qremote.$$
	check_mail
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing qmail-remote SMTPROUTE env qmail-remote send+receive succeeded"
	else
		echo "  testing qmail-remote SMTPROUTE env qmail-remote send+receive failed"
		sudo kill $send_pid $smtp_pid
		exit 1
	fi

	echo "$HOSTNAME:127.0.0.1:2025" > $cntrldir/smtproutes
	env - \
		CONTROLDIR=$cntrldir \
		/usr/sbin/qmail-remote $HOSTNAME $user@$HOSTNAME "" 10 $user@$HOSTNAME 1>$testdir/qremote.$$ <$testdir/mail.txt
	cat $testdir/qremote.$$ >> $logdir/qmail-remote/qmail-remote.log
	/bin/rm -f $testdir/qremote.$$ $testdir/mail.txt
	check_mail
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing qmail-remote smtproutes control file qmail-remote send+receive succeeded"
	else
		echo "  testing qmail-remote smtproutes control file qmail-remote send+receive failed"
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
}

function test_qmail_remote_auth_cdb()
{
	echo "$HOSTNAME:127.0.0.1:2025 /s" > $cntrldir/smtproutes
	(
	echo "=$user@$HOSTNAME:$user@$HOSTNAME abcd12345678 AUTH_SMTP=plain:"
	echo "."
	) > $cntrldir/remote_auth
	env CONTROLDIR=$cntrldir cdb-database remote_auth
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing cdb-database for qmail-remote authentication succeeded"
	else
		echo "  testing cdb-database for qmail-remote authentication failed"
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $user@$HOSTNAME"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) > $testdir/mail.txt

	env - \
		SMTPROUTE="$HOSTNAME:127.0.0.1:2025 /s" \
		AUTH_SMTP="" \
		CONTROLDIR=$cntrldir \
		/usr/sbin/qmail-remote $HOSTNAME $user@$HOSTNAME "" 10 $user@$HOSTNAME 1>$testdir/qremote.$$ <$testdir/mail.txt
	cat $testdir/qremote.$$ >> $logdir/qmail-remote/qmail-remote.log
	/bin/rm -f $testdir/qremote.$$ $testdir/mail.txt
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "AUTH PLAIN:")
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing qmail-remote using remote_auth.cdb qmail-remote send+receive succeeded"
		else
			echo "  testing qmail-remote using remote_auth.cdb qmail-remote send+receive failed"
			sudo kill $send_pid $smtp_pid
			exit 1
		fi
	else
		echo "  testing qmail-remote using remote_auth.cdb qmail-remote send+receive failed"
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
}

function terminate_smtp()
{
	sudo kill $1
	sleep $sleep_int
}

function terminate_send()
{
	sudo kill $1
	sleep $sleep_int
}

function start_tcpserver_smtps
{
	echo
	echo "Starting SMTPS on port 2025 using tcpserver"
	(
	sudo env - \
		USE_QPWGR=1 \
		SMTPS=1 \
		BIGTODO=0 \
		CONFSPLIT=23 \
		QUEUEDIR=$testdir/queue \
		CONTROLDIR=$cntrldir \
		CERTDIR=$certdir \
		$tcpserver -u qmaild -g qmail -v -HR 0 2025 $qmail_smtpd > $logdir/smtpd/smtpd.log 2>&1
	) &

	count=0
	while true
	do
		bash -c "</dev/tcp/0/2025" 2>/dev/null
		if [ $? -eq 0 ] ; then
			#echo "Port 0:2025 is alive" 1>&2
			break
		fi
		count=$(expr $count + 1)
		if [ $count -gt 5 ] ; then
			echo "Failed to start qmail-smtpd" 1>&2
			sudo kill $send_pid
			exit 1
		fi
		sleep 1
	done
	smtp_pid=$(/bin/ps -ef|grep 2025|grep -v sudo|grep qmail-smtpd|awk '{print $2}')
	sudo kill -0 $smtp_pid
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing SMTPS on port 2025 using tcpserver succeeded"
	else
		echo "  testing SMTPS on port 2025 using tcpserver failed"
		sudo kill $send_pid $smtp_pid
		exit 1
	fi
}

function setup_svscan_without_svscanlog()
{
	echo
	echo "Starting svscan services without svscanlog"
	sudo /bin/rm -rf $servicedir
	sudo /bin/rm -rf $logdir/smtpd
	sudo /bin/rm -rf $logdir/qmail-send

	mkdir -p $servicedir/smtpd/variables
	mkdir -p $servicedir/smtpd/log
	echo 1              > $servicedir/smtpd/variables/USE_QPWGR
	echo 1              > $servicedir/smtpd/variables/SMTPS
	echo 0              > $servicedir/smtpd/variables/BIGTODO
	echo 23             > $servicedir/smtpd/variables/CONFSPLIT
	echo $cntrldir      > $servicedir/smtpd/variables/CONTROLDIR
	echo $testdir/queue > $servicedir/smtpd/variables/QUEUEDIR
	echo $certdir       > $servicedir/smtpd/variables/CERTDIR
	printf "#!/bin/sh\nexec envdir ./variables $tcpserver -u qmaild -g qmail -v -HR 0 2025 $qmail_smtpd 2>&1\n" > $servicedir/smtpd/run
	printf "#!/bin/sh\nexec /usr/sbin/multilog t $logdir/smtpd\n" > $servicedir/smtpd/log/run
	chmod +x $servicedir/smtpd/run
	chmod +x $servicedir/smtpd/log/run

	mkdir -p $servicedir/qmail-send/variables
	mkdir -p $servicedir/qmail-send/log
	echo /bin:/usr/sbin    > $servicedir/qmail-send/variables/PATH
	echo 0                 > $servicedir/qmail-send/variables/BIGTODO
	echo 1                 > $servicedir/qmail-send/variables/QPWGR
	echo 23                > $servicedir/qmail-send/variables/CONFSPLIT
	echo $cntrldir         > $servicedir/qmail-send/variables/CONTROLDIR
	echo $testdir/queue    > $servicedir/qmail-send/variables/QUEUEDIR
	echo $sysconfdir/users > $servicedir/qmail-send/variables/ASSIGNDIR
	echo $certdir          > $servicedir/qmail-send/variables/CERTDIR
	printf "#!/bin/sh\nexec envdir ./variables $qmail_start -s ./Maildir/ 2>&1\n" > $servicedir/qmail-send/run
	printf "#!/bin/sh\nexec /usr/sbin/multilog t $logdir/qmail-send\n" > $servicedir/qmail-send/log/run
	chmod +x $servicedir/qmail-send/run
	chmod +x $servicedir/qmail-send/log/run
}

function start_svscan_without_svscanlog()
{
	(
	sudo env - \
		DISABLE_RUN=1 \
		SILENT=1 \
		PATH=/bin:/usr/sbin \
		/usr/sbin/svscan $servicedir
	) > $logdir/svscan/svscan.log 2>&1 &
	sleep 1
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	sudo kill -0 $svpid
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing svscan (without svscanlog) startup succeeded"
	else
		echo "  testing svscan (without svscanlog) startup failed"
		shutdown_svscan $svpid
		exit 1
	fi
	for i in smtpd smtpd/log qmail-send qmail-send/log
	do
		sudo svok $servicedir/smtpd
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing service $i startup succeeded"
		else
			echo "  testing service $i startup failed"
			shutdown_svscan $svpid
			exit 1
		fi
	done
}

function test_stop_smtps()
{
	sudo svc -d $servicedir/smtpd
	sleep $sleep_int
	swaks -S --to $user@$HOSTNAME --server localhost --port 2025 --tls-on-connect 2>/dev/null
	if [ $? -eq 2 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing stopping of service using svc succeeded"
	else
		echo "  testing stopping of service using svc failed"
		shutdown_svscan $svpid
		exit 1
	fi
}

function test_stop_supervise()
{
	sudo svc -dx $servicedir/smtpd
	sleep $sleep_int
	sudo svok $servicedir/smtpd
	if [ $? -eq 100 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing stopping of supervise using svc succeeded"
	else
		echo "  testing stopping of supervise using svc failed"
		shutdown_svscan $svpid
		exit 1
	fi
}

function test_restart_service_using_hup()
{
	sudo kill -1 $svpid
	sleep $sleep_int
	sudo svok $servicedir/smtpd
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing restarting of supervise by sending hup to svscan succeeded"
	else
		echo "  testing restarting of supervise by sending hup to svscan failed"
		shutdown_svscan $svpid
		exit 1
	fi
}

function test_restart_service_using_svc()
{
	tcpserver_pid1=$(sudo svstat $servicedir/smtpd|awk '{print $6}')
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int
	tcpserver_pid2=$(sudo svstat $servicedir/smtpd|awk '{print $6}')
	
	if [ $tcpserver_pid2 -ne $tcpserver_pid1 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing restarting of supervise using svc succeeded"
	else
		echo "  testing restarting of supervise using svc failed"
		shutdown_svscan $svpid
		exit 1
	fi
}

function test_multilog()
{
	grep "HELO <argos.indimail.org> MAIL from <mbhangui@argos.indimail.org> RCPT <mbhangui@argos.indimail.org> AUTH <local-rcpt> Size: .* TLS=TLSv1.3" $logdir/smtpd/current >/dev/null
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing logging using multilog succeeded"
	else
		echo "  testing logging using multilog failed"
		shutdown_svscan $svpid
		exit 1
	fi
}

function test_blocked()
{
	if [ $# -eq 0 ] ; then
		swaks -S --to blocked@$HOSTNAME --server localhost --port 2025 --tls-on-connect >/dev/null
	else
		swaks -S --to $user@$HOSTNAME  --from blocked@$HOSTNAME -server localhost --port 2025 --tls-on-connect >/dev/null
	fi
	if [ $? -eq 0 ] ; then
		if [ $# -eq 0 ] ; then
			echo "  testing badrcptto failed"
		else
			echo "  testing badmailfrom failed"
		fi
		shutdown_svscan $svpid
		exit 1
	else
		if [ $# -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing badrcptto succeeded"
		else
			tcount=$(expr $tcount + 1)
			echo "  testing badmailfrom succeeded"
		fi
	fi
}

function setup_svscan_with_svscanlog()
{
	echo
	echo "Starting svscan services with svscanlog"
	sudo /bin/rm -rf $logdir/svscan
	mkdir -p $logdir/svscan
	sudo /bin/rm -f $testdir/svscan.out
	mkdir -p $servicedir/.svscan/log
	mkdir -p $servicedir/.svscan/variables
	printf "#!/bin/sh\nexec echo hello world > $testdir/svscan.out\n" > $servicedir/.svscan/run
	printf "#!/bin/sh\nexec echo goodbye world > $testdir/svscan.out\n" > $servicedir/.svscan/shutdown
	printf "#!/bin/sh\nexec /usr/sbin/multilog t $logdir/svscan\n" > $servicedir/.svscan/log/run
	chmod +x $servicedir/.svscan/run
	chmod +x $servicedir/.svscan/shutdown
	chmod +x $servicedir/.svscan/log/run
	echo 1 > $servicedir/.svscan/variables/DISABLE_RUN
	echo 1 > $servicedir/.svscan/variables/SCANLOG
	echo 1 > $servicedir/.svscan/variables/SILENT
	echo   > $servicedir/.svscan/variables/INITCMD
	echo "/bin:/usr/sbin" > $servicedir/.svscan/variables/PATH
	#SMTPS
}

function start_svscan_with_svscanlog()
{
	(
	cd $servicedir/.svscan
	exec sudo envdir -c variables /usr/sbin/svscan $servicedir
	) &
	sleep $sleep_int
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	sudo kill -0 $svpid
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing svscan (with svscanlog) startup succeeded"
	else
		echo "  testing svscan (with svscanlog) startup failed"
		shutdown_svscan $svpid
		exit 1
	fi
}

function test_svscan_log()
{
	grep "@.* svscan: info: pid: .*: starting..." $logdir/svscan/current >/dev/null
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing svscan log succeeded"
	else
		echo "  testing svscan log failed"
		shutdown_svscan $svpid
		exit 1
	fi
}

function test_svscan_run()
{
	if [ "$(cat $testdir/svscan.out 2>/dev/null)" = "hello world" ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing svscan run script execution succeeded"
	else
		echo "  testing svscan run script execution failed"
		shutdown_svscan $svpid
		exit 1
	fi
}

function test_svscan_shutdown()
{
	shutdown_svscan $svpid
	if [ "$(cat $testdir/svscan.out 2>/dev/null)" = "goodbye world" ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing svscan shutdown script execution succeeded"
	else
		echo "  testing svscan shutdown script execution failed"
		shutdown_svscan $svpid
		exit 1
	fi
}

function start_new_service()
{
	sudo /bin/rm -rf $servicedir/sleep
	/bin/rm -f $testdir/sleep.out
	mkdir -p $servicedir/sleep/log
	printf "#!/bin/sh\nexec sleep 2243\n" > $servicedir/sleep/run
	printf "#!/bin/sh\nexec /usr/sbin/multilog t $logdir/sleep\n" > $servicedir/sleep/log/run
	printf "#!/bin/sh\nexec echo shutdown sleep service > $testdir/sleep.out\n" > $servicedir/sleep/shutdown
	chmod +x $servicedir/sleep/run
	chmod +x $servicedir/sleep/log/run
	chmod +x $servicedir/sleep/shutdown
	if [ $# -eq 0 ] ; then
		sudo kill -1 $svpid
		sleep 5
	else
		sleep 6
	fi
	sudo svok $servicedir/sleep
	if [ $? -eq 0 ] ; then
		if [ $# -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing starting of supervise for new service by sending hup to svscan succeeded"
		else
			tcount=$(expr $tcount + 1)
			echo "  testing starting of supervise for new service using svscan autoscan succeeded"
		fi
	else
		if [ $# -eq 0 ] ; then
			echo "  testing starting of supervise for new service by sending hup to svscan failed"
		else
			echo "  testing starting of supervise for new service using svscan autoscan failed"
		fi
		shutdown_svscan $svpid
		exit 1
	fi
	ps -ef |grep "sleep 2243"|grep -v grep > /dev/null
	if [ $? -eq 0 ] ; then
		if [ $# -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing starting of new service by sending hup to svscan succeeded"
		else
			tcount=$(expr $tcount + 1)
			echo "  testing starting of new service using svscan autoscan succeeded"
		fi
	else
		if [ $# -eq 0 ] ; then
			echo "  testing starting of new service by sending hup to svscan failed"
		else
			echo "  testing starting of new service using svscan autoscan failed"
		fi
		shutdown_svscan $svpid
		exit 1
	fi
	sudo svc -d $servicedir/sleep
	sleep $sleep_int
	ps -ef |grep "sleep 2243"|grep -v grep > /dev/null
	if [ $? -eq 0 ] ; then
		echo "  testing stopping of new service failed"
		shutdown_svscan $svpid
		exit 1
	else
		tcount=$(expr $tcount + 1)
		echo "  testing stopping of new service succeeded"
	fi
	if [ "$(cat $testdir/sleep.out 2>/dev/null)" = "shutdown sleep service" ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing shutdown script of new service succeeded"
	else
		echo "  testing shutdown script of new service failed"
		shutdown_svscan $svpid
		exit 1
	fi
}

function remove_new_service()
{
	mv $servicedir/sleep $servicedir/.sleep
	sudo svc -dx $servicedir/.sleep $servicedir/.sleep/log
	sleep $sleep_int
	ps -ef |grep -E "sleep 2243|sleep 2244"|grep -v grep > /dev/null
	if [ $? -eq 0 ] ; then
		echo "  testing removal of new service failed"
		shutdown_svscan $svpid
		exit 1
	else
		sudo /bin/rm -rf $servicedir/.sleep
		tcount=$(expr $tcount + 1)
		echo "  testing removal of new service succeeded"
	fi
}

function test_supervise_subreaper()
{
	printf "#!/bin/sh\nsleep 2244 &\n" > $servicedir/sleep/run
	chmod +t $servicedir/sleep/run
	sudo svc -u $servicedir/sleep
	sleep $sleep_int
	ps ajx |grep "sleep 2244"|grep -v grep > /dev/null
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing starting of new service in supbreaper mode succeeded"
	else
		echo "  testing starting of new service in supbreaper mode failed"
		shutdown_svscan $svpid
		exit 1
	fi
	pgid=$(ps ajx|grep "sleep 2244"|grep -v grep|awk '{print $3}')
	if [ $pgid -ne $$ ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing setting of PGID ($pgid != $$) in subreaper mode succeeded"
	else
		echo "  testing setting of PGID ($pgid = $$) in subreaper mode failed"
	fi
	sudo svc -d $servicedir/sleep
	sleep $sleep_int
	ps -ef |grep "sleep 2244"|grep -v grep > /dev/null
	if [ $? -eq 0 ] ; then
		echo "  testing stopping of new service in subreaper mode failed"
		shutdown_svscan $svpid
		exit 1
	else
		tcount=$(expr $tcount + 1)
		echo "  testing stopping of new service in subreaper mode succeeded"
	fi
}

function test_recipients()
{
	/bin/rm -f $servicedir/smtpd/variables/SMTPS
	(
	echo "apollo.indimail.org"
	echo "mediacenter.indimail.org"
	echo "nocheck.com"
	) >> $cntrldir/rcpthosts
	echo           3 > $servicedir/smtpd/variables/CHECKRECIPIENT
	echo $sysconfdir > $servicedir/smtpd/variables/SYSCONFDIR
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int

	(
	echo "!nocheck.com"
	echo "@argos.indimail.org:users/recipients.cdb"
	echo "indimail.org:users/extra.cdb"
	echo "*:users/recipients.cdb"
	echo "users/legacy.cdb"
	) > $cntrldir/recipients

	(
	echo user1@argos.indimail.org
	echo user2@mediacenter.indimail.org
	) > $sysconfdir/users/recipients

	echo user1@apollo.indimail.org > $sysconfdir/users/extra
	echo user3@apollo.indimail.org > $sysconfdir/users/legacy
	env SYSCONFDIR=$sysconfdir qmail-cdb -r
	r1=$?
	env SYSCONFDIR=$sysconfdir qmail-cdb -r extra
	r2=$?
	env SYSCONFDIR=$sysconfdir qmail-cdb -r legacy
	r3=$?
	if [ $r1 -eq 0 -a $r2 -eq 0 -a $r3 -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing qmail-cdb succeeded"
	else
		echo "  testing qmail-cdb failed"
		shutdown_svscan $svpid
	fi

	(
	echo "#!/bin/sh"
	echo "exec 0<&6"
	echo "exec 1>&7"
	echo "read key"
	echo "greeting=\$(echo \$key | awk '{print \$1}')"
	echo "if [ \$greeting -ne 220 ] ; then"
	echo "	echo \"Greeting failed\" 1>&2"
	echo "	printf \"QUIT\r\n\""
	echo "fi"
	echo "printf \"EHLO\r\n\""
	echo "while true"
	echo "do"
	echo "	read line"
	echo "	echo \$line |grep \"250 \" >/dev/null"
	echo "	if [ \$? -eq 0 ] ; then"
	echo "		echo \$line 1>&2"
	echo "		break"
	echo "	fi"
	echo "	echo \$line 1>&2"
	echo "done"
	echo "printf \"MAIL FROM:<$user@$HOSTNAME>\r\n\" 1>&2"
	echo "printf \"MAIL FROM:<$user@$HOSTNAME>\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "code=\$(echo \$key |cut -c1-3)"
	echo "if [ \$code -ne 250 ] ; then"
	echo "	echo \"MAIL From failed: code=\$code\" 1>&2"
	echo "	exit 1"
	echo "fi"
	for i in user1@nocheck.com user1@argos.indimail.org user1@apollo.indimail.org user2@mediacenter.indimail.org user3@argos.indimail.org user3@apollo.indimail.org
	do
		echo "printf \"RCPT TO:<$i>\r\n\" 1>&2"
		echo "printf \"RCPT TO:<$i>\r\n\""
		echo "read key"
		echo "echo \$key 1>&2"
		echo "code=\$(echo \$key |cut -c1-3)"
		echo "if [ \$code -ne 250 ] ; then"
		if [ "$i" = "user3@argos.indimail.org" ] ; then
		echo "	if [ \"$i\" != \"user3@argos.indimail.org\" ] ; then"
		echo "		echo \"RCPT To failed: code=\$code\" 1>&2"
		echo "		exit 1"
		echo "	fi"
		else
		echo "	echo \"RCPT To failed: code=\$code\" 1>&2"
		echo "	exit 1"
		fi
		echo "fi"
	done
	echo "printf \"QUIT\r\n\" 1>&2"
	echo "printf \"QUIT\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "exit 0"
	) > $testdir/tcpclient.smtp
	chmod +x $testdir/tcpclient.smtp

	tcpclient -vDHR 0 2025 $testdir/tcpclient.smtp > $logdir/tcpclient/tcpclient.log 2>&1
	status1=$?
	sed -i '72d;75d' $testdir/tcpclient.smtp 
	echo "!*" >> $cntrldir/recipients
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int

	tcpclient -vDHR 0 2025 $testdir/tcpclient.smtp >> $logdir/tcpclient/tcpclient.log 2>&1
	status2=$?
	if [ $status1 -eq 0 -a $status2 -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing recipient extension succeeded"
	else
		echo "  testing recipient extension failed"
		shutdown_svscan $svpid
		exit 1
	fi
}

function do_setup()
{
	# basic setup for maildir, assign config and queue
	sudo /bin/rm -rf $logdir
	mkdir -p $logdir/setup
	mkdir -p $logdir/qmail-remote
	mkdir -p $logdir/mail
	mkdir -p $logdir/tcpclient
	mkdir -p $logdir/qmail-send
	mkdir -p $logdir/svscan
	mkdir -p $logdir/smtpd
	(
	setup_maildir
	setup_assign
	setup_config
	setup_queue
	) > $logdir/setup/setup.log 2>&1
}

function do_without_svscan()
{
	# use qmail-start to start qmail-send
	run_qmail_send
	send_pid=$(get_send_pid)
	do_qmail_inject

	# start smtp using tcpserver
	start_tcpserver_smtp
	create_authsmtp
	smtp_pid=$(/bin/ps -ef|grep 2025|grep -v sudo|grep qmail-smtpd|awk '{print $2}')
	sleep $sleep_int
	test_qmail_remote_auth "PLAIN"
	test_qmail_remote_auth "LOGIN"
	test_qmail_remote_auth "CRAM-MD5"
	test_qmail_remote_routing
	test_qmail_remote_auth_cdb
	test_smtp_tls
	test_smtp_notls
	test_smtp_auth_login
	test_smtp_auth_plain
	test_smtp_auth_cram_md5
	test_tcpclient_script # test smtp using tcpclient
	terminate_smtp $smtp_pid

	# start smtps using tcpserver
	start_tcpserver_smtps
	smtp_pid=$(/bin/ps -ef|grep 2025|grep -v sudo|grep qmail-smtpd|awk '{print $2}')
	test_smtps "testing mail using SMTPS by qmail-smtpd"
	test_tcpclient_script 1 # test smtps using tcpclient
	terminate_smtp $smtp_pid

	# terminate qmail-send
	terminate_send $send_pid
}

function do_svscan_without_svscanlog()
{
	# start svscan without svscanlog
	setup_svscan_without_svscanlog
	start_svscan_without_svscanlog
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	test_smtps "testing mail using SMTPS by qmail-smtpd"
	test_recipients
	test_stop_smtps
	test_stop_supervise
	test_restart_service_using_hup
	test_restart_service_using_svc
	test_multilog
	start_new_service
	remove_new_service
	shutdown_svscan $svpid
}

function do_svscan_with_svscanlog()
{
	# start svscan with svscanlog
	setup_svscan_with_svscanlog
	printf "#!/bin/sh\nexec envdir ./variables $tcpserver -n $certdir/servercert.pem -u qmaild -g qmail -v -HR 0 2025 $qmail_smtpd 2>&1\n" > $servicedir/smtpd/run
	/bin/rm -f $servicedir/smtpd/variables/SMTPS
	start_svscan_with_svscanlog
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	test_svscan_log
	test_svscan_run
	test_smtps "testing mail using SMTPS by tcpserver"
	test_svscan_shutdown

	# start svscan with svscanlog and AUTOSCAN
	echo 1 > $servicedir/.svscan/variables/AUTOSCAN
	echo 5 > $servicedir/.svscan/variables/SCANINTERVAL
	echo 1 > $servicedir/smtpd/variables/SMTPS
	printf "#!/bin/sh\nexec envdir ./variables $tcpserver -u qmaild -g qmail -v -HR 0 2025 $qmail_smtpd 2>&1\n" > $servicedir/smtpd/run
	start_svscan_with_svscanlog
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	start_new_service 1
	test_supervise_subreaper
	remove_new_service
	test_blocked
	test_blocked 1
	shutdown_svscan $svpid
}

do_setup
do_without_svscan
do_svscan_without_svscanlog
do_svscan_with_svscanlog

wait
# Cleanup
sudo /bin/rm -rf $servicedir
sudo /bin/rm -rf $logdir
sudo /bin/rm -rf $testdir/queue
sudo /bin/rm -rf $testdir/sleep.out
sudo /bin/rm -rf $testdir/svscan.out
sudo /bin/rm -rf $sysconfdir/users
echo
echo "All $tcount tests succeeded"
exit 0
