#!/bin/sh
#
# $Id: test-indimail-mta,v 1.35 2023-10-16 20:55:17+05:30 Cprogrammer Exp mbhangui $
#
start=$(date +'%s')
user=$(whoami)
testuser=tuser
myuid=$(id -u)
mygid=$(id -g)
real_domain=argos.indimail.org
srs_domain=srs.indimail.org
vdomain=virtual.indimail.org
ext_domain=gmail.com
dkim_key=/etc/indimail/control/domainkeys/$real_domain/$(echo $real_domain | cut -d. -f1)
#
#
verbose=0
testdir=/tmp/qmail-test
maildir=$testdir/$user/Maildir
servicedir=$testdir/service
sysconfdir=$testdir/etc/indimail
cntrldir=$sysconfdir/control
certdir=$sysconfdir/certs
qmaildir=$testdir/indimail
logdir=$testdir/logs
bindir=/usr/bin
sbindir=/usr/sbin
libexecdir=/usr/libexec/indimail
qmail_newu=$sbindir/qmail-newu
qmail_start=$sbindir/qmail-start
qmail_inject=$bindir/qmail-inject
qmail_smtpd=$sbindir/qmail-smtpd
qmail_qmqpd=$sbindir/qmail-qmqpd
qmail_qmtpd=$sbindir/qmail-qmtpd
qmail_qmqpc=$sbindir/qmail-qmqpc
qmail_remote=$sbindir/qmail-remote
qmail_getpw=$sbindir/qmail-getpw
svctool=$sbindir/svctool
setuidgid=$bindir/setuidgid
tcpserver=$bindir/tcpserver
e822header=$bindir/822header
e822body=$bindir/822body
qmail_queue=$sbindir/qmail-queue
dkim=$bindir/dkim
qmail_dkim=$sbindir"/qmail-dkim"
dk_filter=$bindir/dk-filter
dknewkey=$bindir/dknewkey
bogofilter=$bindir/bogofilter
srsfilter=$bindir/srsfilter
filterit=/bin/filterit
autoresponder=$bindir/autoresponder
envdir=$bindir/envdir
multilog=$sbindir/multilog
s_nail=/usr/bin/s-nail
smtp_port=2050
qmqp_port=2628
qmtp_port=2209
smtp_socket=$testdir/run/smtpd
sleep_int=0.5
HOSTNAME=$(uname -n)
domainkey_dir=$cntrldir/domainkeys
real_domain_rsa2048=/etc/indimail/control/domainkeys/argos.indimail.org/argos
real_domain_rsa4096=/etc/indimail/control/domainkeys/argos.indimail.org/b4096
real_domain_ed25519=/etc/indimail/control/domainkeys/argos.indimail.org/ed25519
nokeyerror=35
out=/dev/null

trap do_cleanup_failed 2 EXIT

print_pct()
{
	pct=$(echo $tcount $total_tests | awk '{printf("%0.2f\n", ($1 * 100)/$2)}')
	printf "%90s Test No %5d [%6.2f   %%]" " " $tcount $pct
}

do_cleanup_failed()
{
	if [ $failed -eq 0 ] ; then
		return 0
	fi
	svpid=$(sed -n '$p' $servicedir/.svscan.pid 2>/dev/null)
	if [ -n "$svpid" ] ; then
		shutdown_svscan
		sleep $sleep_int
	else
		smtp_pid=$(/bin/ps -ef|grep $smtp_port|grep qmail-smtpd|awk '{print $2}')
		if [ -z "$smtp_pid" ] ; then
			smtp_pid=$(/bin/ps -ef|grep $smtp_socket|grep qmail-smtpd|awk '{print $2}')
		fi
		if [ -n "$smtp_pid" ] ; then
			terminate_smtp_qmtp $smtp_pid
			sleep $sleep_int
		fi
		send_pid=$(get_send_pid)
		if [ -n "$send_pid" ] ; then
			terminate_send $send_pid
			sleep $sleep_int
		fi
	fi
	sudo /bin/rm -rf $servicedir
	sudo /bin/rm -rf $logdir
	sudo /bin/rm -rf $testdir/queue
	sudo /bin/rm -rf $testdir/bin
	sudo /bin/rm -rf $testdir/tmp
	sudo /bin/rm -rf $testdir/run
	sudo /bin/rm -rf $testdir/sleep.out
	sudo /bin/rm -rf $testdir/svscan.out
	sudo /bin/rm -rf $testdir/tcpclient.smtp
	sudo /bin/rm -rf $testdir/.vacation.dir/*
	sudo /bin/rm -rf $testdir/.vacation.msg
	sudo /bin/rm -rf $testdir/$user/Maildir/new/*
	sudo /bin/rm -rf $testdir/$testuser/Maildir/new/*
	sudo /bin/rm -rf $testdir/$testuser/Maildir/.Quarantine
	sudo /bin/rm -rf $testdir/$testuser/Maildir/.Spam
	sudo /bin/rm -rf $qmaildir/alias/Maildir/new/*
	sudo /bin/rm -rf $qmaildir/alias/virtual/new/* $qmaildir/alias/virtual/cur/*
	sudo /bin/rm -rf $sysconfdir/users
}

check_mail_count()
{
	no_delete=0
	tx1=$(date +"%s.%4N")
	if [ $# -ne 2 ] ; then
		echo "check_mail_count dir count" 1>&2
		failed=1
		exit 1
	fi
	dir=$1
	count=0
	ret=1
	while true
	do
		mcount=$(ls $dir/new/* $dir/cur/* 2>/dev/null | wc -l)
		if [ $mcount -eq $2 ] ; then
			break
		fi
		sleep 0.5
		count=$(expr $count + 1)
		if [ $count -gt 10 ] ; then
			echo "check_mail_count: count=$count: Failed to receive Mail" 1>&2
			return 1
		fi
	done
	tx2=$(date +"%s.%4N")
	sleep_secs=$(echo $tx1 $tx2 | awk '{printf("%0.4f\n", $2-$1)}')
	return 0
}

check_mail()
{
	no_delete=0
	tx1=$(date +"%s.%4N")
	if [ $# -eq 0 ] ; then
		dir=$maildir
	elif [ $# -eq 1 ] ; then
		dir=$1
	elif [ $# -eq 2 ] ; then
		dir=$1
		no_delete=1
	fi
	count=0
	ret=1
	while true
	do
		mcount=$(ls $dir/new 2>/dev/null | wc -l)
		if [ $mcount -gt 0 ] ; then
			mail_file=$(ls -lt $dir/new|head -2|tail -1|awk '{print $9}')
			if [ $no_delete -eq 0 ] ; then
				/bin/rm -f $dir/new/$mail_file
			fi
			break
		fi
		sleep 0.5
		count=$(expr "$count" + 1)
		if [ $count -gt 10 ] ; then
			echo "check_mail: Failed to receive Mail" 1>&2
			return 1
		fi
	done
	tx2=$(date +"%s.%4N")
	sleep_secs=$(echo $tx1 $tx2 | awk '{printf("%0.4f\n", $2-$1)}')
	if [ $no_delete -eq 0 ] ; then
		mail_file=$(ls -lt $dir/new|head -2|tail -1|awk '{print $9}')
	fi
	return 0
}

check_mail_header()
{
	if [ $# -lt 2 ] ; then
		echo "check_mail_header maildir string delete" 1>&2
		return 1
	fi
	dir=$1
	str=$2

	count=0
	ret=1
	tx1=$(date +"%s.%4N")
	header=""
	mail_file=""
	while true
	do
		mcount=$(ls $dir/new | wc -l)
		if [ $mcount -gt 0 ] ; then
			mail_file=$(ls -lt $dir/new|head -2|tail -1|awk '{print $9}')
			break
		fi
		sleep 0.5
		count=$(expr "$count" + 1)
		if [ $count -gt 10 ] ; then
			echo "Failed to receive Mail" 1>&2
			return 1
		fi
	done
	tx2=$(date +"%s.%4N")
	sleep_secs=$(echo $tx1 $tx2 | awk '{printf("%0.4f\n", $2-$1)}')
	sudo chmod 644 $dir/new/$mail_file
	header=$($e822header -I $str < $dir/new/$mail_file)
	if [ $# -eq 3 ] ; then
		if [ $3 -eq 1 ] ; then
			sudo /bin/rm -f $dir/new/$mail_file
		fi
	fi
	mail_file=$(ls -lt $dir/new|head -2|tail -1|awk '{print $9}')
	return 0
}

remove_mail()
{
	if [ -d $maildir ] ; then
		find $maildir -type f -exec /bin/rm -f {} \;
	fi
	if [ -d $testdir/$testuser/Maildir ] ; then
		find $testdir/$testuser/Maildir -type f -exec /bin/rm -f {} \;
	fi
}

shutdown_svscan()
{
	tx1=$(date +"%s.%4N")
	count=0
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	while true
	do
		if [ -z "$svpid" -o ! -f $servicedir/.svscan.pid ] ; then
			break
		fi
		sudo kill $svpid
		sleep 0.5
		count=$(expr $count + 1)
		if [ $count -gt 10 ] ; then
			if [ -d $servicedir/.svscan/log ] ; then
				sudo svc -dx $servicedir/* $servicedir/*/log $servicedir/.svscan/log
			else
				sudo svc -dx $servicedir/* $servicedir/*/log
			fi
			echo "shutdown_svscan: count=$count: Failed to stop svsan" 1>&2
			return 1
		fi
	done
	if [ -d $servicedir/.svscan/log ] ; then
		sudo svc -dx $servicedir/* $servicedir/*/log $servicedir/.svscan/log
	else
		sudo svc -dx $servicedir/* $servicedir/*/log
	fi
	tx2=$(date +"%s.%4N")
	sleep_secs=$(echo $tx1 $tx2 | awk '{printf("%0.4f\n", $2-$1)}')
	return 0
}

setup_maildir()
{
	if [ -d $maildir ] ; then
		find $maildir -type f -exec /bin/rm -f {} \;
	fi
	if [ -d $testdir/$testuser/Maildir ] ; then
		find $testdir/$testuser/Maildir -type f -exec /bin/rm -f {} \;
	fi
	if [ -d $qmaildir/alias/Maildir ] ; then
		sudo find $qmaildir/alias/Maildir -type f -exec /bin/rm -f {} \;
	fi
	mkdir -p $cntrldir
	mkdir -p $sysconfdir/users
	for i in cur new tmp
	do
		mkdir -p $maildir/$i
		mkdir -p $testdir/$testuser/Maildir/$i
		mkdir -p $testdir/$testuser/Maildir/.Quarantine/$i
		mkdir -p $testdir/$testuser/Maildir/.Spam/$i
	done
}

setup_assign()
{
	t1=$(date +"%s.%4N")
	(
	echo "=$user:$user:$myuid:$mygid:$testdir/$user:::"
	echo "+$user-:$user:$myuid:$mygid:$testdir/$user:-::"
	echo "=$testuser:$testuser:$myuid:$mygid:$testdir/$testuser:::"
	echo "+$testuser-:$testuser:$myuid:$mygid:$testdir/$testuser:-::"
	echo "."
	) > $sysconfdir/users/assign
	$qmail_newu $sysconfdir/users
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing create assign/user.cdb succeeded %61s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		printf "\r  testing create assign/user.cdb failed [%.4f sec]\n" $secs
		failed=1
		exit 1
	fi
}

setup_queue()
{
	t1=$(date +"%s.%4N")
	sudo queue-fix -s 23 -b 0 $testdir/queue
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing create qmail queue succeeded %65s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing create qmail queue failed [%.4f sec]\n" $secs
		failed=1
		exit 1
	fi
}

setup_config()
{
	t1=$(date +"%s.%4N")
	mkdir -p $testdir/setup
	(
	env CONTROLDIR=$cntrldir config-fast $HOSTNAME
	mkdir -p $qmaildir/alias
	sudo env QmailHOME=$qmaildir $svctool --cntrldir=$cntrldir --config=qmail \
		--postmaster=$user@$HOSTNAME
	sudo chown alias:qmail $qmaildir/alias
	sudo chmod 775 $qmaildir/alias
	)>$testdir/setup/setup.log 2>&1
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing qmail configuration succeeded %64s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		(
		printf "\r  testing qmail configuration failed [%.4f sec]\n" $secs
		cat $testdir/setup/setup.log
		)|less
		failed=1
		exit 1
	fi
	if [ ! -f $certdir/servercert.pem ] ; then
		t1=$(date +"%s.%4N")
		sudo $svctool --certdir=$certdir    --config=cert \
			--postmaster=postmaster@$HOSTNAME --common_name=$HOSTNAME >$testdir/setup/setup.log 2>&1
		if [ -f $certdir/servercert.pem ] ; then
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			tcount=$(expr $tcount + 1)
			printf "\r  testing create self signed certificate succeeded %53s [%.4f sec]\n" " " $secs
			print_pct
		else
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			tcount=$(expr $tcount + 1)
			(
			printf "\r  testing create self signed certificate failed [%.4f sec]\n" $secs
			cat $testdir/setup/setup.log
			)|less
			failed=1
			exit 1
		fi
	fi
	if [ ! -f $sysconfdir/bogofilter.cf ] ; then
		t1=$(date +"%s.%4N")
		cp /etc/indimail/bogofilter.cf.example $sysconfdir
		sudo $svctool --sysconfdir=$sysconfdir --config=bogofilter
		if [ -f $sysconfdir/bogofilter.cf ] ; then
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			tcount=$(expr $tcount + 1)
			printf "\r  testing Create bogofilter configuration succeeded %52s [%.4f sec]\n" " " $secs
			print_pct
		else
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			tcount=$(expr $tcount + 1)
			printf "\r  testing Create bogofilter configuration failed [%.4f sec]\n" $secs
		fi
	fi
	sudo chown -R $user $cntrldir
	tr -dc 'A-Za-z0-9' </dev/urandom | head -c 16 > $cntrldir/batvkey
	echo ./Maildir/                           > $cntrldir/defaultdelivery
	echo TLSv1_2:TLSv1_3                      > $cntrldir/tlsclientmethod
	echo TLSv1_2:TLSv1_3                      > $cntrldir/tlsservermethod
	echo blocked@$HOSTNAME                    > $cntrldir/badmailfrom
	echo blocked@$HOSTNAME                    > $cntrldir/badrcptto
	echo 10                                   > $cntrldir/timeoutremote
	echo 10                                   > $cntrldir/timeoutsmtpd
	(
	echo @$ext_domain
	echo @$HOSTNAME
	echo @$srs_domain
	)                                         > $cntrldir/nodnscheck
}

test_tcpclient_script()
{
	t1=$(date +"%s.%4N")
	(
	echo "#!/bin/sh"
	echo "exec 0<&6"
	echo "exec 1>&7"
	echo "read key"
	echo "greeting=\$(echo \$key | awk '{print \$1}')"
	echo "if [ \$greeting -ne 220 ] ; then"
	echo "	echo \"Greeting failed\" 1>&2"
	echo "	printf \"QUIT\r\n\""
	echo "fi"
	echo "printf \"EHLO\r\n\""
	echo "while true"
	echo "do"
	echo "	read line"
	echo "	echo \$line |grep \"250 \" >/dev/null"
	echo "	if [ \$? -eq 0 ] ; then"
	echo "		echo \$line 1>&2"
	echo "		break"
	echo "	fi"
	echo "	echo \$line 1>&2"
	echo "done"
	echo "printf \"MAIL FROM:<$user@$HOSTNAME>\r\n\" 1>&2"
	echo "printf \"MAIL FROM:<$user@$HOSTNAME>\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "code=\$(echo \$key |cut -c1-3)"
	echo "if [ \$code -ne 250 ] ; then"
	echo "	echo \"MAIL From failed: code=\$code\" 1>&2"
	echo "	exit 1"
	echo "fi"
	echo "printf \"RCPT TO:<$user@$HOSTNAME>\r\n\" 1>&2"
	echo "printf \"RCPT TO:<$user@$HOSTNAME>\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "code=\$(echo \$key |cut -c1-3)"
	echo "if [ \$code -ne 250 ] ; then"
	echo "	echo \"RCPT To failed: code=\$code\" 1>&2"
	echo "	exit 1"
	echo "fi"
	echo "printf \"DATA\r\n\" 1>&2"
	echo "printf \"DATA\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "code=\$(echo \$key |cut -c1-3)"
	echo "if [ \$code -ne 354 ] ; then"
	echo "	echo \"DATA command: code=\$code\" 1>&2"
	echo "	exit 1"
	echo "fi"
	echo "printf \"To: $user@$HOSTNAME\r\n\" 1>&2"
	echo "printf \"To: $user@$HOSTNAME\r\n\""
	echo "printf \"From: $user@$HOSTNAME\r\n\" 1>&2"
	echo "printf \"From: $user@$HOSTNAME\r\n\""
	echo "printf \"Subject: Test Message\r\n\" 1>&2"
	echo "printf \"Subject: Test Message\r\n\""
	echo "printf \"Date: \$(date -R)\r\n\" 1>&2"
	echo "printf \"Date: \$(date -R)\r\n\""
	echo "printf \"\r\n\" 1>&2"
	echo "printf \"\r\n\""
	echo "printf \"This is a test message\r\n\" 1>&2"
	echo "printf \"This is a test message\r\n\""
	echo "printf \".\r\n\" 1>&2"
	echo "printf \".\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "code=\$(echo \$key |cut -c1-3)"
	echo "if [ \$code -ne 250 ] ; then"
	echo "	echo \"SMTP Transaction failed: code=\$code\" 1>&2"
	echo "	exit 1"
	echo "fi"
	echo "printf \"QUIT\r\n\" 1>&2"
	echo "printf \"QUIT\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "exit 0"
	) > $testdir/tcpclient.smtp
	chmod +x $testdir/tcpclient.smtp
	case $1 in
		1)
		tcpclient -vDHR 0 $smtp_port $testdir/tcpclient.smtp > $logdir/tcpclient/tcpclient.log 2>&1
		;;
		2)
		if [ $# -eq 2 ] ; then
			tcpclient -M $2 -vDHRn $certdir/servercert.pem 0 \
				$smtp_port $testdir/tcpclient.smtp > $logdir/tcpclient/tcpclient.log 2>&1
		else
			tcpclient -vDHRn $certdir/servercert.pem 0 \
				$smtp_port $testdir/tcpclient.smtp > $logdir/tcpclient/tcpclient.log 2>&1
		fi
		;;
		3)
		tcpclient -v $smtp_socket $testdir/tcpclient.smtp > $logdir/tcpclient/tcpclient.log 2>&1
		;;
		4)
		tcpclient -vn $certdir/servercert.pem $smtp_socket $testdir/tcpclient.smtp \
			> $logdir/tcpclient/tcpclient.log 2>&1
		;;
	esac
	/bin/rm -f $testdir/tcpclient.smtp
	if [ $# -eq 2 ] ; then
		tls="$2"
	else
		tls="auto"
	fi
	check_mail
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing mail doing SMTP with tcpclient TLS=%-7s succeeded %41s [%.4f sec]\n" "$tls" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing mail doing SMTPS with tcpclient TLS=$tls failed [$secs sec]"
		echo "tcpclient.log"
		cat $logdir/tcpclient/tcpclient.log
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		)|less
		failed=1
		exit 1
	fi
}

run_qmail_send()
{
	(
	echo "#!/bin/sh"
	echo "uid=\$(grep \"^\$1\" $testdir/etc/passwd |awk -F: '{print \$3}')"
	echo "if [ -z \"\$uid\" -o \"\$uid\" = \"0\" ] ; then"
	echo "  l=\$(grep \"^alias:\" /tmp/qmail-test/etc/passwd | awk -F: '{print \$1\" \"\$3\" \"\$4\" \"\$6}')"
	echo "  echo \$l \$1 | awk '{print \$1\"\\0\"\$2\"\\0\"\$3\"\\0\"\$4\"\\0-\\0\"\$5\"\\0\"}'"
	echo "else"
	echo "  grep \"^\$1:\" $testdir/etc/passwd |awk -F: '{print \$1\"\\0\"\$3\"\\0\"\$4\"\\0\"\$6\"\\0\\0\\0\"}'"
	echo "fi"
	echo "if [ \$? -eq 0 ] ; then"
	echo "  exit 0"
	echo "else"
	echo "  exit 100"
	echo "fi"
	) > $testdir/bin/qmail-getpw
	chmod 755 $testdir/bin/qmail-getpw
	create_qmail_remote $testuser@$HOSTNAME
	(
	exec 1>$logdir/qmail-send/qmail-send.log
	exec 2>$logdir/qmail-send/qmail-send.log
	exec 0<&2
	sudo env - \
		PATH=/bin:/usr/sbin \
		BIGTODO=0 \
		USE_QPWGR=1 \
		CONTROLDIR=$cntrldir \
		CERTDIR=$certdir \
		CONFSPLIT=23 \
		QMAILGETPW=$testdir/bin/qmail-getpw \
		QUEUEDIR=$testdir/queue \
		ASSIGNDIR=$sysconfdir/users \
		PASSWD_FILE=$testdir/etc/passwd \
		QMAILLOCAL=$sbindir/spawn-filter \
		QMAILREMOTE=$sbindir/spawn-filter \
		QREMOTE=$testdir/bin/qmail-remote \
		$qmail_start -s ./Maildir/
	) &
}

get_send_pid()
{
	count=0
	while true
	do
		send_pid=$(/bin/ps -ef | grep qmail-send |grep $testdir |grep -E -v "qmail-clean|grep" | awk '{print $2}')
		if [ -n "$send_pid" ] ; then
			break
		fi
		sleep 1
		count=$(expr $count + 1)
		if [ $count -gt 5 ] ; then
			if [ -f $logdir/qmail-send/qmail-send.log ] ; then
				cat $logdir/qmail-send/qmail-send.log 1>&2
				echo "Failed to start qmail-send" 1>&2
			fi
			return 1
		fi
	done
	echo $send_pid
}

test_qmail_inject()
{
	printf "\rStarting qmail-inject tests %89s\n" " "
	for i in 1 2
	do
		t1=$(date +"%s.%4N")
		if [ $i -eq 1 ] ; then
			(
			echo "=$testuser:$testuser:$myuid:$mygid:$testdir/$testuser:::"
			echo "+$testuser-:$testuser:$myuid:$mygid:$testdir/$testuser:-::"
			echo "."
			) > $sysconfdir/users/assign
		else
			(
			echo "=$user:$user:$myuid:$mygid:$testdir/$user:::"
			echo "+$user-:$user:$myuid:$mygid:$testdir/$user:-::"
			echo "=$testuser:$testuser:$myuid:$mygid:$testdir/$testuser:::"
			echo "+$testuser-:$testuser:$myuid:$mygid:$testdir/$testuser:-::"
			echo "."
			) > $sysconfdir/users/assign
		fi
		$qmail_newu $sysconfdir/users
		(
		echo "From: $2"
		echo "To: $3"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | sudo $setuidgid -g qcerts $1 env - \
			QUEUEDIR=$testdir/queue \
			QMAILQUEUE=$qmail_queue \
			CONTROLDIR=$cntrldir \
			BIGTODO=0 \
			CONFSPLIT=23 \
			$qmail_inject $3
		check_mail
		if [ $? -eq 0 ] ; then
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			tcount=$(expr $tcount + 1)
			if [ $i -eq 1 ] ; then
				printf "\r  testing qmail-inject /etc/passwd user, qmail send+receive succeeded %34s [%.4f sec]\n" " " $secs
			else
				printf "\r  testing qmail-inject qmail-user, qmail send+receive succeeded %40s [%.4f sec]\n" " " $secs
			fi
			print_pct
		else
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			(
			if [ $i -eq 1 ] ; then
				echo "  testing qmail-inject /etc/passwd user, qmail send+receive failed [$secs sec]"
			else
				echo "  testing qmail-inject qmail-user, qmail send+receive failed [$secs sec]"
			fi
			cat $logdir/qmail-send/qmail-send.log
			)|less
			failed=1
			exit 1
		fi
	done
}

create_authsmtp()
{
	if [ -f $testdir/bin/authsmtp ] ; then
		return 0
	fi
	(
	echo "#!/bin/sh"
	echo "if [ \$# -lt 1 ] ; then"
	echo "	exit 2"
	echo "fi"
	echo "var=\`tr [\"\\0\"] [\"\\n\"] 0<&3\`"
	echo "user=\`echo \$var | cut -d ' ' -f1\`"
	echo "pass=\`echo \$var | cut -d ' ' -f2\`"
	echo "exec 4>$testdir/tmp/authsmtp.\$\$ 3<$testdir/tmp/authsmtp.\$\$"
	echo "/bin/rm -f $testdir/tmp/authsmtp.\$\$"
	echo "echo \$var | tr [\" \"] [\"\\0\"] 1>&4"
	echo "if [ \"\$user\" = \"$user@$HOSTNAME\" -a \"\$pass\" = \"abcd12345678\" ] ; then"
	echo "	exit 0"
	echo "elif [ \"\$user\" = \"$testuser@$HOSTNAME\" -a \"\$pass\" = \"abcd87654321\" ] ; then"
	echo "	exit 0"
	echo "fi"
	echo "exec \$*"
	) > $testdir/bin/authsmtp
	chmod +x $testdir/bin/authsmtp
}

create_qmail_remote()
{
	# qmail-remote host sender qqeh size recip [ recip ... ]
	(
	echo "#!/bin/sh"
	echo "exec $qmail_remote $HOSTNAME \"\$2\" \"\$3\" \"\$4\" \"$1\""
	) > $testdir/bin/qmail-remote
	chmod +x $testdir/bin/qmail-remote
}

start_tcpserver_smtp()
{
	t1=$(date +"%s.%4N")
	(
	sudo env - \
		USE_QPWGR=1 \
		BIGTODO=0 \
		STARTTLS=1 \
		CONFSPLIT=23 \
		QUEUEDIR=$testdir/queue \
		CONTROLDIR=$cntrldir \
		CERTDIR=$certdir \
		ENABLE_CRAM=1 \
		DEBUG=1 \
		DEBUG_LOGIN=1 \
		QMAILQUEUE="$sbindir/qmail-dkim $sbindir/qmail-spamfilter" \
		SPAMFILTER="$bogofilter -p -d /etc/indimail" \
		SPAMEXITCODE=0 \
		REJECTSPAM=0 \
		MAKE_SEEKABLE=1 \
		DKIMVERIFY="" \
		$tcpserver -u qmaild -g qmail -HR 0 $smtp_port $qmail_smtpd $HOSTNAME \
			$testdir/bin/authsmtp /sbin/sys-checkpwd /bin/false
	) > $logdir/smtpd/smtpd.log 2>&1 &

	count=0
	tx1=$(date +"%s.%4N")
	while true
	do
		smtp_pid=$(/bin/ps -ef|grep -v sudo|grep $smtp_port|grep qmail-smtpd|awk '{print $2}')
		if [ -n "$smtp_pid" ] ; then
			break
		fi
		sleep 1
	done
	tx2=$(date +"%s.%4N")
	sleep_secs=$(echo $tx1 $tx2 | awk '{printf("%0.4f\n", $2-$1)}')
	sudo kill -0 $smtp_pid
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing SMTP on port %4d smtp_port using tcpserver succeeded %40s [%.4f sec]\n" $smtp_port " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing SMTP on port $smtp_port using tcpserver failed [$secs sec]"
		echo "$logdir/smtpd/smtpd.log"
		cat $logdir/smtpd/smtpd.log
		)|less
		failed=1
		exit 1
	fi
}

start_tcpserver_smtp_unix()
{
	t1=$(date +"%s.%4N")
	printf "\r%118s\n" " "
	printf "\rStarting SMTP on socket %s using tcpserver\n" $smtp_socket
	(
	env - \
		USE_QPWGR=1 \
		STARTTLS=1 \
		BIGTODO=0 \
		CONFSPLIT=23 \
		QUEUEDIR=$testdir/queue \
		CONTROLDIR=$cntrldir \
		CERTDIR=$certdir \
		ENABLE_CRAM=1 \
		DEBUG=1 \
		DEBUG_LOGIN=1 \
		QMAILQUEUE="$sbindir/qmail-dkim $sbindir/qmail-spamfilter" \
		SPAMFILTER="$bogofilter -p -d /etc/indimail" \
		SPAMEXITCODE=0 \
		REJECTSPAM=0 \
		MAKE_SEEKABLE=1 \
		DKIMVERIFY="" \
		$tcpserver $smtp_socket $qmail_smtpd $HOSTNAME \
			$testdir/bin/authsmtp /sbin/sys-checkpwd /bin/false
	) > $logdir/smtpd/smtpd.log 2>&1 &

	smtp_pid=$(/bin/ps -ef|grep $smtp_socket|grep qmail-smtpd|awk '{print $2}')
	kill -0 $smtp_pid
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing SMTP on socket %-26s using tcpserver succeeded %26s [%.4f sec]\n" $smtp_socket " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		(
		echo "  testing SMTP on socket $smtp_socket using tcpserver failed [$secs sec]"
		echo "$logdir/smtpd/smtpd.log"
		cat $logdir/smtpd/smtpd.log
		)|less
		failed=1
		exit 1
	fi
}

start_tcpserver_qmtp()
{
	t1=$(date +"%s.%4N")
	(
	sudo env - \
		USE_QPWGR=1 \
		BIGTODO=0 \
		STARTTLS=1 \
		CONFSPLIT=23 \
		QUEUEDIR=$testdir/queue \
		CONTROLDIR=$cntrldir \
		QMAILQUEUE="$sbindir/qmail-queue" \
		$tcpserver -u qmaild -g qmail -HR 0 $qmtp_port $qmail_qmtpd
	) > $logdir/qmtpd/qmtpd.log 2>&1 &

	count=0
	tx1=$(date +"%s.%4N")
	while true
	do
		qmtp_pid=$(/bin/ps -ef|grep -v sudo|grep $qmtp_port|grep qmail-qmtpd|awk '{print $2}')
		if [ -n "$qmtp_pid" ] ; then
			break
		fi
		sleep 1
	done
	tx2=$(date +"%s.%4N")
	sleep_secs=$(echo $tx1 $tx2 | awk '{printf("%0.4f\n", $2-$1)}')
	sudo kill -0 $qmtp_pid
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing QMTP on port %4d qmtp_port using tcpserver succeeded %40s [%.4f sec]\n" $qmtp_port " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing SMTP on port $smtp_port using tcpserver failed [$secs sec]"
		echo "$logdir/smtpd/qmtpd.log"
		cat $logdir/qmtpd/qmtpd.log
		)|less
		failed=1
		exit 1
	fi
}

test_smtp_tls()
{
	t1=$(date +"%s.%4N")
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port -tls
	check_mail
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing mail using SMTP with STARTTLS succeeded %54s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing mail using SMTP with STARTTLS failed [$secs sec]"
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		)|less
		failed=1
		exit 1
	fi
}

test_smtp_notls()
{
	t1=$(date +"%s.%4N")
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port
	check_mail
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing mail using SMTP without STARTTLS succeeded %51s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing mail using SMTP without STARTTLS failed [$secs sec]"
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		echo "qmail-send.log"
		cat $logdir/qmail-send/qmail-send.log
		)|less
		failed=1
		exit 1
	fi
}

test_smtp_dkimverify()
{
	t1=$(date +"%s.%4N")
	(
	echo "To: $user@$HOSTNAME"
	echo "From: $user@$real_domain"
	echo "Subject: Testing DKIM"
	echo "Date: $(date -R)"
	echo
	echo "This is an email to test DKIM"
	) > $testdir/mail1.txt
	(
	cat $testdir/mail1.txt|dkim -z 2 -s $dkim_key
	cat $testdir/mail1.txt && rm -f $testdir/mail1.txt
	) >$testdir/tmp/mail2.txt
	swaks --data - -n -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port < $testdir/tmp/mail2.txt
	check_mail_header $maildir "DKIM-Status" 1
	echo $header| grep "DKIM-Status: good" > /dev/null
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing mail using SMTP for DKIM verification succeeded %46s [%.4f sec]\n" " " $secs
		print_pct
		/bin/rm -f $testdir/tmp/mail1.txt $testdir/tmp/mail2.txt
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing mail using SMTP for DKIM verification failed [$secs sec]"
		echo "mail.txt"
		cat $testdir/tmp/mail2.txt
		echo "----------------------------------------"
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		)|less
		/bin/rm -f $testdir/tmp/mail1.txt $testdir/tmp/mail2.txt
		failed=1
		exit 1
	fi
}

test_smtp_bogofilter()
{
	t1=$(date +"%s.%4N")
	(
	echo "To: $user@$HOSTNAME"
	echo "From: $user@$HOSTNAME"
	echo "Subject: Testing DKIM"
	echo "Date: $(date -R)"
	echo
	echo "This is an email to test DKIM"
	) | swaks --data - -n -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port
	check_mail_header $maildir "X-Bogosity" 1
	echo $header| grep "X-Bogosity" > /dev/null
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing mail using SMTP for spamfilter succeeded %53s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing mail using SMTP for spamfilter failed [$secs sec]"
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		)|less
		failed=1
		exit 1
	fi
}

test_smtps()
{
	t1=$(date +"%s.%4N")
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port --tls-on-connect
	check_mail
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		str="$1 succeeded"
		printf "\r  testing %-94s [%.4f sec]\n" "$str" $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing $1 failed [$secs sec]"
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		)|less
		failed=1
		exit 1
	fi
}

# don't be like EXIM's infamous AUTH NTLM
test_smtp_invalid_auth()
{
	t1=$(date +"%s.%4N")
	for i in NTLM efgh
	do
		swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port \
			--a $i -au $user@$HOSTNAME -ap "abcd12345678" >$testdir/tmp/swaks.$$ 2>&1
		l1=$(sed -n 1p < $testdir/tmp/swaks.$$)
		if [ "$l1" != "\*\*\* EFGH is not a recognized auth type, skipping" \
			-a "$l1" != "\*\*\* Auth not attempted, requested type not available" ] ; then
			break
		fi
	done
	/bin/rm -f $testdir/tmp/swaks.$$
	if [ "$l1" != "\*\*\* EFGH is not a recognized auth type, skipping" \
		-a "$l1" != "\*\*\* Auth not attempted, requested type not available" ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing mail using SMTP with invalid AUTH type rejection succeeded %35s [%.4f sec]\n" " " $secs
		print_pct
	else
		echo "  testing mail using SMTP with invalid AUTH type rejection failed [$secs sec]"
		echo $l1
		failed=1
		exit 1
	fi
}

test_smtp_auth_login()
{
	t1=$(date +"%s.%4N")
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port --a LOGIN -au $user@$HOSTNAME -ap "abcd12345678"
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "AUTH LOGIN:")
		if [ $? -eq 0 ] ; then
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			tcount=$(expr $tcount + 1)
			printf "\r  testing mail using SMTP with LOGIN authentication succeeded %42s [%.4f sec]\n" " " $secs
			print_pct
		else
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			(
			echo "  testing mail using SMTP with LOGIN authentication failed [$secs sec]"
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
			)|less
			failed=1
			exit 1
		fi
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing mail using SMTP with LOGIN authentication failed [$secs sec]"
		echo "$logdir/smtpd/smtpd.log"
		cat $logdir/smtpd/smtpd.log
		)|less
		failed=1
		exit 1
	fi
}

test_smtp_auth_plain()
{
	t1=$(date +"%s.%4N")
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port --a PLAIN -au $user@$HOSTNAME -ap "abcd12345678"
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "AUTH PLAIN:")
		if [ $? -eq 0 ] ; then
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			tcount=$(expr $tcount + 1)
			printf "\r  testing mail using SMTP with PLAIN authentication succeeded %42s [%.4f sec]\n" " " $secs
			print_pct
		else
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			(
			echo "  testing mail using SMTP with PLAIN authentication failed [$secs sec]"
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
			)|less
			failed=1
			exit 1
		fi
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing mail using SMTP with PLAIN authentication failed [$secs sec]"
		echo "$logdir/smtpd/smtpd.log"
		cat $logdir/smtpd/smtpd.log
		)|less
		failed=1
		exit 1
	fi
}

test_smtp_auth_cram_md5()
{
	t1=$(date +"%s.%4N")
	pass=$(sudo grep $user /etc/shadow|cut -d: -f2)
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port --a CRAM-MD5 -au "$user" -ap "$pass"
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "AUTH CRAM-MD5:")
		if [ $? -eq 0 ] ; then
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			tcount=$(expr $tcount + 1)
			printf "\r  testing mail using SMTP with CRAM-MD5 authentication succeeded %39s [%.4f sec]\n" " " $secs
			print_pct
		else
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			(
			echo "  testing mail using SMTP with CRAM-MD5 authentication failed [$secs sec]"
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
			)|less
			failed=1
			exit 1
		fi
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing mail using SMTP with CRAM-MD5 authentication failed [$secs sec]"
		echo "$logdir/smtpd/smtpd.log"
		cat $logdir/smtpd/smtpd.log
		)|less
		failed=1
		exit 1
	fi
}

test_smtp_secure_auth()
{
	# Test secure auth
	#
	/bin/rm -f $servicedir/smtpd/variables/SMTPS
	echo 1 > $servicedir/smtpd/variables/STARTTLS
	echo 1 > $servicedir/smtpd/variables/SECURE_AUTH
	sudo svc -r $servicedir/smtpd
	sleep 2

	t1=$(date +"%s.%4N")
	# this should fail without using SMTPS or STARTTLS
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port \
		--a LOGIN -au $user@$HOSTNAME -ap "abcd12345678" >$testdir/tmp/swaks.$$ 2>&1
	ret1=$?
	l1=$(sed -n 1p < $testdir/tmp/swaks.$$)
	echo "$l1"|grep '*** Auth not attempted, requested type not available' >/dev/null
	if [ $? -eq 0 ] ; then
		ret2=0
	else
		ret2=1
	fi

	# this should succeed by using SMTPS or STARTTLS
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port \
		--a LOGIN -au $user@$HOSTNAME -ap "abcd12345678" --tls >/dev/null
	check_mail
	ret3=$?
	if [ $ret1 -ne 0 -a $ret2 -eq 0 -a $ret3 -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing mail using SECURE  AUTH SMTP authentication succeeded %40s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "ret1=$ret1, ret2=$ret2, ret3=$ret3"
		echo "  testing mail using SECURE AUTH SMTP authentication failed [$secs sec]"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		)|less
		failed=1
		exit 1
	fi

	/bin/rm -f > $servicedir/smtpd/variables/STARTTLS $servicedir/smtpd/variables/SECURE_AUTH
	echo 1 > $servicedir/smtpd/variables/SMTPS
	echo 1 > $servicedir/smtpd/variables/REQUIREAUTH
	sudo svc -r $servicedir/smtpd
	sleep 2

	# Test REQUIREAUTH
	t1=$(date +"%s.%4N")
	# this should fail without using authentication
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost \
		--port $smtp_port --tls-on-connect >$testdir/tmp/swaks.$$ 2>&1
	ret1=$?
	l1=$(sed -n 1p < $testdir/tmp/swaks.$$)
	echo "$l1"|grep ".*530 authentication required (#5.7.1)" >/dev/null
	if [ $? -eq 0 ] ; then
		ret2=0
	else
		ret2=1
	fi
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port \
		--a LOGIN -au $user@$HOSTNAME -ap "abcd12345678" --tls-on-connect >/dev/null
	check_mail
	ret3=$?
	if [ $ret1 -ne 0 -a $ret2 -eq 0 -a $ret3 -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing mail using REQUIRE AUTH SMTP authentication succeeded %40s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "ret1=$ret1, ret2=$ret2, ret3=$ret3"
		echo "  testing mail using REQUIRE AUTH SMTP authentication failed [$secs sec]"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		)|less
		failed=1
		exit 1
	fi

	/bin/rm -f $servicedir/smtpd/variables/REQUIREAUTH
	sudo svc -r $servicedir/smtpd
	sleep 2

	# Test authdomains
	t1=$(date +"%s.%4N")
	echo "@$HOSTNAME" > $cntrldir/authdomains
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port \
		--tls-on-connect > $testdir/tmp/swaks.$$ 2>&1
	ret1=$?
	l1=$(sed -n 1p < $testdir/tmp/swaks.$$)
	echo $l1 | grep ".*553 sorry, that domain isn't allowed to be relayed thru this MTA without authentication; no valid cert for gateway #5.7.1" > /dev/null
	ret2=$?
	failed=1
	/bin/rm -f $cntrldir/authdomains
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port \
		--tls-on-connect
	check_mail
	ret3=$?

	if [ $ret1 -ne 0 -a $ret2 -eq 0 -a $ret3 -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing mail using authdomains control file succeeded %48s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "ret1=$ret1, ret2=$ret2, ret3=$ret3, l1=[$l1]"
		echo "  testing mail using authdomains control file failed [$secs sec]"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		)|less
		failed=1
		exit 1
	fi

	# Test AUTH_ALL
	echo 1 > $servicedir/smtpd/variables/AUTH_ALL
	sudo svc -r $servicedir/smtpd
	sleep 2
	t1=$(date +"%s.%4N")
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port \
		--tls-on-connect > $testdir/tmp/swaks.$$ 2>&1
	ret1=$?
	l1=$(sed -n 1p < $testdir/tmp/swaks.$$)
	echo $l1 | grep ".*553 sorry, that domain isn't allowed to be relayed thru this MTA without authentication; no valid cert for gateway #5.7.1" > /dev/null
	ret2=$?
	if [ $ret1 -ne 0 -a $ret2 -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing mail using AUTH_ALL env variable succeeded %51s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		(
		echo "ret1=$ret1, ret2=$ret2, l1=[$l1]"
		printf "\r  testing mail using AUTH_ALL env variable failed [$secs sec]"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		)|less
		failed=1
		exit 1
	fi

	/bin/rm -f $servicedir/smtpd/variables/AUTH_ALL
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int
}

test_smtp_cugmail()
{
	t1=$(date +"%s.%4N")
	echo 1 > $servicedir/smtpd/variables/CUGMAIL
	       > $servicedir/smtpd/variables/QUERY_CACHE
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int
	> $servicedir/smtpd/variables/CUGMAIL

	# Test1: This should fail
	swaks -S --to $user@$HOSTNAME --from $user@$ext_domain --server localhost \
		--port $smtp_port >$testdir/tmp/swaks.$$
	ret1=$?
	l1=$(sed -n 1p < $testdir/tmp/swaks.$$)
	/bin/rm -f $testdir/tmp/swaks.$$

	# Test2: This should fail
	swaks -S --to $user@$ext_domain --from $user@$HOSTNAME --server localhost \
		--port $smtp_port --a LOGIN -au $user@$HOSTNAME -ap "abcd12345678" >$testdir/tmp/swaks.$$
	ret2=$?
	l2=$(sed -n 1p < $testdir/tmp/swaks.$$)
	/bin/rm -f $testdir/tmp/swaks.$$

	# Test3: This should fail
	swaks -S --to $user@$ext_domain --from $user@$ext_domain --server localhost \
		--port $smtp_port --a LOGIN -au $user@$HOSTNAME -ap "abcd12345678" >$testdir/tmp/swaks.$$
	ret3=$?
	l3=$(sed -n 1p < $testdir/tmp/swaks.$$)
	/bin/rm -f $testdir/tmp/swaks.$$

	# Test4: This should succeed
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost \
		--port $smtp_port --a LOGIN -au $user@$HOSTNAME -ap "abcd12345678"
	ret4=$?
	if [ "$l1" = "$l2" -a "$l1" = "$l3" -a "$l1" = "<** 553 sorry, this MTA is a closed user group system (#5.7.1)" ] ; then
		ret5=0
	else
		ret5=1
	fi
	check_mail
	if [ $? -eq 0 -a $ret1 -ne 0 -a $ret2 -ne 0 -a $ret3 -ne 0 -a $ret4 -eq 0 -a $ret5 -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		tcount=$(expr $tcount + 4)
		printf "\r  testing mail using SMTP with CUGMAIL succeeded %55s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		(
		echo "  testing mail using SMTP with CUGMAIL failed [$secs sec]"
		echo l1=$l1
		echo l2=$l2
		echo l3=$l3
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		)|less
		failed=1
		exit 1
	fi
}

test_smtp_chk_sender()
{
	t1=$(date +"%s.%4N")
	echo 0 > $servicedir/smtpd/variables/CHECKSENDER
	sudo svc -r $servicedir/smtpd
	sudo svc -a $servicedir/qmail-send/log
	sleep $sleep_int

	# First: This should work
	# because remote mail will be redirected
	# to $HOSTNAME using $testdir/bin/qmail-remote 
	# Also, $testdir/bin/qmail-remote changes the recipient
	# to $testuser@$HOSTNAME
	create_qmail_remote $testuser@$HOSTNAME
	# we require authenticted SMTP because of CHECKSENDER
	find $testdir/$testuser/Maildir -type f -exec /bin/rm -f {} \;
	echo "$HOSTNAME:127.0.0.1:$smtp_port $user@$HOSTNAME abcd12345678" > $cntrldir/smtproutes
	swaks -S --to $user@$ext_domain --from $user@$HOSTNAME --server localhost \
		--port $smtp_port --a LOGIN -au $user@$HOSTNAME -ap "abcd12345678"
	ret1=$?
	check_mail $testdir/$testuser/Maildir
	ret2=$?
	s1=$sleep_secs

	# Second: This should be denied without MASQUERADE
	swaks -S --to $user@$HOSTNAME --from $user@$ext_domain --server localhost \
		--port $smtp_port --a LOGIN -au $user@$HOSTNAME -ap "abcd12345678" >$testdir/tmp/swaks.$$
	ret3=$?
	l1=$(sed -n 1p < $testdir/tmp/swaks.$$)
	/bin/rm -f $testdir/tmp/swaks.$$
	echo "$l1" | grep ".*553 sorry, this MTA does not accept masquerading/forging,.*" >/dev/null
	if [ $? -eq 0 ] ; then
		ret4=0
	else
		ret4=1
	fi

	# Third: This should work
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost \
		--port $smtp_port --a LOGIN -au $user@$HOSTNAME -ap "abcd12345678"
	check_mail
	ret5=$?
	s2=$sleep_secs

	# fourth: This should be denied
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost \
		--port $smtp_port >$testdir/tmp/swaks.$$
	ret6=$?
	l2=$(sed -n 1p < $testdir/tmp/swaks.$$)
	/bin/rm -f $testdir/tmp/swaks.$$
	echo "$l2" | grep ".*530 authentication required (#5.7.1)" >/dev/null
	if [ $? -eq 0 ] ; then
		ret7=0
	else
		ret7=1
	fi

	if [ $ret1 -eq 0 -a $ret2 -eq 0 -a $ret3 -ne 0 -a $ret4 -eq 0 -a $ret5 -eq 0 -a $ret6 -ne 0 -a $ret7 -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $s1 $s2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3-$4-$5)}')
		tcount=$(expr $tcount + 4)
		printf "\r  testing mail using SMTP with CHECKSENDER succeeded %51s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $s1 $s2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3-$4-$5)}')
		> $servicedir/smtpd/variables/CHECKSENDER
		(
		echo "ret1=$ret1, ret2=$ret2, ret3=$ret3, ret4=$ret4, ret5=$ret5, ret6=$ret6, ret7=$ret7"
		echo "l1=$l1"
		echo "l2=$l2"
		echo "  testing mail using SMTP with CHECKSENDER failed [$secs sec]"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		echo "$logdir/qmail-send/current"
		cat $logdir/qmail-send/current
		)|less
		failed=1
		exit 1
	fi

	# fifth: This should be allowed with MASQUERADE
	echo "" > $servicedir/smtpd/variables/MASQUERADE
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int
	t1=$(date +"%s.%4N")
	swaks -S --to $user@$HOSTNAME --from $user@$ext_domain --server localhost \
		--port $smtp_port --a LOGIN -au $user@$HOSTNAME -ap "abcd12345678" > $testdir/tmp/swaks.$$
	check_mail
	ret1=$?
	if [ $ret1 -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 4)
		printf "\r  testing MASQUERADE any option succeeded %62s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		echo "  testing MASQUERADE any option failed [$secs sec]"
		(
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		echo "$logdir/qmail-send/current"
		cat $logdir/qmail-send/current
		)|less
		failed=1
		exit 1
	fi

	# sixth: This should be denied with MASQUERADE
	echo $testuser@$HOSTNAME > $servicedir/smtpd/variables/MASQUERADE
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int

	t1=$(date +"%s.%4N")
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost \
		--port $smtp_port --a LOGIN -au $testuser@$HOSTNAME -ap "abcd87654321" >$testdir/tmp/swaks.$$
	ret1=$?
	l1=$(sed -n 1p < $testdir/tmp/swaks.$$)
	if [ $ret1 -eq 0 ] ; then
		check_mail
	fi
	echo "$l1" | grep ".*553 sorry, this MTA does not accept masquerading/forging, auth <$testuser@$HOSTNAME> #5.7.1" > /dev/null
	ret2=$?

	# seventh: This should be allowed with MASQUERADE
	echo $user@$HOSTNAME > $servicedir/smtpd/variables/MASQUERADE
	sudo svc -r $servicedir/smtpd
	sleep 2
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost \
		--port $smtp_port --a LOGIN -au $testuser@$HOSTNAME -ap "abcd87654321"
	ret3=$?
	check_mail
	ret4=$?
	s1=$sleep_secs
	/bin/rm -f $testdir/tmp/swaks.$$

	if [ $ret1 -ne 0 -a $ret2 -eq 0 -a $ret3 -eq 0 -a $ret4 -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $s1 2 | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		tcount=$(expr $tcount + 4)
		printf "\r  testing MASQUERADE user option succeeded %61s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $s1 $s2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3-$4-$5)}')
		echo "  testing MASQUERADE user option failed %61s [$secs sec]"
		(
		echo "ret1=$ret1, ret2=$ret2, ret3=$ret3, ret4=$ret4"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		echo "$logdir/qmail-send/current"
		cat $logdir/qmail-send/current
		)|less
		failed=1
		exit 1
	fi

	t1=$(date +"%s.%4N")
	# now test checksenderdomains
	touch $cntrldir/chksenderdomains
	# First: This should be allowed
	swaks -S --to $user@$HOSTNAME --from $user@$ext_domain --server localhost \
		--port $smtp_port --a LOGIN -au $user@$HOSTNAME -ap "abcd12345678" >$testdir/tmp/swaks.$$
	ret1=$?
	check_mail
	/bin/rm -f $testdir/tmp/swaks.$$

	echo "@$HOSTNAME" > $cntrldir/chksenderdomains
	/bin/rm -f $servicedir/smtpd/variables/MASQUERADE
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int
	# second: This should be denied
	swaks -S --to $user@$HOSTNAME --from $user@$ext_domain --server localhost \
		--port $smtp_port --a LOGIN -au $user@$HOSTNAME -ap "abcd12345678" >$testdir/tmp/swaks.$$
	ret2=$?
	if [ $ret1 -eq 0 -a $ret2 -ne 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		tcount=$(expr $tcount + 4)
		printf "\r  testing chksender control file succeeded %61s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		echo "  testing chksender control file failed [$secs sec]"
		(
		echo "ret1=$ret1, ret2=$ret2"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		echo "$logdir/qmail-send/current"
		cat $logdir/qmail-send/current
		)|less
		failed=1
		exit 1
	fi
	/bin/rm -f $cntrldir/chksenderdomains $testdir/tmp/swaks.$$
	> $servicedir/smtpd/variables/CHECKSENDER
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int
}

test_smtp_surbl()
{
	echo /usr/sbin/surblqueue > $servicedir/smtpd/variables/QMAILQUEUE
	sudo svc -r $servicedir/smtpd
	sleep 2
	t1=$(date +"%s.%4N")
	(
	echo This is a test message for surbl
	echo http://surbl-org-permanent-test-point.com/
	) | swaks -S  --header "Subject: Test Mail" --to $user@$HOSTNAME --from $user@$HOSTNAME \
		--server localhost --port $smtp_port --body - >$testdir/tmp/swaks.$$
	ret1=$?
	l1=$(sed -n 1p < $testdir/tmp/swaks.$$)
	/bin/rm -f $testdir/tmp/swaks.$$
	if [ "$l1" = "<** 554 message contains an URL listed in SURBL blocklist [http://surbl-org-permanent-test-point.com/]" ] ; then
		ret2=0
	else
		ret2=1
	fi

	(
	echo This is a test message for surbl
	echo without surb blacklisted url
	echo https://github.com/mbhangui/indimail-mta
	) | swaks -S  --header "Subject: Test Mail" --to $user@$HOSTNAME --from $user@$HOSTNAME \
		--server localhost --port $smtp_port --body - >$testdir/tmp/swaks.$$
	check_mail
	ret3=$?

	/bin/rm -f $servicedir/smtpd/variables/QMAILQUEUE $testdir/tmp/swaks.$$
	sudo svc -r $servicedir/smtpd
	sleep 2
	if [ $ret1 -ne 0 -a $ret2 -eq 0 -a $ret4 -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs 2 | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		tcount=$(expr $tcount + 2)
		printf "\r  testing mail using SMTP for SURBL succeeded %58s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs 2 | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		(
		echo "l1=$l1"
		echo "  testing mail using SMTP for SURBL failed [$secs sec]"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		)|less
		failed=1
		exit 1
	fi
}

test_qmail_remote_auth()
{
	t1=$(date +"%s.%4N")
	case $1 in
		"CRAM-MD5")
		u=$user
		pass=$(sudo grep $user /etc/shadow|cut -d: -f2)
		;;
		*)
		u=$user@$HOSTNAME
		pass="abcd12345678"
		;;
	esac
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $user@$HOSTNAME"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) > $testdir/tmp/mail.txt

	env - \
		SMTPROUTE="$HOSTNAME:127.0.0.1:$smtp_port $u $pass" \
		AUTH_SMTP="$1" \
		CONTROLDIR="$cntrldir" \
		$qmail_remote $HOSTNAME $user@$HOSTNAME "" 10 $user@$HOSTNAME >$testdir/qremote.$$ <$testdir/tmp/mail.txt
	cat $testdir/qremote.$$ >> $logdir/qmail-remote/qmail-remote.log
	addr=$(batv -k $(cat $cntrldir/batvkey) -v $(sed -n 1p $testdir/qremote.$$|awk '{print $2}'|sed 's/^.\(.*\).$/\1/') 2>/dev/null)
	batv_status=$?
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "AUTH $1:")
		if [ $? -eq 0 ] ; then
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			tcount=$(expr $tcount + 1)
			printf "\r  testing qmail-remote AUTH %-8s qmail-remote send+receive succeeded %31s [%.4f sec]\n" "$1" " " $secs
			print_pct
			/bin/rm -f $testdir/qremote.$$ $testdir/tmp/mail.txt
		else
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			(
			echo "  testing qmail-remote AUTH $1, qmail-remote send+receive failed [$secs sec]"
			echo "Last line does not have AUTH"
			if [ $log_type -eq 1 ] ; then
				echo "$logdir/smtpd/smtpd.log"
				cat $logdir/smtpd/smtpd.log
			elif [ -f $logdir/smtpd/current ] ; then
				echo "$logdir/smtpd/current"
				cat $logdir/smtpd/current
			fi
			echo "qmail-remote.log"
			cat $testdir/qremote.$$
			)|less
			/bin/rm -f $testdir/qremote.$$ $testdir/tmp/mail.txt
			failed=1
			exit 1
		fi
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing qmail-remote AUTH $1, qmail-remote send+receive failed [$secs sec]"
		echo "Failed to receive mail"
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		echo "qmail-remote.log"
		cat $testdir/qremote.$$
		)|less
		/bin/rm -f $testdir/qremote.$$ $testdir/tmp/mail.txt
		failed=1
		exit 1
	fi
	if [ " $1" = " CRAM-MD5" ] ; then
		if [ $batv_status -eq 0 -a "$addr" = "$user@$HOSTNAME" ] ; then
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			tcount=$(expr $tcount + 1)
			printf "\r  testing BATV signing+verification succeeded %58s [%.4f sec]\n" " " $secs
			print_pct
		else
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			(
			echo "  testing BATV signing+verification failed [$secs sec]"
			if [ $log_type -eq 1 ] ; then
				echo "$logdir/smtpd/smtpd.log"
				cat $logdir/smtpd/smtpd.log
			elif [ -f $logdir/smtpd/current ] ; then
				echo "$logdir/smtpd/current"
				cat $logdir/smtpd/current
			fi
			echo "qmail-remote.log"
			$testdir/qremote.$$
			)|less
			failed=1
			exit 1
		fi
	fi
}

test_qmail_remote_routing()
{
	t1=$(date +"%s.%4N")
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $user@$HOSTNAME"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) > $testdir/tmp/mail.txt

	/bin/rm -f $cntrldir/batvkey
	env - \
		SMTPROUTE="$HOSTNAME:127.0.0.1:$smtp_port" \
		CONTROLDIR=$cntrldir \
		$qmail_remote $HOSTNAME $user@$HOSTNAME "" 10 $user@$HOSTNAME 1>$testdir/qremote.$$ <$testdir/tmp/mail.txt
	cat $testdir/qremote.$$ >> $logdir/qmail-remote/qmail-remote.log
	check_mail
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing qmail-remote SMTPROUTE env qmail-remote send+receive succeeded %31s [%.4f sec]\n" " " $secs
		print_pct
		/bin/rm -f $testdir/qremote.$$
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing qmail-remote SMTPROUTE env qmail-remote send+receive failed [$secs sec]"
		echo "qmail-remote.log"
		$testdir/qremote.$$
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		)|less
		/bin/rm -f $testdir/qremote.$$
		failed=1
		exit 1
	fi
	s1=$sleep_secs
	echo "$HOSTNAME:127.0.0.1:$smtp_port" > $cntrldir/smtproutes
	env - \
		CONTROLDIR=$cntrldir \
		$qmail_remote $HOSTNAME $user@$HOSTNAME "" 10 $user@$HOSTNAME 1>$testdir/qremote.$$ <$testdir/tmp/mail.txt
	cat $testdir/qremote.$$ >> $logdir/qmail-remote/qmail-remote.log
	check_mail
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $s1 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing qmail-remote smtproutes control file qmail-remote send+receive succeeded %21s [%.4f sec]\n" " " $secs
		print_pct
		/bin/rm -f $testdir/qremote.$$ $testdir/tmp/mail.txt
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $s1 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		(
		echo "  testing qmail-remote smtproutes control file qmail-remote send+receive failed [$secs sec]"
		echo "Failed to receive mail"
		echo "qmail-remote.log"
		$testdir/qremote.$$
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		)|less
		/bin/rm -f $testdir/qremote.$$ $testdir/tmp/mail.txt
		failed=1
		exit 1
	fi
	/bin/rm -f $cntrldir/smtproutes
}

test_qmail_remote_auth_cdb()
{
	t1=$(date +"%s.%4N")
	echo "$HOSTNAME:127.0.0.1:$smtp_port /s" > $cntrldir/smtproutes
	(
	echo "=$user@$HOSTNAME:$user@$HOSTNAME abcd12345678 AUTH_SMTP=plain:"
	echo "."
	) > $cntrldir/remote_auth
	env CONTROLDIR=$cntrldir cdb-database remote_auth
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing cdb-database for qmail-remote authentication succeeded %39s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		echo "  testing cdb-database for qmail-remote authentication failed [$secs sec]"
		failed=1
		exit 1
	fi
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $user@$HOSTNAME"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) > $testdir/tmp/mail.txt

	env - \
		SMTPROUTE="$HOSTNAME:127.0.0.1:$smtp_port /s" \
		AUTH_SMTP="" \
		CONTROLDIR=$cntrldir \
		$qmail_remote $HOSTNAME $user@$HOSTNAME "" 10 $user@$HOSTNAME 1>$testdir/qremote.$$ <$testdir/tmp/mail.txt
	cat $testdir/qremote.$$ >> $logdir/qmail-remote/qmail-remote.log
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "AUTH PLAIN:")
		if [ $? -eq 0 ] ; then
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			tcount=$(expr $tcount + 1)
			printf "\r  testing qmail-remote using remote_auth.cdb qmail-remote send+receive succeeded %23s [%.4f sec]\n" " " $secs
			print_pct
			/bin/rm -f $testdir/qremote.$$ $testdir/tmp/mail.txt
		else
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			(
			echo "  testing qmail-remote using remote_auth.cdb qmail-remote send+receive failed [$secs sec]"
			echo "Last does not have AUTH PLAIN"
			echo "qmail-remote.log"
			cat $testdir/qremote.$$
			)|less
			/bin/rm -f $testdir/qremote.$$ $testdir/tmp/mail.txt
			failed=1
			exit 1
		fi
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		printf "  testing qmail-remote using remote_auth.cdb qmail-remote send+receive failed %26s [%.4f sec]\n" " " $secs
		echo "Failed to receive mail"
		echo "qmail-remote.log"
		cat $testdir/qremote.$$
		)|less
		/bin/rm -f $testdir/qremote.$$ $testdir/tmp/mail.txt
		failed=1
		exit 1
	fi
	/bin/rm -f $cntrldir/smtproutes
}

test_qmail_remote_starttls()
{
	t1=$(date +"%s.%4N")
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $user@$HOSTNAME"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) > $testdir/tmp/mail.txt
	env - \
		SMTPROUTE="$HOSTNAME:127.0.0.1:$smtp_port" \
		CONTROLDIR="$cntrldir" \
		$qmail_remote $HOSTNAME $user@$HOSTNAME "" 10 $user@$HOSTNAME >$testdir/qremote.$$ <$testdir/tmp/mail.txt
	cat $testdir/qremote.$$ >> $logdir/qmail-remote/qmail-remote.log
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "TLS=TLSv.*")
		if [ $? -eq 0 ] ; then
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			last_line=$(echo $last_line|awk '{print $17}')
			tcount=$(expr $tcount + 1)
			printf "\r  testing qmail-remote STARTTLS %-11s, qmail-remote send+receive succeeded %23s [%.4f sec]\n" $last_line " " $secs
			print_pct
			/bin/rm -f $testdir/qremote.$$ $testdir/tmp/mail.txt
		else
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			(
			echo "  testing qmail-remote STARTTLS, qmail-remote send+receive failed [$secs sec]"
			echo "Last line does not have TLS"
			if [ $log_type -eq 1 ] ; then
				echo "$logdir/smtpd/smtpd.log"
				cat $logdir/smtpd/smtpd.log
			elif [ -f $logdir/smtpd/current ] ; then
				echo "$logdir/smtpd/current"
				cat $logdir/smtpd/current
			fi
			echo "qmail-remote.log"
			cat $testdir/qremote.$$
			)|less
			/bin/rm -f $testdir/qremote.$$ $testdir/tmp/mail.txt
			failed=1
			exit 1
		fi
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing qmail-remote STARTTLS, qmail-remote send+receive failed [$secs sec]"
		echo "Failed to receive mail"
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		echo "qmail-remote.log"
		cat $testdir/qremote.$$
		)|less
		/bin/rm -f $testdir/qremote.$$ $testdir/tmp/mail.txt
		failed=1
		exit 1
	fi
}

test_qmail_remote_smtps()
{
	t1=$(date +"%s.%4N")
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $user@$HOSTNAME"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) > $testdir/tmp/mail.txt
	env - \
		SMTPROUTE="$HOSTNAME:127.0.0.1:$smtp_port" \
		SMTPS=1 \
		CONTROLDIR="$cntrldir" \
		$qmail_remote $HOSTNAME $user@$HOSTNAME "" 10 $user@$HOSTNAME >$testdir/qremote.$$ <$testdir/tmp/mail.txt
	cat $testdir/qremote.$$ >> $logdir/qmail-remote/qmail-remote.log
	check_mail
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/smtpd.log|grep "TLS=TLSv.*")
		if [ $? -eq 0 ] ; then
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			last_line=$(echo $last_line|awk '{print $17}')
			tcount=$(expr $tcount + 1)
			printf "\r  testing qmail-remote SMTPS %11s, qmail-remote send+receive succeeded %26s [%.4f sec]\n" $last_line " " $secs
			print_pct
			/bin/rm -f $testdir/qremote.$$ $testdir/tmp/mail.txt
		else
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
			(
			echo "  testing qmail-remote SMTPS, qmail-remote send+receive failed [$secs sec]"
			echo "Last line does not have TLS"
			if [ $log_type -eq 1 ] ; then
				echo "$logdir/smtpd/smtpd.log"
				cat $logdir/smtpd/smtpd.log
			elif [ -f $logdir/smtpd/current ] ; then
				echo "$logdir/smtpd/current"
				cat $logdir/smtpd/current
			fi
			echo "qmail-remote.log"
			cat $testdir/qremote.$$
			)|less
			/bin/rm -f $testdir/qremote.$$ $testdir/tmp/mail.txt
			failed=1
			exit 1
		fi
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing qmail-remote SMTPS, qmail-remote send+receive failed [$secs sec]"
		echo "Failed to receive mail"
		if [ $log_type -eq 1 ] ; then
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
		elif [ -f $logdir/smtpd/current ] ; then
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
		fi
		echo "qmail-remote.log"
		cat $testdir/qremote.$$
		)|less
		/bin/rm -f $testdir/qremote.$$ $testdir/tmp/mail.txt
		failed=1
		exit 1
	fi
}

terminate_smtp_qmtp()
{
	if [ -n "$1" ] ; then
		sudo kill $*
		sleep $sleep_int
	fi
}

terminate_send()
{
	if [ -n "$1" ] ; then
		sudo kill $*
		sleep $sleep_int
	fi
}

start_tcpserver_smtps()
{
	t1=$(date +"%s.%4N")
	if [ $# -eq 0 ] ; then
		tls_ver=TLSv1_3
	elif [ -n "$1" ] ; then
		tls_ver=$1
	else
		tls_ver=""
	fi
	if [ "$tls_ver" = "TLSv1_3"  ] ; then
		echo TLSv1_2:TLSv1_3         > $cntrldir/tlsclientmethod
		echo TLSv1_2:TLSv1_3         > $cntrldir/tlsservermethod
	elif [ "$tls_ver" = "TLSv1_2"  ] ; then
		echo TLSv1_2                 > $cntrldir/tlsclientmethod
		echo TLSv1_2                 > $cntrldir/tlsservermethod
	else
		/bin/rm -f                     $cntrldir/tlsclientmethod
		/bin/rm -f                     $cntrldir/tlsservermethod
	fi
	printf "\r%118s\n" " "
	if [ -n "$tls_ver" ] ; then
		printf "\rStarting SMTPS on port %5d TLS=%-7s using tcpserver %69s\n" $smtp_port $tls_ver ""
	else
		printf "\rStarting SMTPS on port %5d TLS=%-7s using tcpserver %69s\n" $smtp_port "auto" ""
	fi
	(
	sudo env - \
		USE_QPWGR=1 \
		SMTPS=1 \
		BIGTODO=0 \
		CONFSPLIT=23 \
		QUEUEDIR=$testdir/queue \
		CONTROLDIR=$cntrldir \
		CERTDIR=$certdir \
		$tcpserver -u qmaild -g qmail -HR 0 $smtp_port $qmail_smtpd
	) > $logdir/smtpd/smtpd.log 2>&1 &

	count=0
	tx1=$(date +"%s.%4N")
	while true
	do
		smtp_pid=$(/bin/ps -ef|grep -v sudo|grep $smtp_port|grep qmail-smtpd|awk '{print $2}')
		if [ -n "$smtp_pid" ] ; then
			break
		fi
		sleep 1
	done
	tx2=$(date +"%s.%4N")
	sleep_secs=$(echo $tx1 $tx2 | awk '{printf("%0.4f\n", $2-$1)}')
	sudo kill -0 $smtp_pid
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing SMTPS on port %4d using tcpserver succeeded %49s [%.4f sec]\n" $smtp_port " " $secs
		print_pct
	else
		sudo kill $send_pid $smtp_pid
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing SMTPS on port $smtp_port using tcpserver failed [$secs sec]"
		echo "$logdir/smtpd/smtpd.log"
		cat $logdir/smtpd/smtpd.log
		)|less
		failed=1
		exit 1
	fi
}

start_tcpserver_smtps_unix()
{
	t1=$(date +"%s.%4N")
	printf "\r%118s\n" " "
	echo "Starting SMTPS on socket $smtp_socket using tcpserver"
	(
	env - \
		USE_QPWGR=1 \
		SMTPS=1 \
		BIGTODO=0 \
		CONFSPLIT=23 \
		QUEUEDIR=$testdir/queue \
		CONTROLDIR=$cntrldir \
		CERTDIR=$certdir \
		$tcpserver $smtp_socket $qmail_smtpd
	) > $logdir/smtpd/smtpd.log 2>&1 &

	smtp_pid=$(/bin/ps -ef|grep $smtp_socket|grep qmail-smtpd|awk '{print $2}')
	kill -0 $smtp_pid
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing SMTPS on socket %26s using tcpserver succeeded %25s [%.4f sec]\n" $smtp_socket " " $secs
		print_pct
	else
		sudo kill $send_pid $smtp_pid
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		(
		echo "  testing SMTPS on socket $smtp_socket using tcpserver failed [$secs sec]"
		echo "$logdir/smtpd/smtpd.log"
		cat $logdir/smtpd/smtpd.log
		)|less
		failed=1
		exit 1
	fi
}

setup_svscan_basic()
{
	t1=$(date +"%s.%4N")
	sudo /bin/rm -rf $servicedir
	sudo /bin/rm -rf $logdir/smtpd
	sudo /bin/rm -rf $logdir/qmail-send

	mkdir -p $servicedir/smtpd/variables
	mkdir -p $servicedir/smtpd/log
	echo 1              > $servicedir/smtpd/variables/USE_QPWGR
	echo 1              > $servicedir/smtpd/variables/SMTPS
	echo 0              > $servicedir/smtpd/variables/BIGTODO
	echo 23             > $servicedir/smtpd/variables/CONFSPLIT
	echo $cntrldir      > $servicedir/smtpd/variables/CONTROLDIR
	echo $testdir/queue > $servicedir/smtpd/variables/QUEUEDIR
	echo $certdir       > $servicedir/smtpd/variables/CERTDIR
	(
	printf "#!/bin/sh\nexec $envdir ./variables $tcpserver -u qmaild -g qmail -v -HR 0 "
	printf "$smtp_port $qmail_smtpd $HOSTNAME $testdir/bin/authsmtp "
	printf "/bin/false 2>&1\n"
	) > $servicedir/smtpd/run
	printf "#!/bin/sh\nexec $multilog t $logdir/smtpd\n" > $servicedir/smtpd/log/run
	chmod +x $servicedir/smtpd/run
	chmod +x $servicedir/smtpd/log/run

	mkdir -p $servicedir/qmail-send/variables
	mkdir -p $servicedir/qmail-send/log
	echo /bin:/usr/sbin            > $servicedir/qmail-send/variables/PATH
	echo 0                         > $servicedir/qmail-send/variables/BIGTODO
	echo 1                         > $servicedir/qmail-send/variables/USE_QPWGR
	echo 23                        > $servicedir/qmail-send/variables/CONFSPLIT
	echo $cntrldir                 > $servicedir/qmail-send/variables/CONTROLDIR
	echo $testdir/queue            > $servicedir/qmail-send/variables/QUEUEDIR
	echo $sysconfdir/users         > $servicedir/qmail-send/variables/ASSIGNDIR
	echo $certdir                  > $servicedir/qmail-send/variables/CERTDIR
	echo $testdir/bin/qmail-getpw  > $servicedir/qmail-send/variables/QMAILGETPW
	echo $testdir/bin/qmail-remote > $servicedir/qmail-send/variables/QMAILREMOTE
	echo $testdir/etc/passwd       > $servicedir/qmail-send/variables/PASSWD_FILE
	echo login                     > $servicedir/qmail-send/variables/AUTH_SMTP
	printf "#!/bin/sh\nexec $envdir ./variables $qmail_start -s ./Maildir/ 2>&1\n" > $servicedir/qmail-send/run
	printf "#!/bin/sh\nexec $multilog t $logdir/qmail-send\n" > $servicedir/qmail-send/log/run
	chmod +x $servicedir/qmail-send/run
	chmod +x $servicedir/qmail-send/log/run
}

start_svscan_without_svscanlog()
{
	t1=$(date +"%s.%4N")
	(
	sudo env - \
		DISABLE_RUN=1 \
		SILENT=1 \
		PATH=/bin:/usr/sbin \
		/usr/sbin/svscan $servicedir
	) > $logdir/svscan/svscan.log 2>&1 &
	sleep 1
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	sudo kill -0 $svpid
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1-1)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing svscan (without svscanlog) startup succeeded %49s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1-1)}')
		(
		echo "  testing svscan (without svscanlog) startup failed [$secs sec]"
		echo "svscan.log"
		cat $logdir/svscan/svscan.log
		)|less
		failed=1
		exit 1
	fi
	for i in smtpd smtpd/log qmail-send qmail-send/log
	do
		sudo svok $servicedir/smtpd
		if [ $? -eq 0 ] ; then
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1-1)}')
			tcount=$(expr $tcount + 1)
			printf "\r  testing service %-14s startup succeeded %53s [%.4f sec]\n" $i " " $secs
			print_pct
		else
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1-1)}')
			(
			echo "  testing service $i startup failed [$secs sec]"
			echo "$logdir/smtpd/current"
			cat $logdir/smtpd/current
			echo "qmail-send.log"
			cat $logdir/qmail-send/current
			)|less
			failed=1
			exit 1
		fi
	done
}

test_stop_smtps()
{
	t1=$(date +"%s.%4N")
	sudo svc -d $servicedir/smtpd
	sleep 2
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port --tls-on-connect 2>/dev/null
	if [ $? -eq 2 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing stopping of service using svc succeeded %54s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing stopping of service using svc failed [$secs sec]"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		)|less
		failed=1
		exit 1
	fi
}

test_stop_supervise()
{
	t1=$(date +"%s.%4N")
	sudo svc -dx $servicedir/smtpd
	sleep $sleep_int
	sudo svok $servicedir/smtpd
	if [ $? -eq 100 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing stopping of supervise using svc succeeded %52s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing stopping of supervise using svc failed [$secs sec]"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		)|less
		failed=1
		exit 1
	fi
}

test_restart_service_using_hup()
{
	t1=$(date +"%s.%4N")
	sudo kill -1 $svpid
	sleep $sleep_int
	sudo svok $servicedir/smtpd
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing restarting of supervise by sending hup to svscan succeeded %35s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing restarting of supervise by sending hup to svscan failed [$secs sec]"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		)|less
		failed=1
		exit 1
	fi
}

test_restart_service_using_svc()
{
	t1=$(date +"%s.%4N")
	tcpserver_pid1=$(sudo svstat $servicedir/smtpd|awk '{print $6}')
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int
	tcpserver_pid2=$(sudo svstat $servicedir/smtpd|awk '{print $6}')

	if [ $tcpserver_pid2 -ne $tcpserver_pid1 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing restarting of supervise using svc succeeded %50s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing restarting of supervise using svc failed [$secs sec]"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		)|less
		failed=1
		exit 1
	fi
}

test_multilog()
{
	t1=$(date +"%s.%4N")
	grep "HELO <$HOSTNAME> MAIL from <mbhangui@$HOSTNAME> RCPT <mbhangui@$HOSTNAME> AUTH <local-rcpt> Size: .* TLS=TLSv1.3" $logdir/smtpd/current >/dev/null
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing logging using multilog succeeded %61s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		(
		echo "  testing logging using multilog failed [$secs sec]"
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		)|less
		failed=1
		exit 1
	fi
}

test_blocked()
{
	t1=$(date +"%s.%4N")
	if [ $# -eq 0 ] ; then
		swaks -S --to blocked@$HOSTNAME --from $user@$HOSTNAME --server localhost --port $smtp_port >$testdir/tmp/swaks.$$
	else
		swaks -S --to $user@$HOSTNAME  --from blocked@$HOSTNAME -server localhost --port $smtp_port >$testdir/tmp/swaks.$$
	fi
	l1=$(sed -n 1p < $testdir/tmp/swaks.$$)
	/bin/rm -f $testdir/tmp/swaks.$$
	if [ $# -eq 0 ] ; then
		echo "$l1" | grep ".*553 sorry, your envelope recipient has been denied (#5.7.1).*" >/dev/null
		if [ $? -eq 0 ] ; then
			ret=0
		else
			ret=1
		fi
	else
		echo "$l1" | grep ".*553 sorry, your envelope sender has been denied (#5.7.1).*" >/dev/null
		if [ $? -eq 0 ] ; then
			ret=0
		else
			ret=1
		fi
	fi
	if [ $ret -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		if [ $# -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			printf "\r  testing badrcptto succeeded %74s [%.4f sec]\n" " " $secs
		else
			tcount=$(expr $tcount + 1)
			printf "\r  testing badmailfrom succeeded %72s [%.4f sec]\n" " " $secs
		fi
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		(
		if [ $# -eq 0 ] ; then
			echo "  testing badrcptto failed [$secs sec]"
		else
			echo "  testing badmailfrom failed [$secs sec]"
		fi
		echo "$logdir/smtpd/current"
		cat $logdir/smtpd/current
		)|less
		failed=1
		exit 1
	fi
}

setup_svscan_with_svscanlog()
{
	sudo /bin/rm -rf $logdir/svscan
	mkdir -p $logdir/svscan
	sudo /bin/rm -f $testdir/svscan.out
	mkdir -p $servicedir/.svscan/log
	mkdir -p $servicedir/.svscan/variables
	printf "#!/bin/sh\nexec echo hello world > $testdir/svscan.out\n" > $servicedir/.svscan/run
	printf "#!/bin/sh\nexec echo goodbye world > $testdir/svscan.out\n" > $servicedir/.svscan/shutdown
	printf "#!/bin/sh\nexec $multilog t $logdir/svscan\n" > $servicedir/.svscan/log/run
	chmod +x $servicedir/.svscan/run
	chmod +x $servicedir/.svscan/shutdown
	chmod +x $servicedir/.svscan/log/run
	echo 1 > $servicedir/.svscan/variables/DISABLE_RUN
	echo 1 > $servicedir/.svscan/variables/SCANLOG
	echo 1 > $servicedir/.svscan/variables/SILENT
	echo   > $servicedir/.svscan/variables/INITCMD
	echo "/bin:/usr/sbin" > $servicedir/.svscan/variables/PATH
}

start_svscan_with_svscanlog()
{
	t1=$(date +"%s.%4N")
	(
	cd $servicedir/.svscan
	exec sudo $envdir -c variables /usr/sbin/svscan $servicedir
	) &
	sleep $sleep_int
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	sudo kill -0 $svpid
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing svscan (with svscanlog) startup succeeded %52s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing svscan (with svscanlog) startup failed [$secs sec]"
		echo "svscan.log"
		cat $logdir/svscan/current
		)|less
		failed=1
		exit 1
	fi
}

test_svscan_log()
{
	t1=$(date +"%s.%4N")
	grep "@.* svscan: info: pid: .*: starting..." $logdir/svscan/current >/dev/null
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing svscan log succeeded %73s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		(
		echo "  testing svscan log failed [$secs sec]"
		echo "svscan.log"
		cat $logdir/svscan/current
		)|less
		failed=1
		exit 1
	fi
}

test_svscan_run()
{
	t1=$(date +"%s.%4N")
	if [ "$(cat $testdir/svscan.out 2>/dev/null)" = "hello world" ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing svscan run script execution succeeded %56s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		(
		echo "  testing svscan run script execution failed [$secs sec]"
		echo "svscan.log"
		cat $logdir/svscan/current
		)|less
		failed=1
		exit 1
	fi
}

test_svscan_shutdown()
{
	t1=$(date +"%s.%4N")
	shutdown_svscan
	if [ "$(cat $testdir/svscan.out 2>/dev/null)" = "goodbye world" ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing svscan shutdown script execution succeeded %51s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		shutdown_svscan
		(
		echo "  testing svscan shutdown script execution failed [$secs sec]"
		echo "svscan.log"
		cat $logdir/svscan/current
		)|less
		failed=1
		exit 1
	fi
}

start_new_service()
{
	t1=$(date +"%s.%4N")
	sudo /bin/rm -rf $servicedir/sleep
	/bin/rm -f $testdir/sleep.out
	mkdir -p $servicedir/sleep/log
	printf "#!/bin/sh\nexec sleep 2243\n" > $servicedir/sleep/run
	printf "#!/bin/sh\nexec $multilog t $logdir/sleep\n" > $servicedir/sleep/log/run
	printf "#!/bin/sh\nexec echo shutdown sleep service > $testdir/sleep.out\n" > $servicedir/sleep/shutdown
	chmod +x $servicedir/sleep/run
	chmod +x $servicedir/sleep/log/run
	chmod +x $servicedir/sleep/shutdown
	if [ $# -eq 0 ] ; then # HUP
		sudo kill -1 $svpid
		sleep 5
	else
		sleep 6
	fi
	sudo svok $servicedir/sleep
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		if [ $# -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1-5)}')
			printf "\r  testing starting of supervise for new service by sending hup to svscan succeeded %21s [%.4f sec]\n" " " $secs
		else
			tcount=$(expr $tcount + 1)
			secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1-6)}')
			printf "\r  testing starting of supervise for new service using svscan autoscan succeeded %24s [%.4f sec]\n" " " $secs
		fi
		print_pct
	else
		t2=$(date +"%s.%4N")
		(
		if [ $# -eq 0 ] ; then
			secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1-5)}')
			echo "  testing starting of supervise for new service by sending hup to svscan failed [$secs sec]"
		else
			secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1-6)}')
			echo "  testing starting of supervise for new service using svscan autoscan failed [$secs sec]"
		fi
		echo "svscan.log"
		cat $logdir/svscan/current
		)|less
		failed=1
		exit 1
	fi
	ps -ef |grep "sleep 2243"|grep -v grep > /dev/null
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		if [ $# -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1-5)}')
			printf "\r  testing starting of new service by sending hup to svscan succeeded %35s [%.4f sec]\n" " " $secs
		else
			tcount=$(expr $tcount + 1)
			secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1-6)}')
			printf "\r  testing starting of new service using svscan autoscan succeeded %38s [%.4f sec]\n" " " $secs
		fi
		print_pct
	else
		t2=$(date +"%s.%4N")
		(
		if [ $# -eq 0 ] ; then
			secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1-5)}')
			echo "  testing starting of new service by sending hup to svscan failed [$secs sec]"
		else
			secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1-6)}')
			echo "  testing starting of new service using svscan autoscan failed [$secs sec]"
		fi
		echo "svscan.log"
		cat $logdir/svscan/current
		)|less
		failed=1
		exit 1
	fi
	t1=$(date +"%s.%4N")
	sudo svc -d $servicedir/sleep
	sleep $sleep_int
	ps -ef |grep "sleep 2243"|grep -v grep > /dev/null
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing stopping of new service failed [$secs sec]"
		echo "svscan.log"
		cat $logdir/svscan/current
		)|less
		failed=1
		exit 1
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing stopping of new service succeeded %60s [%.4f sec]\n" " " $secs
		print_pct
	fi
	if [ "$(cat $testdir/sleep.out 2>/dev/null)" = "shutdown sleep service" ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing shutdown script of new service succeeded %53s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing shutdown script of new service failed [$secs sec]"
		echo "svscan.log"
		cat $logdir/svscan/current
		)|less
		failed=1
		exit 1
	fi
}

remove_new_service()
{
	t1=$(date +"%s.%4N")
	mv $servicedir/sleep $servicedir/.sleep
	sudo svc -dx $servicedir/.sleep $servicedir/.sleep/log
	sleep $sleep_int
	ps -ef |grep -E "sleep 2243|sleep 2244"|grep -v grep > /dev/null
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing removal of new service failed [$secs sec]"
		echo "svscan.log"
		cat $logdir/svscan/current
		)|less
		failed=1
		exit 1
	else
		sudo /bin/rm -rf $servicedir/.sleep
		tcount=$(expr $tcount + 1)
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		printf "\r  testing removal of new service succeeded %61s [%.4f sec]\n" " " $secs
		print_pct
	fi
}

test_supervise_subreaper()
{
	t1=$(date +"%s.%4N")
	printf "#!/bin/sh\nsleep 2244 &\n" > $servicedir/sleep/run
	chmod +t $servicedir/sleep/run
	sudo svc -u $servicedir/sleep
	sleep $sleep_int
	ps ajx |grep "sleep 2244"|grep -v grep > /dev/null
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing starting of new service in supbreaper mode succeeded %41s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		echo "  testing starting of new service in supbreaper mode failed [$secs sec]"
		echo "svscan.log"
		cat $logdir/svscan/current
		)|less
		failed=1
		exit 1
	fi
	pgid=$(ps ajx|grep "sleep 2244"|grep -v grep|awk '{print $3}')
	if [ $pgid -ne $$ ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing setting of PGID (%7d != %7d) in subreaper mode succeeded %29s [%.4f sec]\n" $pgid "$$" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		echo "  testing setting of PGID ($pgid = $$) in subreaper mode failed [$secs sec]"
		(
		echo "  testing starting of new service in supbreaper mode failed [$secs sec]"
		echo "svscan.log"
		cat $logdir/svscan/current
		)|less
		failed=1
		exit 1
	fi
	sudo svc -d $servicedir/sleep
	sleep $sleep_int
	ps -ef |grep "sleep 2244"|grep -v grep > /dev/null
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-(2*$3))}')
		(
		echo "  testing stopping of new service in subreaper mode failed [$secs sec]"
		echo "svscan.log"
		cat $logdir/svscan/current
		)|less
		failed=1
		exit 1
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-(2*$3))}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing stopping of new service in subreaper mode succeeded %42s [%.4f sec]\n" " " $secs
		print_pct
	fi
}

create_tcpclient_smtp()
{
	list=$*
	(
	echo "#!/bin/sh"
	echo "exec 0<&6"
	echo "exec 1>&7"
	echo "read key"
	echo "greeting=\$(echo \$key | awk '{print \$1}')"
	echo "if [ \$greeting -ne 220 ] ; then"
	echo "	echo \"Greeting failed\" 1>&2"
	echo "	printf \"QUIT\r\n\""
	echo "fi"
	echo "printf \"EHLO\r\n\""
	echo "while true"
	echo "do"
	echo "	read line"
	echo "	echo \$line |grep \"250 \" >/dev/null"
	echo "	if [ \$? -eq 0 ] ; then"
	echo "		echo \$line 1>&2"
	echo "		break"
	echo "	fi"
	echo "	echo \$line 1>&2"
	echo "done"
	echo "printf \"MAIL FROM:<$user@$HOSTNAME>\r\n\" 1>&2"
	echo "printf \"MAIL FROM:<$user@$HOSTNAME>\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "code=\$(echo \$key |cut -c1-3)"
	echo "if [ \$code -ne 250 ] ; then"
	echo "	echo \"MAIL From failed: code=\$code\" 1>&2"
	echo "	exit 1"
	echo "fi"
	for i in $list
	do
		echo "printf \"RCPT TO:<$i>\r\n\" 1>&2"
		echo "printf \"RCPT TO:<$i>\r\n\""
		echo "read key"
		echo "echo \$key 1>&2"
		echo "code=\$(echo \$key |cut -c1-3)"
		echo "if [ \$code -ne 250 ] ; then"
		echo "	echo \"RCPT To failed: code=\$code\" 1>&2"
		echo "	exit 1"
		echo "fi"
	done
	echo "printf \"QUIT\r\n\" 1>&2"
	echo "printf \"QUIT\r\n\""
	echo "read key"
	echo "echo \$key 1>&2"
	echo "exit 0"
	) > $testdir/tcpclient.smtp
	chmod +x $testdir/tcpclient.smtp
}

test_recipients()
{
	t1=$(date +"%s.%4N")
	/bin/rm -f $servicedir/smtpd/variables/SMTPS
	(
	echo "apollo.indimail.org"
	echo "mediacenter.indimail.org"
	echo "nocheck.com"
	) >> $cntrldir/rcpthosts
	sort -u $cntrldir/rcpthosts -o $cntrldir/rcpthosts
	echo           3 > $servicedir/smtpd/variables/CHECKRECIPIENT
	echo $sysconfdir > $servicedir/smtpd/variables/SYSCONFDIR
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int

	(
	echo "!nocheck.com"
	echo "@$HOSTNAME:users/recipients.cdb"
	echo "indimail.org:users/extra.cdb"
	echo "*:users/recipients.cdb"
	echo "users/legacy.cdb"
	) > $cntrldir/recipients

	(
	echo user1@$HOSTNAME
	echo user2@mediacenter.indimail.org
	) > $sysconfdir/users/recipients

	echo user1@apollo.indimail.org > $sysconfdir/users/extra
	echo user3@apollo.indimail.org > $sysconfdir/users/legacy
	env SYSCONFDIR=$sysconfdir qmail-cdb -r
	r1=$?
	env SYSCONFDIR=$sysconfdir qmail-cdb -r extra
	r2=$?
	env SYSCONFDIR=$sysconfdir qmail-cdb -r legacy
	r3=$?
	if [ $r1 -eq 0 -a $r2 -eq 0 -a $r3 -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing qmail-cdb succeeded %74s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		echo "  testing qmail-cdb failed [$secs sec]"
		> $servicedir/smtpd/variables/CHECKRECIPIENT
		failed=1
		exit 1
	fi

	# Pass1: This should succeed
	t1=$(date +"%s.%4N")
	create_tcpclient_smtp user1@nocheck.com user1@$HOSTNAME user1@apollo.indimail.org \
		user2@mediacenter.indimail.org user3@apollo.indimail.org
	tcpclient -vDHR 0 $smtp_port $testdir/tcpclient.smtp > $logdir/tcpclient/tcpclient.log 2>&1
	ret1=$?
	if [ $ret1 -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing recipient extension (positive match) succeeded %47s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		(
		echo "  testing recipient extension (positive match) failed [$secs sec]"
		echo "tcpclient.log"
		cat $logdir/tcpclient/tcpclient.log
		)|less
		> $servicedir/smtpd/variables/CHECKRECIPIENT
		failed=1
		exit 1
	fi

	# Pass2: This should fail
	t1=$(date +"%s.%4N")
	create_tcpclient_smtp user3@$HOSTNAME
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int
	tcpclient -vDHR 0 $smtp_port $testdir/tcpclient.smtp > $logdir/tcpclient/tcpclient.log 2>&1
	ret2=$?
	l1=$(tail -2 $logdir/tcpclient/tcpclient.log|sed -n 1p)
	echo "$l1"|grep "550 sorry, $user@$HOSTNAME mailbox <user3@argos.indimail.org> is absent on this domain (#5.1.1)" > /dev/null
	if [ $? -eq 0 ] ; then
		ret3=0
	else
		ret3=1
	fi
	if [ $ret2 -eq 1 -a $ret3 -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3-5)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing recipient extension (negative match) succeeded %47s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3-5)}')
		(
		echo "l1=$l1"
		echo "ret2=$ret2, ret3=$ret3"
		echo "  testing recipient extension (negative match) failed [$secs sec]"
		echo "tcpclient.log"
		cat $logdir/tcpclient/tcpclient.log
		)|less
		> $servicedir/smtpd/variables/CHECKRECIPIENT
		failed=1
		exit 1
	fi

	# Pass3: This should succeed
	t1=$(date +"%s.%4N")
	echo "!*" >> $cntrldir/recipients
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int
	tcpclient -vDHR 0 $smtp_port $testdir/tcpclient.smtp > $logdir/tcpclient/tcpclient.log 2>&1
	ret4=$?

	if [ $ret4 -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing recipient extension (wildcard match) succeeded %47s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		> $servicedir/smtpd/variables/CHECKRECIPIENT
		(
		echo "  testing recipient extension (wildcard match) failed [$secs sec]"
		echo "tcpclient.log"
		cat $logdir/tcpclient/tcpclient.log
		)|less
		failed=1
		exit 1
	fi

	sed -i '$d' $cntrldir/recipients
	t1=$(date +"%s.%4N")
	create_tcpclient_smtp user3@$HOSTNAME
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int

	# This should fail
	tcpclient -vDHR 0 $smtp_port $testdir/tcpclient.smtp > $logdir/tcpclient/tcpclient.log 2>&1
	ret1=$?
	l1=$(tail -2 $logdir/tcpclient/tcpclient.log|sed -n 1p)
	echo "$l1"|grep "550 sorry, $user@$HOSTNAME mailbox <user3@argos.indimail.org> is absent on this domain (#5.1.1)" > /dev/null
	if [ $? -eq 0 ] ; then
		ret2=0
	else
		ret2=1
	fi
	if [ $ret1 -ne 1 -o $ret2 -ne 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3-5)}')
		> $servicedir/smtpd/variables/CHECKRECIPIENT
		(
		echo "l1=$l1"
		echo "ret1=$ret1, ret2=$ret2"
		echo "  testing recipient extension (chkrcptdomains control file) failed [$secs sec]"
		echo "tcpclient.log"
		cat $logdir/tcpclient/tcpclient.log
		)|less
		failed=1
		exit 1
	fi

	t1=$(date +"%s.%4N")
	# now test checkrcptdomains
	touch $cntrldir/chkrcptdomains
	# This should work
	tcpclient -vDHR 0 $smtp_port $testdir/tcpclient.smtp > $logdir/tcpclient/tcpclient.log 2>&1
	ret1=$?
	if [ $ret1 -ne 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3)}')
		> $servicedir/smtpd/variables/CHECKRECIPIENT
		/bin/rm -f $cntrldir/chkrcptdomains
		(
		echo "  testing recipient extension (chkrcptdomains control file) failed [$secs sec]"
		echo "tcpclient.log"
		cat $logdir/tcpclient/tcpclient.log
		)|less
		failed=1
		exit 1
	fi

	t1=$(date +"%s.%4N")
	echo "@$HOSTNAME" > $cntrldir/chkrcptdomains
	# This should fail
	tcpclient -vDHR 0 $smtp_port $testdir/tcpclient.smtp > $logdir/tcpclient/tcpclient.log 2>&1
	ret1=$?
	l1=$(tail -2 $logdir/tcpclient/tcpclient.log|sed -n 1p)
	echo "$l1"|grep "550 sorry, $user@$HOSTNAME mailbox <user3@argos.indimail.org> is absent on this domain (#5.1.1)" > /dev/null
	if [ $? -eq 0 ] ; then
		ret2=0
	else
		ret2=1
	fi
	/bin/rm -f $cntrldir/chkrcptdomains
	> $servicedir/smtpd/variables/CHECKRECIPIENT
	if [ $ret1 -eq 1 -a $ret2 -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1-5)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing recipient extension (chkrcptdomains control file) succeeded %34s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1-5)}')
		(
		echo "l1=$l1"
		echo "ret1=$ret1, ret2=$ret2"
		echo "  testing recipient extension (chkrcptdomains control file) failed [$secs sec]"
		echo "tcpclient.log"
		cat $logdir/tcpclient/tcpclient.log
		)|less
		> $servicedir/smtpd/variables/CHECKRECIPIENT
		failed=1
		exit 1
	fi
}

do_setup()
{
	t1=$(date +"%s.%4N")
	if [ -f $certdir/servercert.pem ] ; then
		echo "Starting Setup (this will take a moment)"
	else
		echo "Starting Setup (this will take some time)"
	fi
	# basic setup for maildir, assign config and queue
	sudo /bin/rm -rf $logdir
	mkdir -p $logdir/qmail-remote
	mkdir -p $logdir/mail
	mkdir -p $logdir/tcpclient
	mkdir -p $logdir/qmail-send
	mkdir -p $logdir/svscan
	mkdir -p $logdir/smtpd
	mkdir -p $logdir/qmtpd
	mkdir -p $testdir/tmp
	chmod 1777 $testdir/tmp
	mkdir -p $testdir/bin
	mkdir -p $testdir/run
	setup_maildir
	sed -e "s|/var/indimail|$qmaildir|" -e "s|/home/$user|$testdir/$user|" \
		/etc/passwd > $testdir/etc/passwd
	setup_assign
	setup_config
	setup_queue
}

srs_setup()
{
	if [ $1 -eq 1 ] ; then
		echo "$srs_domain"      > $cntrldir/srs_domain
		echo "$srs_domain:srs"  > $cntrldir/virtualdomains
		sudo sh -c "echo \"|$srsfilter\" > $qmaildir/alias/.qmail-srs-default"
		tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' \
			</dev/urandom | head -c 24 > $cntrldir/srs_secrets
		echo 7 > $cntrldir/srs_maxage
		echo 4 > $cntrldir/srs_hashlength
		echo 4 > $cntrldir/srs_hashmin
		echo = > $cntrldir/srs_separator
		echo 0 > $cntrldir/srs_alwaysrewrite
	else
		/bin/rm -f $cntrldir/srs_domain
		/bin/rm -f $cntrldir/srs_secrets
		/bin/rm -f $cntrldir/srs_maxage
		/bin/rm -f $cntrldir/srs_hashlength
		/bin/rm -f $cntrldir/srs_hashmin
		/bin/rm -f $cntrldir/srs_separator
		/bin/rm -f $cntrldir/srs_alwaysrewrite
		/bin/rm -f $cntrldir/virtualdomains
		sudo /bin/rm -f $qmaildir/alias/.qmail-srs-default
	fi
}

virtual_setup()
{
	if [ $1 -eq 1 ] ; then
		echo "$vdomain:virtual"  > $cntrldir/virtualdomains
		if [ ! -d $qmaildir/alias/virtual ] ; then
			sudo maildirmake $qmaildir/alias/virtual
		fi
		sudo chmod -R 0755 $qmaildir/alias/virtual
		sudo chown -R alias:qmail $qmaildir/alias/virtual
		sudo sh -c "echo "$qmaildir/alias/virtual/" > $qmaildir/alias/.qmail-virtual-default"
		send_pid=$(get_send_pid)
		if [ -n "$send_pid" ] ; then
			sudo kill -1 $send_pid
		fi
	else
		sudo /bin/rm -rf $qmaildir/alias/.qmail-virtual-default $qmaildir/alias/virtual
		send_pid=$(get_send_pid)
		if [ -n "$send_pid" ] ; then
			sudo kill -1 $send_pid
		fi
	fi
}

test_maildirserial()
{
	for i in 1 2 3 4 5
	do
		t1=$(date +"%s.%4N")
		(
		echo "From: $user@$hostname"
		echo "To: $user@$vdomain"
		echo "Subject: Test No $i $$"
		echo "Date: $(date -R)"
		echo
		echo "Test Message $i $$"
		) | sudo $setuidgid -g qcerts $user env - \
			QUEUEDIR=$testdir/queue \
			QMAILQUEUE=$qmail_queue \
			CONTROLDIR=$cntrldir \
			BIGTODO=0 \
			CONFSPLIT=23 \
			$qmail_inject -f$user@$HOSTNAME $user@$vdomain
		check_mail_header $qmaildir/alias/virtual Subject 0
		s1=$sleep_secs
		if [ -n "$header" ] ; then
			subj_header=$header
		else
			subj_header=""
		fi
		check_mail_header $qmaildir/alias/virtual Delivered-To 0
		s2=$sleep_secs
		total=$(echo $s1 $s2 | awk '{printf("%0.4f\n", $1+$2)}')
		if [ -n "$header" ] ; then
			dto_header=$header
		else
			dto_header=""
		fi
		if [ -n "$mail_file" ] ; then
			body=$($e822body < $qmaildir/alias/virtual/new/$mail_file)
			sudo sed -i "s/virtual-$user@$vdomain/virtual-$user@$HOSTNAME/" \
				$qmaildir/alias/virtual/new/$mail_file
			sudo mv $qmaildir/alias/virtual/new/$mail_file \
				$qmaildir/alias/virtual/cur/$mail_file
		fi
		if [ -n "$mail_file" -a "$dto_header" = "Delivered-To: virtual-$user@$vdomain" -a "$subj_header" = "Subject: Test No $i $$"  -a "$body" = "Test Message $i $$" ] ; then
			continue
		else
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $s1 $s2 | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
			(
			echo "  testing qmail-inject virtual user, qmail send+receive failed [$secs sec]"
			echo "$logdir/smtpd/smtpd.log"
			cat $logdir/smtpd/smtpd.log
			echo "$logdir/qmail-send/qmail-send.log"
			cat $logdir/qmail-send/qmail-send.log
			)|less
			failed=1
			exit 1
		fi
	done
	check_mail_count $qmaildir/alias/virtual 5
	ret=$?
	if [ $ret -eq 0 -a $mcount -eq 5 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $total $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing qmail-inject virtual user, qmail send+receive succeeded %38s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $total $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		echo "  testing qmail-inject virtual user, qmail send+receive failed [$secs sec]"
		(
		echo "ret=$ret, mcount1=$mcount"
		echo "$logdir/smtpd/smtpd.log"
		cat $logdir/smtpd/smtpd.log
		echo "$logdir/qmail-send/qmail-send.log"
		cat $logdir/qmail-send/qmail-send.log
		)|less
		failed=1
		exit 1
	fi

	sudo mkdir $qmaildir/alias/virtual/bak
	sudo cp -rp $qmaildir/alias/virtual/cur $qmaildir/alias/virtual/bak
	sleep 1
	t1=$(date +"%s.%4N")
	echo "$HOSTNAME:127.0.0.1:$smtp_port $user@$HOSTNAME abcd12345678" > $cntrldir/smtproutes
	sudo chown -R $user $qmaildir/alias/virtual
	tcpclient 0 $smtp_port maildirserial -t1209600 $qmaildir/alias/virtual "virtual-" \
		serialsmtp "virtual-" serialsmtp >$testdir/tmp/tcpclient.log 2>&1
	check_mail_count $maildir 5
	ret=$?
	if [ $ret -eq 0 -a $mcount -eq 5 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing maildirserial, serialsmtp succeeded %58s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		echo "  testing maildirserial, serialsmtp failed [$secs sec]"
		(
		echo "ret=$ret, mcount=$mcount"
		echo "$logdir/smtpd/smtpd.log"
		cat $logdir/smtpd/smtpd.log
		echo "$logdir/qmail-send/qmail-send.log"
		cat $logdir/qmail-send/qmail-send.log
		)|less
		failed=1
		exit 1
	fi
	t1=$(date +"%s.%4N")
	sudo rm -rf $qmaildir/alias/virtual/new
	sudo mv $qmaildir/alias/virtual/bak $qmaildir/alias/virtual/new
	tcpclient 0 $smtp_port maildirserial -t1209600 $qmaildir/alias/virtual "virtual-" \
		serialqmtp "virtual-" serialsmtp >$testdir/tmp/tcpclient.log 2>&1
	check_mail_count $maildir 5
	ret=$?
	if [ $ret -eq 0 -a $mcount -eq 5 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing maildirserial, serialqmtp succeeded %58s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		echo "  testing maildirserial, serialqmtp failed [$secs sec]"
		(
		echo "ret=$ret, mcount=$mcount"
		echo "$logdir/smtpd/qmtpd.log"
		cat $logdir/smtpd/smtpd.log
		echo "$logdir/qmail-send/qmail-send.log"
		cat $logdir/qmail-send/qmail-send.log
		)|less
		failed=1
		exit 1
	fi
	if [ -d $maildir ] ; then
		find $maildir -type f -exec /bin/rm -f {} \;
	fi
}

test_autoresponder()
{
	remove_mail
	t1=$(date +"%s.%4N")
	if [ $# -eq 1 ] ; then
		do_srs=$1
	else
		do_srs=0
	fi
	if [ -d $testdir/.vacation.dir ] ; then
		/bin/rm -f $testdir/.vacation.dir/*
	else
		mkdir -p $testdir/.vacation.dir
	fi
	echo "I'm on leave" > $testdir/.vacation.msg
	(
	echo "|$autoresponder -q $testdir/.vacation.msg $testdir/.vacation.dir"
	echo "$testdir/$testuser/Maildir/"
	) > $testdir/$testuser/.qmail
	subject="Testing Autoresponder"
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $testuser@$HOSTNAME"
	echo "Subject: $subject"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) > $testdir/tmp/mail.txt

	if [ $do_srs -eq 0 ] ; then
		sudo $setuidgid -g qcerts $user env - \
			QUEUEDIR=$testdir/queue \
			QMAILQUEUE=$qmail_queue \
			CONTROLDIR=$cntrldir \
			BIGTODO=0 \
			CONFSPLIT=23 \
		$qmail_inject -f$user@$HOSTNAME $testuser <$testdir/tmp/mail.txt
	else
		srs_addr=$(srs -k `cat $cntrldir/srs_secrets` -i $srs_domain $user@$HOSTNAME)
		sudo $setuidgid -g qcerts $user env - \
			QUEUEDIR=$testdir/queue \
			QMAILQUEUE=$qmail_queue \
			CONTROLDIR=$cntrldir \
			BIGTODO=0 \
			CONFSPLIT=23 \
		$qmail_inject -f$srs_addr $testuser <$testdir/tmp/mail.txt
	fi
	/bin/rm -f $testdir/tmp/mail.txt
	reply_subject="Subject: Autoreply: Re: $subject"
	count=0
	ret=1
	subject=""
	check_mail_header $maildir Subject 1
	subject=$header
	if [ "$reply_subject" = "$subject" ] ; then
		/bin/rm -f $testdir/$testuser/Maildir/new/*
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		if [ $do_srs -eq 1 ] ; then
			printf "\r  testing autoresponder with SRS decode succeeded %54s [%.4f sec]\n" " " $secs
		else
			printf "\r  testing autoresponder succeeded %70s [%.4f sec]\n" " " $secs
		fi
		print_pct
	else
		/bin/rm -f $testdir/$testuser/Maildir/new/*
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		if [ $do_srs -eq 1 ] ; then
			printf "  testing autoresponder with SRS decode failed [%.4f sec]\n" $secs
		else
			printf "\r  testing autoresponder succeeded [%.4f sec]\n" $secs
			print_pct
		fi
		(
		echo "Expected subject as $reply_subject but got $subject"
		echo "qmail-send.log"
		if [ -d $logdir/qmail-send/qmail-send.log ] ; then
			cat $logdir/qmail-send/qmail-send.log
		else
			cat $logdir/qmail-send/current
		fi
		)|less
		failed=1
		exit 1
	fi
}

test_srs()
{
	t1=$(date +"%s.%4N")
	srs_addr=$(srs -k `cat $cntrldir/srs_secrets` -i $srs_domain $user@$HOSTNAME)
	echo $srs_addr | grep "SRS0=.*=.*=$HOSTNAME=$user@$srs_domain" > /dev/null
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing create SRS forward address succeeded %57s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		printf "  testing create SRS forward address failed [%.4f sec]\n" $secs
		failed=1
		exit 1
	fi
	t1=$(date +"%s.%4N")
	srs_addr=$(srs -k `cat $cntrldir/srs_secrets` -v $srs_addr)
	if [ "$srs_addr" = "$user@$HOSTNAME" ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing SRS decode address succeeded %65s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		printf "  testing SRS decode address failed [%.4f sec]\n" $secs
		failed=1
		exit 1
	fi
	t1=$(date +"%s.%4N")
	subject="Testing SRS rewrite using qmail-inject"
	(
	echo "From: $user@$ext_domain"
	echo "To: $user@$HOSTNAME"
	echo "Subject: $subject"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) | sudo $setuidgid -g qcerts $user env - \
		QUEUEDIR=$testdir/queue \
		QMAILQUEUE=$qmail_queue \
		CONTROLDIR=$cntrldir \
		BIGTODO=0 \
		CONFSPLIT=23 \
		QMAILINJECT_FORCE_SRS=1 \
	$qmail_inject -f$user@$ext_domain $user@$HOSTNAME
	check_mail_header $maildir Return-Path 1
	srs_addr=$(srs -k `cat $cntrldir/srs_secrets` -i $srs_domain $user@$ext_domain)
	if [ "$header" = "Return-Path: <$srs_addr>" ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing SRS rewrite qmail-inject succeeded %59s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		printf "  testing SRS rewrite qmail-inject failed [%.4f sec]\n" $secs
		echo "$header != Return-Path: <$srs_addr>"
		failed=1
		exit 1
	fi

	t1=$(date +"%s.%4N")
	srs_addr=$(srs -k `cat $cntrldir/srs_secrets` -i $srs_domain $user@$HOSTNAME)
	echo 1 > $cntrldir/srs_alwaysrewrite
	swaks -S --to $srs_addr --from $user@$HOSTNAME --server localhost --port $smtp_port
	echo 0 > $cntrldir/srs_alwaysrewrite
	check_mail_header $maildir Delivered-To 1
	if [ "$header" = "Delivered-To: $user@$HOSTNAME" ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing SRS decode RCPT address qmail-smtpd succeeded %48s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
		echo "$header != Delivered-To: $user@$HOSTNAME"
		printf "  testing SRS decode RCPT address qmail-smtpd failed [%.4f sec]\n" $secs
		failed=1
		exit 1
	fi
	test_autoresponder 1
	t1=$(date +"%s.%4N")
	subject="Testing SRS decode using srsfilter"
	(
	echo "From: $user@$ext_domain"
	echo "To: $user@$HOSTNAME"
	echo "Subject: $subject"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) | sudo $setuidgid -g qcerts $user env - \
		QUEUEDIR=$testdir/queue \
		QMAILQUEUE=$qmail_queue \
		CONTROLDIR=$cntrldir \
		BIGTODO=0 \
		CONFSPLIT=23 \
		SENDER="" \
		EXT2=$srs_addr \
		HOST=$HOSTNAME \
	$srsfilter >/dev/null 2>&1
	srs_ret=$?
	check_mail_header $maildir Subject 1
	if [ $srs_ret -eq 0 -a "$header" = "Subject: $subject" ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing SRS decode using srsfilter succeeded %57s [%.4f sec]\n" " " $secs
		print_pct
	else
		printf "  testing SRS decode using srsfilter failed [%.4f sec]\n" $secs
		echo "ret=$ret, \"$header\" != \"Subject: $subject\""
		failed=1
		exit 1
	fi
}

test_alias()
{
	for alias in root mailer-daemon bumblebee
	do
		t1=$(date +"%s.%4N")
		if [ "$alias" = "root" ] ; then
			sudo /bin/rm -f $qmaildir/alias/.qmail-root
			(
			echo "$qmaildir/alias/Maildir/"
			echo "$user@$HOSTNAME"
			) > $testdir/tmp/.qmail-root
			sudo mv $testdir/tmp/.qmail-root $qmaildir/alias
			sudo chown root:qmail $qmaildir/alias/.qmail-root
		fi
		subject="Testing alias mechanism for $alias"
		(
		echo "From: $user@$HOSTNAME"
		echo "To: $alias@$HOSTNAME"
		echo "Subject: $subject"
		echo "Date: $(date -R)"
		echo
		echo "Test message for $alias"
		) | sudo $setuidgid -g qcerts $user env - \
			QUEUEDIR=$testdir/queue \
			QMAILQUEUE=$qmail_queue \
			CONTROLDIR=$cntrldir \
			BIGTODO=0 \
			CONFSPLIT=23 \
		$qmail_inject -f$user@$HOSTNAME $alias@$HOSTNAME
		if [ "$alias" = "bumblebee" ] ; then
			check_mail_header $maildir From 0
			s1=$sleep_secs
			from_header=$header
			check_mail_header $maildir Subject 1
			s2=$sleep_secs
			subj_header=$header
			if [ "$from_header" = "From: MAILER-DAEMON@$HOSTNAME" -a "$subj_header" = "Subject: failure notice" ] ; then
				a_ret=0
			else
				a_ret=1
			fi
		else
			check_mail_header $maildir To 1
			s1=$sleep_secs
			s2=0.0
			a_ret=$?
			if [ "$header" != "To: $alias@$HOSTNAME" ] ; then
				a_ret=1
			fi
		fi
		if [ $a_ret -eq 0 ] ; then
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $s1 $s2 | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
			tcount=$(expr $tcount + 1)
			if [ "$alias" = "bumblebee" ] ; then
				printf "\r  testing non-existing alias for %-13s succeeded %47s [%.4f sec]\n" $alias " " $secs
			else
				printf "\r  testing existing alias for %-13s succeeded %51s [%.4f sec]\n" $alias " " $secs
			fi
			print_pct
		else
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $s1 $s2 | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
			if [ "$alias" = "bumblebee" ] ; then
				echo "  testing non-existing alias for $alias failed [$secs sec]"
			else
				echo "  testing existing alias for $alias failed [$secs sec]"
			fi
			(
			echo "ret=$a_ret, \"$header\" != \"To: $alias@$HOSTNAME\""
			cat $logdir/qmail-send/qmail-send.log
			)|less
			failed=1
			exit 1
		fi
		if [ "$alias" = "root" ] ; then
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 $s1 $s2 | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
			tcount=$(expr $tcount + 1)
			printf "\r  testing alternate QMAILGETPW for %-13s succeeded %45s [%.4f sec]\n" $alias " " $secs
			print_pct
		fi
	done
}

test_spawn_filter()
{
	# test QMAILLOCAL
	(
	echo "#!/bin/sh"
	echo "sed -e 's/abcd/$HOSTNAME/' -e 's/Subject: .*/Subject: Testing spawn-filter/'"
	echo "exit 0"
	) > $testdir/bin/filter1
	chmod +x $testdir/bin/filter1
	echo "$HOSTNAME:local:$testdir/bin/filter1" > $cntrldir/filterargs

	t1=$(date +"%s.%4N")
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $user@$HOSTNAME"
	echo "Subject: Test message using qmail-inject"
	echo "Date: $(date -R)"
	echo
	echo "Test message from abcd"
	) | sudo $setuidgid -g qcerts $user env - \
		QUEUEDIR=$testdir/queue \
		QMAILQUEUE=$qmail_queue \
		CONTROLDIR=$cntrldir \
		BIGTODO=0 \
		CONFSPLIT=23 \
	$qmail_inject -f$user@$HOSTNAME $user@$HOSTNAME
	check_mail $maildir 1
	/bin/rm -f $cntrldir/filterargs
	if [ -n "$mail_file" ] ; then
		body=$($e822body < $maildir/new/$mail_file)
		subject=$($e822header -I Subject < $maildir/new/$mail_file)
		/bin/rm -f $maildir/new/$mail_file
	else
		body=""
		subject=""
	fi
	if [ "$body" = "Test message from $HOSTNAME" -a "$subject" = "Subject: Testing spawn-filter" ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing spawn-filter using QMAILLOCAL succeeded %54s [%.4f sec]\n" " " $secs
		print_pct
	else
		echo "  testing spawn-filter using QMAILLOCAL failed [$secs sec]"
		failed=1
		exit 1
	fi

	# test QMAILREMOTE
	# during setup we re-routed all mails to for external domains to $domain
	# using $testdir/bin/qmail-remote and $cntrldir/smtproutes
	#
	t1=$(date +"%s.%4N")
	echo "$HOSTNAME:127.0.0.1:$smtp_port" > $cntrldir/smtproutes
	echo "$HOSTNAME:remote:$testdir/bin/filter1" > $cntrldir/filterargs
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $user@$ext_domain"
	echo "Subject: Test message using qmail-inject"
	echo "Date: $(date -R)"
	echo
	echo "Test message from abcd"
	) | sudo $setuidgid -g qcerts $user env - \
		QUEUEDIR=$testdir/queue \
		QMAILQUEUE=$qmail_queue \
		CONTROLDIR=$cntrldir \
		BIGTODO=0 \
		CONFSPLIT=23 \
	$qmail_inject -f$user@$HOSTNAME $user@$ext_domain
	check_mail_header $testdir/$testuser/Maildir Subject 0
	if [ -n "$mail_file" ] ; then
		subject=$header
		body=$($e822body < $testdir/$testuser/Maildir/new/$mail_file)
		/bin/rm -f $testdir/$testuser/Maildir/new/$mail_file
	else
		body=""
		subject=""
	fi
	if [ "$body" = "Test message from $HOSTNAME" -a "$subject" = "Subject: Testing spawn-filter" ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing spawn-filter using QMAILREMOTE succeeded %53s [%.4f sec]\n" " " $secs
		print_pct
	else
		echo "  testing spawn-filter using QMAILREMOTE failed [$secs sec]"
		failed=1
		exit 1
	fi
	/bin/rm -f $cntrldir/filterargs $cntrldir/smtproutes
}

do_without_svscan()
{
	# use qmail-start to start qmail-send
	run_qmail_send
	send_pid=$(get_send_pid)
	if [ $? -ne 0 ] ; then
		exit 1
	fi
	test_qmail_inject $user $user $user
	test_alias

	printf "\rTesting qmail-local internal filterit command %71s\n" " "
	t1x=$(date +"%s.%4N")
	test_filterit 1
	x1=$filterit_test1
	x2=$filterit_test2
	x3=$filterit_test3
	printf "\rTesting qmail-local external filterit command %71s\n" " "
	t2x=$(date +"%s.%4N")
	test_filterit 2
	t3x=$(date +"%s.%4N")
	x1=$(echo "$filterit_test1 >= $x1" | bc -l)
	x2=$(echo "$filterit_test2 >= $x2" | bc -l)
	x3=$(echo "$filterit_test3 >= $x3" | bc -l)
	diff=$(echo $t1x $t2x $t3x | awk '{print $3-$2-($2-$1)}')
	t=$(echo "$diff > 0.0" | bc -l)
	if [ $t -eq 1 ] ; then
		secs=$(echo $t1x $t3x | awk '{printf("%0.4f\n", $2-$1)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing filterit internal faster by %2.4f sec than external command succeeded %23s [%.4f sec]\n" $diff " " $secs
		print_pct
	else
		secs=$(echo $t1x $t3x | awk '{printf("%0.4f\n", $2-$1)}')
		echo "  testing filterit internal faster [$diff sec] than external command failed [$secs sec]"
	fi

	# start smtp using tcpserver
	printf "\r%118s\n" " "
	printf "\rStarting SMTP/QMTP using tcpserver\n"
	start_tcpserver_smtp
	start_tcpserver_qmtp
	sleep $sleep_int

	test_spawn_filter

	srs_setup 1
	test_srs
	srs_setup 0

	virtual_setup 1
	test_maildirserial
	terminate_smtp_qmtp $qmtp_pid
	virtual_setup 0

	create_authsmtp
	test_qmail_remote_auth "PLAIN"
	test_qmail_remote_auth "LOGIN"
	test_qmail_remote_auth "CRAM-MD5"
	test_qmail_remote_routing
	test_qmail_remote_auth_cdb
	test_qmail_remote_starttls
	test_smtp_tls
	test_smtp_notls
	test_smtp_dkimverify
	test_smtp_bogofilter
	test_smtp_invalid_auth
	test_smtp_auth_login
	test_smtp_auth_plain
	test_smtp_auth_cram_md5
	test_tcpclient_script 1 # test smtp using tcpclient
	terminate_smtp_qmtp $smtp_pid

	# start smtps using tcpserver
	for i in TLSv1_2 TLSv1_3
	do
		start_tcpserver_smtps $i
		if [ -n "$i" ] ; then
			test_smtps "mail doing SMTPS with swaks     qmail-smtpd-TLS=$i"
		else
			test_smtps "mail doing SMTPS with swaks     qmail-smtpd-TLS=auto"
		fi
		echo $i > $cntrldir/tlsclientmethod
		test_qmail_remote_smtps
		for j in TLSv1_2 TLSv1_3
		do
			test_tcpclient_script 2 $j # test smtps using tcpclient
		done
		terminate_smtp_qmtp $smtp_pid
	done

	start_tcpserver_smtp_unix
	smtp_pid=$(/bin/ps -ef|grep $smtp_socket|grep qmail-smtpd|awk '{print $2}')
	test_tcpclient_script 3 # test smtp using tcpclient
	terminate_smtp_qmtp $smtp_pid

	start_tcpserver_smtps_unix
	smtp_pid=$(/bin/ps -ef|grep $smtp_socket|grep qmail-smtpd|awk '{print $2}')
	test_tcpclient_script 4 # test smtps using tcpclient
	terminate_smtp_qmtp $smtp_pid

	# terminate qmail-send
	terminate_send $send_pid
}

test_qmqp()
{
	t1=$(date +"%s.%4N")
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	if [ -z "$svpid" ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		echo "  testing qmail-qmqpd startup failed (svscan not running) [$secs sec]"
		failed=1
		exit 1
	fi
	mkdir -p $servicedir/qmqpd/variables
	mkdir -p $servicedir/qmqpd/log
	echo 1              > $servicedir/qmqpd/variables/USE_QPWGR
	echo 0              > $servicedir/qmqpd/variables/BIGTODO
	echo 23             > $servicedir/qmqpd/variables/CONFSPLIT
	echo $cntrldir      > $servicedir/qmqpd/variables/CONTROLDIR
	echo $testdir/queue > $servicedir/qmqpd/variables/QUEUEDIR
	echo "127.0.0.1"    > $cntrldir/qmqpservers
	(
	printf "#!/bin/sh\nexec $envdir ./variables $tcpserver -u qmaild -g qmail -v -HR 0 "
	printf "$qmqp_port $qmail_qmqpd 2>&1\n"
	) > $servicedir/qmqpd/run
	printf "#!/bin/sh\nexec $multilog t $logdir/qmqpd\n" > $servicedir/qmqpd/log/run
	chmod +x $servicedir/qmqpd/run
	chmod +x $servicedir/qmqpd/log/run
	sudo kill -1 $svpid
	sleep $sleep_int
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $testuser@$HOSTNAME"
	echo "Subject: Testing QMQP protocol $$"
	echo "Date: $(date -R)"
	echo
	echo "QMQP Test message from $HOSTNAME"
	) | sudo $setuidgid -g qcerts $user env - \
			QUEUEDIR=$testdir/queue \
			QMAILQUEUE=$qmail_qmqpc \
			CONTROLDIR=$cntrldir \
			BIGTODO=0 \
			CONFSPLIT=23 \
			PORT_QMQP=$qmqp_port \
	$qmail_inject -f$user@$hostname $testuser@$hostname
	check_mail_header $testdir/$testuser/Maildir Subject 0
	if [ -n "$mail_file" ] ; then
		subject=$header
		body=$($e822body < $testdir/$testuser/Maildir/new/$mail_file)
		/bin/rm -f $testdir/$testuser/Maildir/new/$mail_file
	else
		body=""
		subject=""
	fi
	if [ "$body" = "QMQP Test message from $HOSTNAME" -a "$subject" = "Subject: Testing QMQP protocol $$" ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing qmail-qmqpc,  qmail-qmqpd succeeded %58s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		echo "  testing qmail-qmqpc, qmail-qmqpd failed [$secs sec]"
		(
		echo "body=$body"
		echo "subject$subject"
		cat $logdir/qmqpd/current
		)|less
		failed=1
		exit 1
	fi
}

test_qmtp()
{
	t1=$(date +"%s.%4N")
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	if [ -z "$svpid" ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		echo "  testing qmail-qmtpd startup failed (svscan not running) [$secs sec]"
		failed=1
		exit 1
	fi
	mkdir -p $servicedir/qmtpd/variables
	mkdir -p $servicedir/qmtpd/log
	echo 1              > $servicedir/qmtpd/variables/USE_QPWGR
	echo 0              > $servicedir/qmtpd/variables/BIGTODO
	echo 23             > $servicedir/qmtpd/variables/CONFSPLIT
	echo $cntrldir      > $servicedir/qmtpd/variables/CONTROLDIR
	echo $testdir/queue > $servicedir/qmtpd/variables/QUEUEDIR
	(
	printf "#!/bin/sh\nexec $envdir ./variables $tcpserver -u qmaild -g qmail -v -HR 0 "
	printf "$qmtp_port $qmail_qmtpd 2>&1\n"
	) > $servicedir/qmtpd/run
	printf "#!/bin/sh\nexec $multilog t $logdir/qmtpd\n" > $servicedir/qmtpd/log/run
	chmod +x $servicedir/qmtpd/run
	chmod +x $servicedir/qmtpd/log/run
	sudo kill -1 $svpid
	sleep $sleep_int

	(
	echo "From: $user@$HOSTNAME"
	echo "To: $testuser@$HOSTNAME"
	echo "Subject: Testing QMTP protocol $$"
	echo "Date: $(date -R)"
	echo
	echo "QMTP Test message from $HOSTNAME"
	) > $testdir/tmp/mail.txt

	size=$(ls -l $testdir/tmp/mail.txt|awk '{print $5}')
	env - QMTPROUTE="$HOSTNAME:127.0.0.1:$qmtp_port" CONTROLDIR="$cntrldir" \
		$qmail_remote $HOSTNAME $user@$HOSTNAME "" $size $testuser@$HOSTNAME </$testdir/tmp/mail.txt \
		> $logdir/qmail-remote/qmail-remote.log
	/bin/rm -f $testdir/tmp/mail.txt
	check_mail_header $testdir/$testuser/Maildir Subject 0
	if [ -n "$mail_file" ] ; then
		subject=$header
		body=$($e822body < $testdir/$testuser/Maildir/new/$mail_file)
		/bin/rm -f $testdir/$testuser/Maildir/new/$mail_file
	else
		body=""
		subject=""
	fi
	if [ "$body" = "QMTP Test message from $HOSTNAME" -a "$subject" = "Subject: Testing QMTP protocol $$" ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing qmail-remote, qmail-qmtpd succeeded %58s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		(
		echo "body=$body"
		echo "subject=$subject"
		echo "  testing qmail-remote, qmail-qmtpd failed [$secs sec]"
		cat $logdir/qmtpd/current
		)|less
		failed=1
		exit 1
	fi
}

test_hide_host_ip()
{
	t1=$(date +"%s.%4N")
	(
	printf "#!/bin/sh\nexec $envdir ./variables $tcpserver -u qmaild -g qmail -v -HR 127.0.0.1 "
	printf "$smtp_port env HIDE_HOST=1 $qmail_smtpd $HOSTNAME $testdir/bin/authsmtp "
	printf "/bin/false 2>&1\n"
	) >$servicedir/smtpd/run
	echo 1 > $servicedir/smtpd/variables/SMTPS
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int
	swaks -S --to $user@$HOSTNAME --from $user@$HOSTNAME --server 127.0.0.1 --port $smtp_port \
		--a LOGIN -au $user@$HOSTNAME -ap "abcd12345678" --tls-on-connect >/dev/null
	check_mail_header $maildir Received 0
	if [ -n "$mail_file" ] ; then
		$e822header -I Received < $maildir/new/$mail_file > $testdir/tmp/header
		/bin/rm -f $mail_file
		l1=$(sed -n 1p < $testdir/tmp/header)
		l2=$(sed -n 2p < $testdir/tmp/header)
		l3=$(sed -n 4p < $testdir/tmp/header)
		echo $l1 | grep $HOSTNAME > /dev/null
		ret1=$?
		echo $l2 | grep 127.0.0.1 > /dev/null
		ret2=$?
		echo $l3 | grep $HOSTNAME > /dev/null
		ret3=$?
		echo $l3 | grep 127.0.0.1 > /dev/null
		ret4=$?
	else
		ret1=0
		ret2=0
		ret3=0
		ret4=0
	fi
	if [ $ret1 -ne 0 -a $ret2 -ne 0 -a $ret3 -ne 0 -a $ret4 -ne 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing hide host, ip in received headers succeeded %50s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_int $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		echo "  testing hide host, ip in received heades failed [$secs sec]"
		(
		echo "l1=[$l1] (host), l2=[$l2] (ip), l3=[$l3] (host+ip)"
		echo "ret1=$ret1, ret2=$ret2, ret3=$ret3, ret4=$ret4"
		echo "header$header"
		cat $logdir/smtpd/current
		)|less
		failed=1
		exit 1
	fi
	(
	printf "#!/bin/sh\nexec $envdir ./variables $tcpserver -u qmaild -g qmail -v -HR 0 "
	printf "$smtp_port env HIDE_HOST=1 $qmail_smtpd $HOSTNAME $testdir/bin/authsmtp "
	printf "/bin/false 2>&1\n"
	) >$servicedir/smtpd/run
	/bin/rm -f $servicedir/smtpd/variables/SMTPS
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int
}

do_svscan_without_svscanlog()
{
	t1=$(date +"%s.%4N")
	# start svscan without svscanlog
	printf "\r%118s\n" " "
	echo "Starting svscan services without svscanlog"
	setup_svscan_basic
	start_svscan_without_svscanlog
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	create_authsmtp
	test_smtps "mail using SMTPS by qmail-smtpd"
	test_qmqp
	test_qmtp
	test_smtp_secure_auth
	test_recipients
	test_smtp_cugmail
	test_smtp_chk_sender
	test_smtp_surbl
	test_autoresponder 0
	test_qmail_qfilter
	test_stop_smtps
	test_stop_supervise
	test_restart_service_using_hup
	test_restart_service_using_svc
	test_multilog
	start_new_service
	remove_new_service
	test_hide_host_ip
	test_blocked
	test_blocked 1
}

do_svscan_with_svscanlog()
{
	t1=$(date +"%s.%4N")
	# start svscan with svscanlog
	printf "\r%118s\n" " "
	echo "Starting svscan services with svscanlog"
	setup_svscan_basic
	setup_svscan_with_svscanlog
	(
	printf "#!/bin/sh\nexec $envdir ./variables $tcpserver -n $certdir/servercert.pem -u qmaild -g qmail -HR 0 "
	printf "$smtp_port $qmail_smtpd $HOSTNAME $testdir/bin/authsmtp "
	printf "/bin/false 2>&1\n"
	) > $servicedir/smtpd/run
	/bin/rm -f $servicedir/smtpd/variables/SMTPS
	start_svscan_with_svscanlog
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	test_svscan_log
	test_svscan_run
	test_smtps "mail using SMTPS by tcpserver"
	test_svscan_shutdown

	# start svscan with svscanlog and AUTOSCAN
	echo 1 > $servicedir/.svscan/variables/AUTOSCAN
	echo 5 > $servicedir/.svscan/variables/SCANINTERVAL
	start_svscan_with_svscanlog
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	start_new_service 1
	test_supervise_subreaper
	remove_new_service
}

test_qmail_qfilter()
{
	t1=$(date +"%s.%4N")
	echo $testdir/bin/qfrontend > $servicedir/smtpd/variables/QMAILQUEUE
	printf "#!/bin/sh\nexec $envdir ./variables $tcpserver -u qmaild -g qmail -HR 0 $smtp_port $qmail_smtpd 2>&1\n" \
		> $servicedir/smtpd/run
	(
	echo "#!/bin/sh"
	echo "exec qmail-qfilter $testdir/bin/filter1 -- $testdir/bin/filter2"
	) > $testdir/bin/qfrontend
	(
	echo "#!/bin/sh"
	echo "sed -e 's/abcd/$HOSTNAME/' -e 's/Subject: .*/Subject: Testing qmail-qfilter/'"
	echo "exit 0"
	) > $testdir/bin/filter1
	(
	echo "#!/bin/sh"
	echo "cat"
	echo "echo Recipients"
	echo "echo \$QMAILRCPTS"
	echo "echo \"Envelope Size \$ENVSIZE\""
	echo "echo \"Message Size \$MSGSIZE\""
	echo "echo Regards Manny"
	echo "exit 0"
	) > $testdir/bin/filter2

	sudo svc -r $servicedir/smtpd
	sleep $sleep_int
	/bin/rm -f $servicedir/smtpd/variables/QMAILQUEUE
	chmod +x $testdir/bin/qfrontend $testdir/bin/filter1 $testdir/bin/filter2
	(
	echo "Sending mail from abcd"
	) | swaks -S --header "Subject: Test Mail" --to $user@$HOSTNAME --from $user@$HOSTNAME \
		--server localhost --port $smtp_port --body -
	check_mail_header $maildir Subject 1
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		tcount=$(expr $tcount + 1)
		printf "\r  testing qmail-qfilter succeeded %70s [%.4f sec]\n" " " $secs
		print_pct
	else
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs $sleep_int | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		echo "  testing qmail-qfilter failed [$secs sec]"
		failed=1
		exit 1
	fi
	(
	printf "#!/bin/sh\nexec $envdir ./variables $tcpserver -u qmaild -g qmail -v -HR 0 "
	printf "$smtp_port $qmail_smtpd $HOSTNAME $testdir/bin/authsmtp "
	printf "/bin/false 2>&1\n"
	) > $servicedir/smtpd/run
	sudo svc -r $servicedir/smtpd
	sleep $sleep_int
	return 0
}

test_filterit()
{
	t1=$(date +"%s.%4N")
	(
	if [ $1 -eq 1 ] ; then
		echo "| filterit -xr -h X-QHPSI -k clean -c Equals -a Maildir -A ./Maildir/.Quarantine/ -d exit -D 0"
		echo "| filterit -x -h X-Bogosity -k Yes -c \"Starts with\" -a Maildir -A ./Maildir/.Spam/ -d exit -D 0"
	else
		echo "| $filterit -xr -h X-QHPSI -k clean -c Equals -a Maildir -A ./Maildir/.Quarantine/ -d exit -D 0"
		echo "| $filterit -x -h X-Bogosity -k Yes -c \"Starts with\" -a Maildir -A ./Maildir/.Spam/ -d exit -D 0"
	fi
	echo "./Maildir/"
	) > $testdir/$testuser/.qmail
	if [ $1 -eq 1 ] ; then
	subject="Testing qmail-local internal filterit command"
	else
	subject="Testing qmail-local external filterit command"
	fi
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $testuser@$HOSTNAME"
	echo "Subject: $subject"
	echo "Date: $(date -R)"
	echo "X-QHPSI: clean"
	echo
	echo "Test message"
	) | sudo $setuidgid -g qcerts $user env - \
		QUEUEDIR=$testdir/queue \
		QMAILQUEUE=$qmail_queue \
		CONTROLDIR=$cntrldir \
		BIGTODO=0 \
		CONFSPLIT=23 \
	$qmail_inject -f$user@$HOSTNAME $testuser
	check_mail $testdir/$testuser/Maildir
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		filterit_test1=$secs
		if [ $1 -eq 1 ] ; then
			printf "\r  testing internal filterit with no-match succeeded %52s [%.4f sec]\n" " " $secs
		else
			printf "\r  testing external filterit with no-match succeeded %52s [%.4f sec]\n" " " $secs
		fi
		print_pct
	else
		sudo kill $send_pid
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		if [ $1 -eq 1 ] ; then
			echo "  testing internal filterit with no-match failed [$secs sec]"
		else
			echo "  testing external filterit with no-match failed [$secs sec]"
		fi
		cat $logdir/qmail-send/qmail-send.log
		)|less
		failed=1
		exit 1
	fi

	t1=$(date +"%s.%4N")
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $testuser@$HOSTNAME"
	echo "Subject: $subject"
	echo "Date: $(date -R)"
	echo "X-QHPSI: virus infected"
	echo
	echo "Test message"
	) | sudo $setuidgid -g qcerts $user env - \
		QUEUEDIR=$testdir/queue \
		QMAILQUEUE=$qmail_queue \
		CONTROLDIR=$cntrldir \
		BIGTODO=0 \
		CONFSPLIT=23 \
	$qmail_inject -f$user@$HOSTNAME $testuser
	check_mail $testdir/$testuser/Maildir/.Quarantine
	if [ $? -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		filterit_test2=$secs
		tcount=$(expr $tcount + 1)
		if [ $1 -eq 1 ] ; then
			printf "\r  testing internal filterit with negative match deliver to folder succeeded %28s [%.4f sec]\n" " " $secs
		else
			printf "\r  testing external filterit with negative match deliver to folder succeeded %28s [%.4f sec]\n" " " $secs
		fi
		print_pct
	else
		sudo kill $send_pid
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $sleep_secs | awk '{printf("%0.4f\n", $2-$1-$3)}')
		(
		if [ $1 -eq 1 ] ; then
			echo "  testing internal filterit with negative match deliver to folder failed [$secs sec]"
		else
			echo "  testing external filterit with negative match deliver to folder failed [$secs sec]"
		fi
		cat $logdir/qmail-send/qmail-send.log
		)|less
		failed=1
		exit 1
	fi

	t1=$(date +"%s.%4N")
	(
	echo "From: $user@$HOSTNAME"
	echo "To: $testuser@$HOSTNAME"
	echo "Subject: $subject"
	echo "Date: $(date -R)"
	echo "X-Bogosity: No, spamicity=0.520000, cutoff=9.90e-01, ham_cutoff=0.00e+00,version=1.0.0,register-No 42 words 1 msg"
	echo
	echo "Test message"
	) | sudo $setuidgid -g qcerts $user env - \
		QUEUEDIR=$testdir/queue \
		QMAILQUEUE=$qmail_queue \
		CONTROLDIR=$cntrldir \
		BIGTODO=0 \
		CONFSPLIT=23 \
	$qmail_inject -f$user@$HOSTNAME $testuser
	check_mail $testdir/$testuser/Maildir
	ret1=$?
	s1=$sleep_secs

	(
	echo "From: $user@$HOSTNAME"
	echo "To: $testuser@$HOSTNAME"
	echo "Subject: $subject"
	echo "Date: $(date -R)"
	echo "X-Bogosity: Yes, spamicity=0.520000, cutoff=9.90e-01, ham_cutoff=0.00e+00,version=1.0.0,register-No 42 words 1 msg"
	echo
	echo "Test message"
	) | sudo $setuidgid -g qcerts $user env - \
		QUEUEDIR=$testdir/queue \
		QMAILQUEUE=$qmail_queue \
		CONTROLDIR=$cntrldir \
		BIGTODO=0 \
		CONFSPLIT=23 \
	$qmail_inject -f$user@$HOSTNAME $testuser
	check_mail $testdir/$testuser/Maildir/.Spam
	ret2=$?
	s2=$sleep_secs

	if [ $ret1 -eq 0 -a $ret2 -eq 0 ] ; then
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $s1 $s2 | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		filterit_test3=$secs
		tcount=$(expr $tcount + 1)
		if [ $1 -eq 1 ] ; then
			printf "\r  testing internal filterit with positive match deliver to folder succeeded %28s [%.4f sec]\n" " " $secs
		else
			printf "\r  testing external filterit with positive match deliver to folder succeeded %28s [%.4f sec]\n" " " $secs
		fi
		print_pct
	else
		sudo kill $send_pid
		t2=$(date +"%s.%4N")
		secs=$(echo $t1 $t2 $s1 $s2 | awk '{printf("%0.4f\n", $2-$1-$3-$4)}')
		(
		if [ $1 -eq 1 ] ; then
			echo "  testing internal filterit with positive match deliver to folder failed [$secs sec]"
		else
			echo "  testing external filterit with positive match deliver to folder failed [$secs sec]"
		fi
		cat $logdir/qmail-send/qmail-send.log
		)|less
		failed=1
		exit 1
	fi
}

do_spf_tests()
{
	echo "Starting SPF Tests"
	count=1
	while read line
	do
		t1=$(date +"%s.%4N")
		first=${line:0:1}
		if [ "$first" = "#" ] ; then
			count=$(expr $count + 1)
			continue
		fi
		exit_val=$(echo $line |cut -d: -f1)
		cmd=$(echo $line |cut -d: -f2-)
		$cmd > /tmp/spf.out 2>/tmp/spf.err
		ret=$?
		if [ $ret -eq $exit_val ] ; then
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
			tcount=$(expr $tcount + 1)
			if [ $verbose -gt 0 ] ; then
				l1=$(cat /tmp/spf.out|sed -n 1p)
				l2=$(cat /tmp/spf.out|sed -n 2p)
				echo "  $l1"
				echo "  $l2"
			fi
			printf "\r  testing spf test%02d succeded ret=%d == %d %63s [%0.4f sec]\n" $count $ret $exit_val " " $secs
			print_pct
		else
			printf "\r"
			t2=$(date +"%s.%4N")
			secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
			cat /tmp/spf.err
			l1=$(cat /tmp/spf.out|sed -n 1p)
			l2=$(cat /tmp/spf.out|sed -n 2p)
			echo "  $l1"
			echo "  $l2"
			/bin/rm -f /tmp/spf.out /tmp/spf.err
			printf "  testing spf test%02d failed   ret=%d == %d [%0.4f sec]\n" $count $ret $exit_val $secs
			failed=1
			exit 1
		fi
		count=$(expr $count + 1)
	done < spfquery.txt
	/bin/rm -f /tmp/spf.out /tmp/spf.err
}

do_dkim_tests()
{
	t1=$(date +"%s.%4N")
	printf "\r%126s\r" " "
	echo "Starting DKIM Tests"
	mkdir -p $testdir
	if [ ! -d $domainkey_dir ] ; then
		mkdir -p $domainkey_dir
	fi
	/bin/rm -f $cntrldir/dkimkeys
	for i in example.com example.org
	do
		if [ ! -d $domainkey_dir/$i ] ; then
			sudo mkdir -p $domainkey_dir/$i
		fi
		if [ ! -f $domainkey_dir/$i/default ] ; then
			echo "Creating private key bits 4096 $domainkey_dir/$i/default"
			sudo $dknewkey -e -b 4096 $domainkey_dir/$i/default >$out
			sudo chmod 644 $domainkey_dir/$i/default
		fi
		if [ ! -f $domainkey_dir/$i/dkimkeys1 ] ; then
			echo "Creating private key bits 2048 $domainkey_dir/$i/dkimkeys1"
			sudo $dknewkey -e -b 2048 $domainkey_dir/$i/dkimkeys1 >$out
			sudo chmod 644 $domainkey_dir/$i/dkimkeys1
		fi
		if [ ! -f $domainkey_dir/$i/dkimkeys2 ] ; then
			echo "Creating private key $domainkey_dir/$i/dkimkeys2"
			sudo $dknewkey -e -t ed25519 $domainkey_dir/$i/dkimkeys2 >$out
			sudo chmod 644 $domainkey_dir/$i/dkimkeys2
		fi
	done

	for i in test default
	do
		if [ ! -f $domainkey_dir/$i ] ; then
			echo "Creating private key bits 4096 $domainkey_dir/$i"
			sudo $dknewkey -e -b 4096 $domainkey_dir/$i >$out
			sudo chmod 644 $domainkey_dir/$i
		fi
	done

	for i in example.com example.org
	do
		if [ ! -d $domainkey_dir/$i ] ; then
			sudo mkdir -p $domainkey_dir/$i
		fi
		if [ ! -f $domainkey_dir/$i/ed25519 ] ; then
			echo "Creating private key $domainkey_dir/$i/ed25519"
			sudo $dknewkey -e -t ed25519 $domainkey_dir/$i/ed25519 >$out
			sudo chmod 644 $domainkey_dir/$i/ed25519
		fi
	done
	mkdir -p $cntrldir

	# Test No 1
	failed=0
	printf "\r%126s\r" " "
	echo "testing real domain $real_domain (rsa2048,rsa4096,ed25519) using dkim with selector from dns"
	for k in $real_domain_rsa2048 $real_domain_rsa4096 $real_domain_ed25519
	do
		case $k in
			$real_domain_rsa2048)
			printf "\r%126s\r" " "
			echo "    testing rsa2048"
			;;
			$real_domain_rsa4096)
			printf "\r%126s\r" " "
			echo "    testing rsa4096"
			;;
			$real_domain_ed25519)
			printf "\r%126s\r" " "
			echo "    testing ed25519"
			;;
		esac
		if [ $verbose -gt 0 ] ; then
			echo "testing real domain $real_domain $ktype DKIM record"
		fi
		ktype=$(cat $k.pub| grep "k="|sed 's/v=DKIM1;//'|cut -d= -f2|cut -d';' -f1)
		case $ktype in
			"rsa")
			enc="2"
			;;
			"ed25519")
			enc="4"
			;;
		esac
		(
		echo "From: postmaster@$real_domain"
		echo "To: postmaster@$real_domain"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) > $testdir/tmp/mail.txt
		(cat $testdir/tmp/mail.txt | $bindir/dkim -z $enc -s "$k"; cat $testdir/tmp/mail.txt) | $bindir/dkim -v > $out
		ret=$?
		/bin/rm -f $testdir/tmp/mail.txt
		if [ $ret -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			if [ $verbose -gt 0 ] ; then
				echo "SUCCESS: [ret=$ret] domain=$real_domain key=$k"
				echo
			fi
			echo SUCCESS ======================== >$out
			print_pct
		else
			echo "FAILED : [ret=$ret] domain=$real_domain key=$k"
			echo
			echo FAILURE [$ret] ======================== >$out
			echo >>$out
			failed=1
		fi
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		printf "\r  Success%118s\n" " "
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for real domain $real_domain (rsa2048,rsa4096,ed25519) using $dkim with selector from dns"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for real domain $real_domain (rsa2048,rsa4096,ed25519) using $dkim with selector from dns"
	fi

	# Test No 2
	failed=0
	printf "\r%126s\r" " "
	echo "testing multi-signature real domain $real_domain (rsa4096+ed25519) signing+verification by dkim with selector from dns"
	if [ $verbose -gt 0 ] ; then
		echo "testing real domain $real_domain multi DKIM record"
	fi
	(
	echo "From: postmaster@$real_domain"
	echo "To: postmaster@$real_domain"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) > $testdir/tmp/mail.txt
	(cat $testdir/tmp/mail.txt | $bindir/dkim -z 2 -s $real_domain_rsa4096 -z 4 -s $real_domain_ed25519; cat $testdir/tmp/mail.txt) | $bindir/dkim -vV >$out 2>/tmp/err.out
	ret=$?
	/bin/rm -f $testdir/tmp/mail.txt
	grep Signature /tmp/err.out | sed -e 's/Signature #/    Signature/g' \
		-e 's/01/rsa-256/' -e 's/02/ed25519/' -e 's/Failure.*/Failure - Correct/'
	if [ $ret -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		if [ $verbose -gt 0 ] ; then
			echo "SUCCESS: [ret=$ret] domain=$real_domain key=$real_domain_rsa4096+$real_domain_ed25519"
			echo
		fi
		echo SUCCESS ======================== >$out
		print_pct
	else
		echo "FAILED : [ret=$ret] domain=$real_domain key=$real_domain_rsa4096+$real_domain_ed25519"
		echo
		echo FAILURE [$ret] ======================== >$out
		echo >>$out
		failed=1
	fi

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		printf "\r  Success%118s\n" " "
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for multi-signature real domain $real_domain (rsa4096+ed25519) using $dkim with selector from dns"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for multi-signature real domain $real_domain (rsa4096+ed25519) using $dkim with selector from dns"
	fi

	# Test No 3
	failed=0
	printf "\r%126s\r" " "
	echo "testing multi-signature real domain $real_domain (rsa4096+ed25519) signing by qmail-dkim, verification by dkim with selector from dns"
	if [ $verbose -gt 0 ] ; then
		echo "testing real domain $real_domain multi DKIM record"
	fi
	(
	echo "From: postmaster@$real_domain"
	echo "To: postmaster@$real_domain"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) | env - \
			CONTROLDIR=/tmp \
			DKIMSIGN="$real_domain_rsa4096" \
			DKIMSIGNOPTIONS="-z 2" \
			DKIMSIGNEXTRA="$real_domain_ed25519" \
			DKIMSIGNOPTIONSEXTRA="-z 4" \
			DKIMQUEUE=/bin/cat \
			$qmail_dkim | $bindir/dkim -vV >$out 2>/tmp/err.out
	ret=$?
	grep Signature /tmp/err.out | sed -e 's/Signature #/    Signature/g' \
		-e 's/01/ed25519/' -e 's/02/rsa-256/' -e 's/Failure.*/Failure - Correct/'
	if [ $ret -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		if [ $verbose -gt 0 ] ; then
			echo "SUCCESS: [ret=$ret] domain=$real_domain key=$real_domain_rsa4096+$real_domain_ed25519"
			echo
		fi
		echo SUCCESS ======================== >$out
		print_pct
	else
		echo "FAILED : [ret=$ret] domain=$real_domain key=$real_domain_rsa4096+$real_domain_ed25519"
		echo
		echo FAILURE [$ret] ======================== >$out
		echo >>$out
		failed=1
	fi

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		printf "\r  Success%118s\n" " "
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for multi-signature real domain $real_domain (rsa4096+ed25519) using $dkim with selector from dns"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for multi-signature real domain $real_domain (rsa4096+ed25519) using $dkim with selector from dns"
	fi

	# Test No 4
	failed=0
	printf "\r%126s\r" " "
	echo "testing real domain $real_domain (rsa2048+rsa4096+ed25519) using qmail-dkim with selector from dns"
	for k in $real_domain_rsa2048 $real_domain_rsa4096 $real_domain_ed25519
	do
		if [ $verbose -gt 0 ] ; then
			echo "testing real domain $real_domain"
		fi
		case $k in
			$real_domain_rsa2048)
			printf "\r%126s\r" " "
			echo "    testing rsa2048"
			;;
			$real_domain_rsa4096)
			printf "\r%126s\r" " "
			echo "    testing rsa4096"
			;;
			$real_domain_ed25519)
			printf "\r%126s\r" " "
			echo "    testing ed25519"
			;;
		esac
		ktype=$(cat $k.pub| grep "k="|sed 's/v=DKIM1;//'|cut -d= -f2|cut -d';' -f1)
		case $ktype in
			"rsa")
			enc="2"
			;;
			"ed25519")
			enc="4"
			;;
		esac
		(
		echo "From: postmaster@$real_domain"
		echo "To: postmaster@$real_domain"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | env - \
			DKIMSIGN="$k" \
			DKIMSIGNOPTIONS="-z $enc" \
			DKIMQUEUE=/bin/cat \
			$qmail_dkim | env - \
				DKIMVERIFY="" \
				DKIMQUEUE=/bin/cat \
				$qmail_dkim > $out
		ret=$?
		if [ $ret -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			if [ $verbose -gt 0 ] ; then
				echo "SUCCESS: [ret=$ret] domain=$real_domain key=$real_domain_key"
				echo
			fi
			echo SUCCESS ======================== >$out
			print_pct
		else
			echo "FAILED : [ret=$ret] domain=$real_domain key=$real_domain_key"
			echo
			echo FAILURE [$ret] ======================== >$out
			echo >>$out
			failed=1
		fi
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		printf "\r  Success%118s\n" " "
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for real domain $real_domain (rsa2048,rsa4096,ed25519) using $qmail_dkim with selector from dns"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for real domain $real_domain (rsa2048,rsa4096,ed25519) using $qmail_dkim with selector from dns"
	fi

	# Test No 5
	printf "\r%126s\r" " "
	echo "testing dkim with different key types (rsa2048,rsa4096,ed25519) signing+verification by dkim"
	failed=0
	for i in dkimkeys1 default ed25519
	do
		if [ $verbose -gt 0 ] ; then
			echo testing key type $i
		fi
		if [ "$i" = "ed25519" ] ; then
			enc=4
		else
			enc=2
		fi
		case $i in
			dkimkeys1)
			echo "    testing rsa2048"
			;;
			default)
			echo "    testing rsa4096"
			;;
			ed25519)
			echo "    testing ed25519"
			;;
		esac
		for j in example.com example.org
		do
			printf "\r%126s\r" " "
			selector=$(cat $domainkey_dir/$j/$i.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
			if [ $verbose -gt 0 ] ; then
				echo "($dkim -z $enc -s $domainkey_dir/$j/$i <$testdir/tmp/mail.txt;cat $testdir/tmp/mail.txt) | $dkim -v -T $selector"
			fi
			(
			echo "From: postmaster@$j"
			echo "To: postmaster@$j"
			echo "Subject: Test"
			echo "Date: $(date -R)"
			echo
			echo "Test message"
			) > $testdir/tmp/mail.txt
			(cat $testdir/tmp/mail.txt | $dkim -z $enc -s $domainkey_dir/$j/$i; cat $testdir/tmp/mail.txt) | $dkim -v -T "$selector" > $out
			ret=$?
			/bin/rm -f $testdir/tmp/mail.txt
			if [ $ret -eq 0 ] ; then
				tcount=$(expr $tcount + 1)
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret]  $selector"
					echo
				fi
				echo SUCCESS ======================== >$out
				print_pct
			else
				echo "FAILED : [ret=$ret] domain=$j key=$domainkey_dir/$j/$i $selector"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
				failed=1
			fi
		done
		printf "\r%126s\r" " "
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		printf "\r  Success%118s\n" " "
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for $dkim with different key types (rsa,ed25519)"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for $dkim with different key types (rsa,ed25519)"
	fi

	# Test No 6
	printf "\r%126s\r" " "
	echo "testing multi-signature signing+verification by dkim"
	failed=0
	for i in example.com example.org
	do
		key1=$domainkey_dir/$i/default
		key2=$domainkey_dir/$i/ed25519
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) > $testdir/tmp/mail.txt
		(cat $testdir/tmp/mail.txt | $dkim -z 2 -s $key1 -z 4 -s $key2; cat $testdir/tmp/mail.txt) > /tmp/result.out
		/bin/rm -f $testdir/tmp/mail.txt
		for j in default ed25519
		do
			printf "\r%126s\r" " "
			if [ $verbose -gt 0 ] ; then
				echo key $j domain $i
			fi
			selector=$(cat $domainkey_dir/$i/$j.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
			case $j in
				default)
				echo "  rsa+ed25519 with rsa-256 selector"
				;;
				ed25519)
				echo "  rsa+ed25519 with ed25519 selector"
				;;
			esac
			sig_count=$(grep DKIM-Signature /tmp/result.out|wc -l)
			$dkim -vV -T "$selector" > $out 2>/tmp/err.out < /tmp/result.out
			ret=$?
			grep Signature /tmp/err.out | sed -e 's/Signature #/    Signature/g' \
				-e 's/01/rsa-256/' -e 's/02/ed25519/' -e 's/Failure.*/Failure - Correct/'
			if [ $ret -eq 0 -a $sig_count -eq 2 ] ; then
				tcount=$(expr $tcount + 1)
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret]  dkim -s $key1 -s $key2..."
					echo
				fi
				echo SUCCESS ======================== >$out
				print_pct
			else
				echo "FAILED : [ret=$ret] domain=$i sig_count=$sig_count dkim -s $key1 -s $key2..."
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
				failed=1
			fi
		done
		/bin/rm -f /tmp/result.out /tmp/err.out
		printf "\r%126s\r" " "
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		printf "\r  Success%118s\n" " "
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for  multi-signature signing+verification by $dkim"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for  multi-signature signing+verification by $dkim"
	fi

	# Test No 7
	printf "\r%126s\r" " "
	echo "testing multi-signature signing by qmail-dkim + verification by dkim DKIMSIGNEXTRA in env"
	failed=0
	key1=$domainkey_dir/%/default
	key2=$domainkey_dir/%/ed25519
	for i in example.com example.org
	do
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | env \
			CONTROLDIR=$cntrldir \
			DKIMSIGN="$key1" \
			DKIMSIGNOPTIONS="-z 2" \
			DKIMQUEUE=/bin/cat \
			DKIMSIGNEXTRA="$key2" \
			DKIMSIGNOPTIONSEXTRA="-z 4" \
			ERR_FD=2 \
		$qmail_dkim > /tmp/result.out
		sig_count=$(grep DKIM-Signature /tmp/result.out|wc -l)
		for j in default ed25519
		do
			printf "\r%126s\r" " "
			if [ $verbose -gt 0 ] ; then
				echo key $j domain $i
			fi
			selector=$(cat $domainkey_dir/$i/$j.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
			case $j in
				default)
				echo "  rsa+ed25519 with rsa-256 selector"
				;;
				ed25519)
				echo "  rsa+ed25519 with ed25519 selector"
				;;
			esac
			$dkim -vV -T "$selector" >$out 2>/tmp/err.out < /tmp/result.out
			ret=$?
			grep Signature /tmp/err.out | sed -e 's/Signature #/    Signature/g' \
				-e 's/01/ed25519/' -e 's/02/rsa-256/' -e 's/Failure.*/Failure - Correct/'
			if [ $ret -eq 0 -a $sig_count -eq 2 ] ; then
				tcount=$(expr $tcount + 1)
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] domain=$i sig_count=$sig_count $qmail_dkim"
					echo
				fi
				echo SUCCESS ======================== >$out
				print_pct
			else
				echo "FAILED : [ret=$ret] domain=$i sig_count=$sig_count $qmail_dkim"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
				failed=1
			fi
		done
		/bin/rm -f /tmp/result.out /tmp/err.out
		printf "\r%126s\r" " "
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		printf "\r  Success%118s\n" " "
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for  multi-signature signing by $qmail_dkim + verification by $dkim DKIMSIGNEXTRA in env"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for  multi-signature signing by $qmail_dkim + verification by $dkim DKIMSIGNEXTRA in env"
	fi

	# Test No 8
	printf "\r%126s\r" " "
	echo "testing multi-signature signing by qmail-dkim + verification by dkim DKIMSIGNEXTRA in dkimkeys"
	(
	echo "ex*.com:$domainkey_dir/%/dkimkeys1:DKIMSIGNEXTRA=$domainkey_dir/%/dkimkeys2,DKIMSIGNOPTIONS=-z 4"
	echo "ex.*.org:$domainkey_dir/%/dkimkeys1:QREGEX=1,DKIMSIGNEXTRA=$domainkey_dir/%/dkimkeys2,DKIMSIGNOPTIONS=-z 4"
	) >$cntrldir/dkimkeys
	failed=0
	for i in example.com example.org
	do
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | env \
		CONTROLDIR=$cntrldir \
		DKIMSIGN="" \
		DKIMSIGNOPTIONS="-z 2" \
		DKIMQUEUE=/bin/cat \
		ERR_FD=2 \
		$qmail_dkim > /tmp/result.out
		sig_count=$(grep DKIM-Signature /tmp/result.out|wc -l)
		for j in dkimkeys1 dkimkeys2
		do
			printf "\r%126s\r" " "
			if [ $verbose -gt 0 ] ; then
				echo key $j domain $i
			fi
			selector=$(cat $domainkey_dir/$i/$j.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
			case $j in
				dkimkeys1)
				echo "  rsa+ed25519 with rsa-256 selector"
				;;
				dkimkeys2)
				echo "  rsa+ed25519 with ed25519 selector"
				;;
			esac
			$dkim -vV -T "$selector" >$out 2>/tmp/err.out < /tmp/result.out
			ret=$?
			grep Signature /tmp/err.out | sed -e 's/Signature #/    Signature/g' \
				-e 's/01/ed25519/' -e 's/02/rsa-256/' -e 's/Failure.*/Failure - Correct/'
			if [ $ret -eq 0 -a $sig_count -eq 2 ] ; then
				tcount=$(expr $tcount + 1)
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] domain=$i sig_count=$sig_count dkimkeys $qmail_dkim"
					echo
				fi
				echo SUCCESS ======================== >$out
				print_pct
			else
				echo "FAILED : [ret=$ret] domain=$i sig_count=$sig_count dkimkeys $qmail_dkim"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
				failed=1
			fi
		done
		/bin/rm -f /tmp/result.out /tmp/err.out
		printf "\r%126s\r" " "
	done
	/bin/rm -f $cntrldir/dkimkeys

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		printf "\r  Success%118s\n" " "
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for  multi-signature signing by $qmail_dkim + verification by $dkim DKIMSIGNEXTRA in dkimkeys"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for  multi-signature signing by $qmail_dkim + verification by $dkim DKIMSIGNEXTRA in dkimkeys"
	fi

	# Test No 9
	printf "\r%126s\r" " "
	echo "testing multi-signature signing+verification by qmail-dkim"
	failed=0
	key1=$domainkey_dir/%/default
	key2=$domainkey_dir/%/ed25519
	for i in example.com example.org
	do
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | env \
			CONTROLDIR=$cntrldir \
			DKIMSIGN="$key1" \
			DKIMSIGNOPTIONS="-z 2" \
			DKIMQUEUE=/bin/cat \
			DKIMSIGNEXTRA="$key2" \
			DKIMSIGNOPTIONSEXTRA="-z 4" \
			ERR_FD=2 \
			$qmail_dkim > /tmp/result.out
		sig_count=$(grep DKIM-Signature /tmp/result.out|wc -l)
		for j in default ed25519
		do
			printf "\r%126s\r" " "
			if [ $verbose -gt 0 ] ; then
				echo key $j domain $i
			fi
			selector=$(cat $domainkey_dir/$i/$j.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
			case $j in
				default)
				echo "  rsa+ed25519 with rsa-256 selector"
				;;
				ed25519)
				echo "  rsa+ed25519 with ed25519 selector"
				;;
			esac
			cat /tmp/result.out | env - \
					DKIMVERIFY="" \
					SELECTOR_DATA="$selector" \
					DKIMQUEUE=/bin/cat \
					VERBOSE=1 \
					$qmail_dkim >$out 2>/tmp/err.out
			ret=$?
			grep Signature /tmp/err.out | sed -e 's/Signature #/    Signature/g' \
				-e 's/01/ed25519/' -e 's/02/rsa-256/' -e 's/Failure.*/Failure - Correct/'
			if [ $ret -eq 0 -a $sig_count -eq 2 ] ; then
				tcount=$(expr $tcount + 1)
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] domain=$i sig_count=$sig_count env - DKIMSIGN=$key1 DKIMSIGNEXTRA=$key2... $qmail_dkim"
					echo
				fi
				echo SUCCESS ======================== >$out
				print_pct
			else
				echo "FAILED : [ret=$ret] domain=$i sig_count=$sig_count env - DKIMSIGN=$key1 DKIMSIGNEXTRA=$key2... $qmail_dkim"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
				failed=1
			fi
		done
		printf "\r%126s\r" " "
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		printf "\r  Success%118s\n" " "
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for  multi-signature signing+verification by $qmail_dkim"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for  multi-signature signing+verification by $qmail_dkim"
	fi

	# Test No 10
	printf "\r%126s\r" " "
	echo "testing multi-signature signing+verification by dk-filter"
	failed=0
	key1=$domainkey_dir/%/default
	key2=$domainkey_dir/%/ed25519
	for i in example.com example.org
	do
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | env \
			NODK="1" \
			QMAILREMOTE="1" \
  			_SENDER=postmaster@$i \
			CONTROLDIR=/tmp \
			DKIMSIGN="$key1" \
			DKIMSIGNOPTIONS="-z 2" \
			DKIMSIGNEXTRA="$key2" \
			DKIMSIGNOPTIONSEXTRA="-z 4" $dk_filter > /tmp/result.out
		sig_count=$(grep DKIM-Signature /tmp/result.out|wc -l)
		for j in default ed25519
		do
			printf "\r%126s\r" " "
			if [ $verbose -gt 0 ] ; then
				echo key $j domain $i
			fi
			selector=$(cat $domainkey_dir/$i/$j.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
			case $j in
				default)
				echo "  rsa+ed25519 with rsa-256 selector"
				;;
				ed25519)
				echo "  rsa+ed25519 with ed25519 selector"
				;;
			esac
			cat /tmp/result.out | env - \
				NODK="1" \
				QMAILREMOTE="1" \
				DKIMVERIFY="1" \
				VERBOSE=1 \
				SELECTOR_DATA="$selector" \
			$dk_filter >$out 2>/tmp/err.out
			ret=$?
			grep Signature /tmp/err.out | sed -e 's/Signature #/    Signature/g' \
				-e 's/01/rsa-256/' -e 's/02/ed25519/' -e 's/Failure.*/Failure - Correct/'
			if [ $ret -eq 0 -a $sig_count -eq 2 ] ; then
				tcount=$(expr $tcount + 1)
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] domain=$i sig_count=$sig_count env - DKIMSIGN=$key1 DKIMSIGNEXTRA=$key2... dk-filter"
					echo
				fi
				echo SUCCESS ======================== >$out
				print_pct
			else
				echo "FAILED : [ret=$ret] domain=$i sig_count=$sig_count env - DKIMSIGN=$key1 DKIMSIGNEXTRA=$key2... dk-filter"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
				failed=1
			fi
		done
		/bin/rm -f /tmp/result.out
		printf "\r%126s\r" " "
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		printf "\r  Success%118s\n" " "
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for  multi-signature signing+verification by dk-filter"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for  multi-signature signing+verification by dk-filter"
	fi

	# Test No 11
	printf "\r%126s\r" " "
	echo "testing qmail-dkim signing+verification by qmail-dkim"
	failed=0
	for i in $domainkey_dir/test $domainkey_dir/%/default $domainkey_dir/%/test $domainkey_dir/%/ed25519
	do
		for j in example.com example.org
		do
			printf "\r%126s\r" " "
			selector=""
			if [ "$i" = "$domainkey_dir/test" -a -f $i.pub ] ; then
				selector=$(cat $i.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
			fi
			if [ -z "$selector" ] ; then
				case $i in
				$domainkey_dir/%/default)
				enc="-z 2"
				if [ -f $domainkey_dir/$j/default.pub ] ; then
					selector=$(cat $domainkey_dir/$j/default.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
				elif [ -f $domainkey_dir/default.pub ] ; then
					selector=$(cat $domainkey_dir/default.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
				fi
				;;
				$domainkey_dir/%/test)
				enc="-z 2"
				if [ -f $domainkey_dir/$j/test.pub ] ; then
					selector=$(cat $domainkey_dir/$j/test.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
				elif [ -f $domainkey_dir/test.pub ] ; then
					selector=$(cat $domainkey_dir/test.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
				fi
				;;
				$domainkey_dir/%/ed25519)
				enc="-z 4"
				if [ -f $domainkey_dir/$j/ed25519.pub ] ; then
					selector=$(cat $domainkey_dir/$j/ed25519.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
				elif [ -f $domainkey_dir/ed25519.pub ] ; then
					selector=$(cat $domainkey_dir/ed25519.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
				fi
				;;
				esac
			fi
			if [ $verbose -gt 0 ] ; then
				echo key=$i domain=$j
			fi
			(
			echo "From: postmaster@$j"
			echo "To: postmaster@$j"
			echo "Subject: Test"
			echo "Date: $(date -R)"
			echo
			echo "Test message"
			) | env - \
				CONTROLDIR=$cntrldir \
				DKIMSIGN="$i" \
				DKIMSIGNOPTIONS="$enc" \
				DKIMQUEUE=/bin/cat \
				$qmail_dkim | env - \
					DKIMVERIFY="" \
					SELECTOR_DATA="$selector" \
					DKIMQUEUE=/bin/cat \
					$qmail_dkim > $out
			ret=$?
			if [ $ret -eq 0 ] ; then
				tcount=$(expr $tcount + 1)
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret]  env - DKIMSIGN=$i DKIMQUEUE=/bin/cat $qmail_dkim"
					echo
				fi
				echo SUCCESS ======================== >$out
				print_pct
			else
				echo "FAILED : [ret=$ret] domain=$j key=$i env - DKIMSIGN=$i DKIMQUEUE=/bin/cat $qmail_dkim"
				echo
				echo FAILURE [$ret] domain=$j ======================== >$out
				echo >>$out
				failed=1
			fi
		done
		printf "\r%126s\r" " "
	done

	for i in $domainkey_dir/%/notexist $domainkey_dir/%
	do
		for j in example.com example.org
		do
			printf "\r%126s\r" " "
			if [ $verbose -gt 0 ] ; then
				echo key=$i domain=$j
			fi
			(
			echo "From: postmaster@$j"
			echo "To: postmaster@$j"
			echo "Subject: Test"
			echo "Date: $(date -R)"
			echo
			echo "Test message"
			) | env - \
				CONTROLDIR=$cntrldir \
				DKIMSIGN="$i" \
				DKIMQUEUE=/bin/cat \
				$qmail_dkim >$out
			ret=$?
			if [ $ret -eq 0 ] ; then
				tcount=$(expr $tcount + 1)
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret]  env - DKIMSIGN=$i DKIMQUEUE=/bin/cat $qmail_dkim"
					echo
				fi
				echo SUCCESS ======================== >$out
				print_pct
			else
				echo "FAILED : [ret=$ret] domain=$j key=$i env - DKIMSIGN=$i DKIMQUEUE=/bin/cat $qmail_dkim"
				echo
				echo FAILURE [$ret] domain=$j ======================== >$out
				echo >>$out
				failed=1
			fi
		done
		printf "\r%126s\r" " "
	done

	for i in $domainkey_dir/notexist
	do
		for j in example.com example.org
		do
			printf "\r%126s\r" " "
			if [ $verbose -gt 0 ] ; then
				echo key $i domain $j
			fi
			(
			echo "From: postmaster@$j"
			echo "To: postmaster@$j"
			echo "Subject: Test"
			echo "Date: $(date -R)"
			echo
			echo "Test message"
			) | env - \
				CONTROLDIR=$cntrldir \
				DKIMSIGN="$i" \
				DKIMQUEUE=/bin/cat \
				ERROR_FD=2 \
				$qmail_dkim >$out 2>&1
			ret=$?
			if [ $ret -eq 0 ] ; then
				echo "FAILED : [ret=$ret] domain=$j key=$i env - DKIMSIGN=$i DKIMQUEUE=/bin/cat $qmail_dkim"
				echo
				echo FAILURE [$ret] domain=$j ======================== > $out
				echo >>$out
				failed=1
			else
				if [ $ret -ne $nokeyerror -a $ret -ne 88 ] ; then
					echo "FAILED : [ret=$ret] domain=$j key=$i env - DKIMSIGN=$i DKIMQUEUE=/bin/cat $dkim"
					echo
					echo FAILURE [$ret] domain=$j ======================== > $out
					echo >>$out
					failed=1
				else
					tcount=$(expr $tcount + 1)
					if [ $verbose -gt 0 ] ; then
						echo "SUCCESS: [ret=$ret] env - DKIMSIGN=$i DKIMQUEUE=/bin/cat $dkim"
					fi
					echo SUCCESS ======================== >$out
					print_pct
				fi
			fi
		done
		printf "\r%126s\r" " "
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		printf "\r  Success%118s\n" " "
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test failed for $qmail_dkim signing+verification by $qmail_dkim"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for $qmail_dkim signing+verification by $qmail_dkim"
	fi

	# Test No 12
	printf "\r%126s\r" " "
	echo "testing dk-filter signing"
	failed=0
	for i in $domainkey_dir/test $domainkey_dir/%/default $domainkey_dir/%/test $domainkey_dir/%/notexist $domainkey_dir/%
	do
		for j in example.com example.org
		do
			printf "\r%126s\r" " "
			if [ $verbose -gt 0 ] ; then
				echo key $i domain $j
			fi
			(
			echo "From: postmaster@$j"
			echo "To: postmaster@$j"
			echo "Subject: Test"
			echo "Date: $(date -R)"
			echo
			echo "Test message"
			) | env - \
				NODK="1" \
				QMAILREMOTE="1" \
				CONTROLDIR=$cntrldir \
  				_SENDER=postmaster@$j \
  				DKIMSIGN=$i \
  				$dk_filter > $out
			ret=$?
			if [ $ret -eq 0 ] ; then
				tcount=$(expr $tcount + 1)
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret]  env - NODK=1 QMAILREMOTE=1 _SENDER=postmaster@$j DKIMSIGN=$i DKIMQUEUE=/bin/cat $dk_filter"
				fi
				echo SUCCESS ======================== >$out
				print_pct
			else
				echo "FAILED : [ret=$ret] domain=$j key=$i env - NODK=1 QMAILREMOTE=1 _SENDER=postmaster@$j DKIMSIGN=$i DKIMQUEUE=/bin/cat $dk_filter"
				echo
				echo FAILURE [$ret] domain=$j ======================== >$out
				echo >>$out
				failed=1
			fi
		done
		printf "\r%126s\r" " "
	done

	for i in $domainkey_dir/notexist
	do
		for j in example.com example.org
		do
			printf "\r%126s\r" " "
			if [ $verbose -gt 0 ] ; then
				echo key $i domain $j
			fi
			(
			echo "From: postmaster@$j"
			echo "To: postmaster@$j"
			echo "Subject: Test"
			echo "Date: $(date -R)"
			echo
			echo "Test message"
			) | env - \
				NODK="1" \
				QMAILREMOTE="1" \
				CONTROLDIR=$cntrldir \
	  			_SENDER=postmaster@$j \
				DKIMSIGN="$i" \
				DKIMQUEUE=/bin/cat $dk_filter > $out 2>&1
			ret=$?
			if [ $ret -eq 0 ] ; then
				tcount=$(expr $tcount + 1)
				echo SUCCESS ======================== > $out
				print_pct
			else
				if [ $ret -ne $nokeyerror -a $ret -ne 88 ] ; then
					echo "FAILED : [ret=$ret] domain=$j key=$i env - NODK=1 QMAILREMOTE=1 _SENDER=postmaster@$j DKIMSIGN=$i DKIMQUEUE=/bin/cat $dk_filter"
					echo
					echo FAILURE [$ret] domain=$j ======================== > $out
					echo >>$out
					failed=1
				else
					tcount=$(expr $tcount + 1)
					if [ $verbose -gt 0 ] ; then
						echo "SUCCESS: [ret=$ret] env - NODK=1 QMAILREMOTE=1 _SENDER=postmaster@$j DKIMSIGN=$i DKIMQUEUE=/bin/cat $dk_filter"
					fi
					print_pct
				fi
			fi
		done
		printf "\r%126s\r" " "
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		printf "\r  Success%118s\n" " "
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for dk-filter signing"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for dk-filter signing"
	fi

	# Test No 13
	printf "\r%126s\r" " "
	echo "testing dk-filter signing+verification by dk-filter"
	failed=0
	for i in default ed25519
	do
		for j in example.com example.org
		do
			printf "\r%126s\r" " "
			if [ $verbose -gt 0 ] ; then
				echo key $i domain $j
			fi
			case $i in
				default)
					enc="-z 2"
					;;
				ed25519)
					enc="-z 4"
					;;
			esac
			selector=$(cat $domainkey_dir/$j/$i.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
			(
			echo "From: postmaster@$j"
			echo "To: postmaster@$j"
			echo "Subject: Test"
			echo "Date: $(date -R)"
			echo
			echo "Test message"
			) | env - \
				NODK="1" \
				QMAILREMOTE="1" \
				CONTROLDIR=$cntrldir \
  				_SENDER=postmaster@$j \
  				DKIMSIGN="$domainkey_dir/%/$i" \
				DKIMSIGNOPTIONS="$enc" \
  				$dk_filter | env - \
				NODK="1" \
				QMAILREMOTE="1" \
				DKIMVERIFY="1" \
				SELECTOR_DATA="$selector" \
			$dk_filter > $out
			ret=$?
			if [ $ret -eq 0 ] ; then
				tcount=$(expr $tcount + 1)
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret]  env - NODK=1 QMAILREMOTE=1 _SENDER=postmaster@$j DKIMSIGN=$i DKIMQUEUE=/bin/cat $dk_filter"
				fi
				echo SUCCESS ======================== >$out
				print_pct
			else
				echo "FAILED : [ret=$ret] domain=$j key=$i env - NODK=1 QMAILREMOTE=1 _SENDER=postmaster@$j DKIMSIGN=$i DKIMQUEUE=/bin/cat $dk_filter"
				echo
				echo FAILURE [$ret] domain=$j ======================== >$out
				echo >>$out
				failed=1
			fi
		done
		printf "\r%126s\r" " "
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		printf "\r  Success%118s\n" " "
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for dk-filter signing+verification by dk-filter"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for dk-filter signing+verification by dk-filter"
	fi

	# Test No 14
	printf "\r%126s\r" " "
	echo "testing dkimkeys control file feature"
	failed=0
	if [ ! -d $cntrldir ] ; then
		mkdir -p $cntrldir
	fi

	(
	echo "ex*.com:$domainkey_dir/%/dkimkeys1"
	echo "ex.*.org:$domainkey_dir/%/dkimkeys2:QREGEX=1,DKIMSIGNOPTIONS=-z 4"
	) >$cntrldir/dkimkeys
	for i in example.com example.org
	do
		printf "\r%126s\r" " "
		if [ $verbose -gt 0 ] ; then
			echo domain $i
		fi
		if [ "$i" = "example.com" ] ; then
			selector=$(cat $domainkey_dir/$i/dkimkeys1.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
		else
			selector=$(cat $domainkey_dir/$i/dkimkeys2.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
		fi
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | env -  \
			DKIMSIGN="" \
			CONTROLDIR=$cntrldir \
			DKIMQUEUE=/bin/cat \
			ERROR_FD=2 \
			$qmail_dkim | $dkim -v -T "$selector" > $out
		ret=$?
		if [ $ret -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			if [ $verbose -gt 0 ] ; then
				echo "SUCCESS: [ret=$ret]  dkimkeys"
				echo
			fi
			echo SUCCESS ======================== >$out
			print_pct
		else
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) >$testdir/tmp/mail.txt
			echo "FAILED : [ret=$ret] domain=$i dkimkeys"
			echo
			echo FAILURE [$ret] domain=$i ======================== >$out
			echo >>$out
			failed=1
		fi
	done

	(
	echo "ex*.com:$domainkey_dir/notexists"
	echo "ex*.org:$domainkey_dir/notexists:QREGEX=1"
	) >$cntrldir/dkimkeys
	for i in example.com example.org
	do
		printf "\r%126s\r" " "
		if [ $verbose -gt 0 ] ; then
			echo domain $i
		fi
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | env -  \
			DKIMSIGN="" \
			CONTROLDIR=$cntrldir \
			DKIMQUEUE=/bin/cat \
			ERROR_FD=2 \
			$qmail_dkim > $out 2>&1
		ret=$?
		if [ $ret -eq 0 ] ; then
			echo "FAILED : [ret=$ret] domain=$i key=dkimkeys"
			echo
			echo FAILURE [$ret] domain=$j ======================== > $out
			echo >>$out
			failed=1
		else
			if [ $ret -ne $nokeyerror -a $ret -ne 88 ] ; then
				echo "FAILED : [ret=$ret] domain=$i key=dkimkeys"
				echo
				echo FAILURE [$ret] domain=$j ======================== > $out
				echo >>$out
				failed=1
			else
				tcount=$(expr $tcount + 1)
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] dkimkeys"
				fi
				echo SUCCESS ======================== >$out
				print_pct
			fi
		fi
	done

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		printf "\r  Success%118s\n" " "
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for dkimkeys"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for dkimkeys"
	fi

	# Test No 15
	printf "\r%126s\r" " "
	echo "testing multi-signature signing+verification by dk-filter DKIMSIGNEXTRA in dkimkeys"
	(
	echo "ex*.com:$domainkey_dir/%/dkimkeys1:DKIMSIGNEXTRA=$domainkey_dir/%/dkimkeys2,DKIMSIGNOPTIONSEXTRA=-z 4"
	echo "ex.*.org:$domainkey_dir/%/dkimkeys1:QREGEX=1,DKIMSIGNEXTRA=$domainkey_dir/%/dkimkeys2,DKIMSIGNOPTIONSEXTRA=-z 4"
	) >$cntrldir/dkimkeys

	failed=0
	for i in example.com example.org
	do
		(
		echo "From: postmaster@$i"
		echo "To: postmaster@$i"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
		) | env \
			NODK="1" \
			QMAILREMOTE="1" \
  			_SENDER=postmaster@$i \
			CONTROLDIR=$cntrldir \
			DKIMSIGN="" \
			DKIMSIGNOPTIONS="-z 2" \
			$dk_filter > /tmp/result.out
		sig_count=$(grep DKIM-Signature /tmp/result.out|wc -l)
		for j in dkimkeys1 dkimkeys2
		do
			printf "\r%126s\r" " "
			if [ $verbose -gt 0 ] ; then
				echo key $j domain $i
			fi
			selector=$(cat $domainkey_dir/$i/$j.pub |sed -e 's/.*(//' -e 's/).*//' -e '/^$/d' -e 's/"//g' -e 's/\t//g' | tr -d '\n')
			case $j in
				dkimkeys1)
				echo "  rsa+ed25519 with rsa-256 selector"
				;;
				dkimkeys2)
				echo "  rsa+ed25519 with ed25519 selector"
				;;
			esac
			cat /tmp/result.out | env - \
				NODK="1" \
				QMAILREMOTE="1" \
				DKIMVERIFY="1" \
				VERBOSE=1 \
				SELECTOR_DATA="$selector" \
			$dk_filter >$out 2>/tmp/err.out
			ret=$?
			grep Signature /tmp/err.out | sed -e 's/Signature #/    Signature/g' \
				-e 's/01/rsa-256/' -e 's/02/ed25519/' -e 's/Failure.*/Failure - Correct/'
			if [ $ret -eq 0 -a $sig_count -eq 2 ] ; then
				tcount=$(expr $tcount + 1)
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] domain=$i sig_count=$sig_count ... dk-filter"
					echo
				fi
				echo SUCCESS ======================== >$out
				print_pct
			else
				echo "FAILED : [ret=$ret] domain=$i sig_count=$sig_count ... dk-filter"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
				failed=1
			fi
		done
		/bin/rm -f /tmp/result.out
		printf "\r%126s\r" " "
	done
	/bin/rm -f $cntrldir/dkimkeys

	if [ $verbose -eq 0 -a $failed -eq 0 ] ; then
		printf "\r  Success%118s\n" " "
		echo
	fi
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for  multi-signature signing+verification by dk-filter DKIMSIGNEXTRA in dkimkeys"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "All Tests succeeded for  multi-signature signing+verification by dk-filter DKIMSIGNEXTRA in dkimkeys"
	fi

	# Test No 16
	key1=$domainkey_dir/example.com/dkimkeys1
	qmail_inject=$bindir/qmail-inject
	qmail_queue=$sbindir/qmail-queue
	printf "\r%126s\r" " "
	echo "testing qmail-dkim custom error feature for permanent(100)/temporary(111) failures"
	(
		echo "From: postmaster@$real_domain"
		echo "To: $user@$real_domain"
		echo "Subject: Test"
		echo "Date: $(date -R)"
		echo
		echo "Test message"
	) > $testdir/tmp/mail.txt
	for i in PQ pq
	do
		printf "\r%126s\r" " "
		echo "  testing return value  for DKIMVERIFY=$i"
		(cat $testdir/tmp/mail.txt | $bindir/dkim -z 2 -s $key1; cat $testdir/tmp/mail.txt) | env - \
			QUEUEDIR=/var/indimail/queue/queue1 \
			CONFSPLIT=23 \
			BIGTODO=0 \
			DKIMVERIFY="$i" \
			QMAILQUEUE=$qmail_dkim \
			FASTQUEUE=1 \
			ERROR_FD=4 \
			$qmail_inject -a $user 2>/tmp/out.$$
		ret=$?
		echo "    return value=$ret"
		case $i in
			PQ)
			if [ $ret -eq 100 ] ; then
				tcount=$(expr $tcount + 1)
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] DKIMVERIFY=$i qmail-dkim custom error"
					echo
				fi
				echo SUCCESS ======================== >$out
				print_pct
			else
				failed=1
				echo "FAILED : [ret=$ret] DKIMVERIFY=$i qmail-dkim custom error"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
			fi
			printf "\r%126s\r" " "
			echo "  testing error message for DKIMVERIFY=$i"
			echo "    error message=$(cat /tmp/out.$$)"
			grep "qmail-inject: fatal: qmail-dkim: signature error: permanent dns failure requesting selector (#5.7.0)" /tmp/out.$$ > /dev/null
			if [ $? -eq 0 ] ; then
				tcount=$(expr $tcount + 1)
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] DKIMVERIFY=$i qmail-dkim custom error message"
					echo
				fi
				echo SUCCESS ======================== >$out
				print_pct
			else
				failed=1
				echo "FAILED : [ret=$ret] DKIMVERIFY=$i qmail-dkim custom error message"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
			fi
			;;
			pq)
			if [ $ret -eq 111 ] ; then
				tcount=$(expr $tcount + 1)
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] DKIMVERIFY=$i qmail-dkim custom error"
					echo
				fi
				echo SUCCESS ======================== >$out
				print_pct
			else
				failed=1
				echo "FAILED : [ret=$ret] DKIMVERIFY=$i qmail-dkim custom error"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
			fi
			printf "\r%126s\r" " "
			echo "  testing error message for DKIMVERIFY=$i"
			echo "    error message=$(cat /tmp/out.$$)"
			grep "qmail-inject: fatal: qmail-dkim: signature error: permanent dns failure requesting selector (#4.7.0)" /tmp/out.$$ > /dev/null
			if [ $? -eq 0 ] ; then
				tcount=$(expr $tcount + 1)
				if [ $verbose -gt 0 ] ; then
					echo "SUCCESS: [ret=$ret] DKIMVERIFY=$i qmail-dkim custom error message"
					echo
				fi
				echo SUCCESS ======================== >$out
				print_pct
			else
				failed=1
				echo "FAILED : [ret=$ret] DKIMVERIFY=$i qmail-dkim custom error message"
				echo
				echo FAILURE [$ret] ======================== >$out
				echo >>$out
			fi
			;;
		esac
	done
	/bin/rm -f $testdir/tmp/mail.txt /tmp/out.$$
	if [ $failed -eq 1 ] ; then
		echo "Test Failed for qmail-dkim custom error"
		exit 1
	elif [ $verbose -ne 0 ] ; then
		echo "Test succeeded for qmail-dkim custom error"
	fi
	t2=$(date +"%s.%4N")
	secs=$(echo $t1 $t2 | awk '{printf("%0.4f\n", $2-$1)}')
	printf "\r%126s\r" " "
	echo "DKIM tests [$secs sec]"
}

usage()
{
	echo "test-indimail-mta [-h|--help]" 1>&2
}

display_tests()
{
	echo "test svscan startup without svscan log"
	echo "test service startup (qmail-smtpd, qmail-send)"
	echo "test qmail-inject"
	echo "test alias mechanism"
	echo "test SMTPS using swaks"
	echo "test recipient extension"
	echo "test autoresponder"
	echo "test qmail-qfilter"
	echo "test spawn-filter QMAILLOCAL and QMAILREMOTE"
	echo "test CHECKRECIPIENT feature"
	echo "test CHECKSENDER feature"
	echo "test Sender Rewriting Scheme for qmail-smtpd, qmail-inject, autoresponder, srsfilter"
	echo "test stopping of service using svc"
	echo "test startup of new service by sending HUP to svscan"
	echo "test restart of service by using svc -r"
	echo "test starting of service by using svc -u"
	echo "test stopping of service by using svc -d"
	echo "test multilog"
	echo "test svscan startup with svscan log"
	echo "test svscan execution of run /service/.svscan/run"
	echo "test svscan start services configured in /service"
	echo "test SMTPS service and mail submission using swaks"
	echo "test svscan autoscan"
	echo "test svscan subreaper feature"
	echo "test blocking (badmailfrom, badrcptto)"
	echo "test SPF"
	echo "test DKIM using dkim, qmail-dkim, dk-filter"
}

failed=0
options=$(getopt -a -n test-indimail-mta -o "h" -l help -- "$@")
if [ $? != 0 ]; then
  usage
  exit 1
fi
eval set -- "$options"
while :
do
	case "$1" in
		-h | --help)
		usage
		display_tests
  		exit 1
		;;
		--) # end of options
		shift
		break
		;;
		*)
		echo "Unexpected option: $1 - this should'nt happen." 1>&2
		usage
  		exit 1
		;;
	esac
done
# end getopt

sudo ls /tmp > /dev/null 2>&1
if [ $? -ne 0 ] ; then
	echo "This script requires sudo privileges" 1>&2
	exit 1
fi
if [ -f $testdir/qtotal.count ] ; then
	total_tests=$(cat $testdir/qtotal.count)
else
	total_tests=225
fi
failed=0
do_setup
log_type=1
do_without_svscan
log_type=2
do_svscan_without_svscanlog
shutdown_svscan
do_svscan_with_svscanlog
shutdown_svscan

wait

if [ -f ./spfquery.txt ] ; then
	printf "\r%118s\n" " "
	do_spf_tests
fi
secs=0.0
printf "\r%118s\n" " "
for i in QMAILQUEUE envdir tcpclient-tcp tcpclient-ssl tcpclient-unix \
	maildirdeliver bounce 822header 822body qmail-getpw
do
	tcount=$(expr $tcount + 1)
	printf "\r  implicit test %20s succeeded %57s [%.4f sec]\n" $i " " $secs
	print_pct
done
printf "\r%118s\n" " "
non_dkim_tcount=$tcount
do_dkim_tests

# Cleanup
sudo /bin/rm -rf $servicedir
sudo /bin/rm -rf $logdir
sudo /bin/rm -rf $testdir/queue
sudo /bin/rm -rf $testdir/sleep.out
sudo /bin/rm -rf $testdir/svscan.out
sudo /bin/rm -rf $testdir/tcpclient.smtp
sudo /bin/rm -rf $sysconfdir/users
if [ -d $maildir ] ; then
	find $maildir -type f -exec /bin/rm -f {} \;
fi
if [ -d $testdir/$testuser/Maildir ] ; then
	find $testdir/$testuser/Maildir -type f -exec /bin/rm -f {} \;
fi
if [ -d $qmaildir/alias/Maildir ] ; then
	sudo find $qmaildir/alias/Maildir -type f -exec /bin/rm -f {} \;
fi

echo
dkim_count=$(expr $tcount - $non_dkim_tcount)
echo "All $tcount tests succeeded (indimail-mta tests=$non_dkim_tcount + dkim tests=$dkim_count)"
end=$(date +'%s')
secs=$(($end-$start))
printf '%d days, %d hr, %d min, %d sec\n' $((secs/86400)) $((secs%86400/3600)) $((secs%3600/60)) \
	  $((secs%60))
echo $tcount > $testdir/qtotal.count
exit 0

#
# $Log: test-indimail-mta,v $
# Revision 1.35  2023-10-16 20:55:17+05:30  Cprogrammer
# added test for authdomains, AUTH_ALL env variable setting
#
# Revision 1.34  2023-10-16 18:38:12+05:30  Cprogrammer
# added test for SECURE AUTH and REQUIREAUTH
#
# Revision 1.33  2023-10-11 21:02:53+05:30  Cprogrammer
# minor modification
#
# Revision 1.32  2023-10-11 20:39:20+05:30  Cprogrammer
# minor fixes
#
# Revision 1.31  2023-10-11 19:17:35+05:30  Cprogrammer
# added test progress
#
# Revision 1.30  2023-10-11 14:55:19+05:30  Cprogrammer
# added test for MASQUERADE
#
# Revision 1.29  2023-10-07 08:43:39+05:30  Cprogrammer
# reduce test time
#
# Revision 1.28  2023-10-07 01:29:06+05:30  Cprogrammer
# added test for hiding IP, host in received headers
#
# Revision 1.27  2023-10-06 02:23:28+05:30  Cprogrammer
# updated test script
#
# Revision 1.26  2023-10-05 23:38:27+05:30  Cprogrammer
# added tests for maildirserial, serialsmtp, serialqmtp
#
# Revision 1.25  2023-10-04 21:01:42+05:30  Cprogrammer
# added test for invalid auth type
#
# Revision 1.24  2023-10-04 18:39:31+05:30  Cprogrammer
# added test for QMQP, QMTP
#
# Revision 1.23  2023-10-04 09:31:42+05:30  Cprogrammer
# updated test_blocked script
#
# Revision 1.22  2023-10-04 09:09:18+05:30  Cprogrammer
# updated test script
#
# Revision 1.21  2023-10-02 22:49:08+05:30  Cprogrammer
# added alias tests
#
# Revision 1.20  2023-10-02 21:24:03+05:30  Cprogrammer
# added SRS tests
#
# Revision 1.19  2023-09-30 13:38:16+05:30  Cprogrammer
# display timings for setup
#
# Revision 1.18  2023-09-29 23:39:53+05:30  Cprogrammer
# display test time at fixed column
#
# Revision 1.17  2023-09-29 13:55:32+05:30  Cprogrammer
# round decimal to 4 digits for times
#
# Revision 1.16  2023-09-29 08:50:11+05:30  Cprogrammer
# round secs to 3 decimal places
#
# Revision 1.15  2023-09-28 21:13:11+05:30  Cprogrammer
# fixed test times
#
# Revision 1.14  2023-09-28 13:13:49+05:30  Cprogrammer
# display time taken in secs.milliseconds
#
# Revision 1.13  2023-09-28 01:11:06+05:30  Cprogrammer
# display time taken for tests
#
# Revision 1.12  2023-09-27 18:43:30+05:30  Cprogrammer
# updated CHECKSENDER, SURB tests
#
# Revision 1.11  2023-09-27 01:52:08+05:30  Cprogrammer
# added test for CUGMAIL, CHECKSENDER, SURBL
#
# Revision 1.10  2023-09-25 18:09:35+05:30  Cprogrammer
# updated RCS
#
# Revision 1.9  2023-09-19 01:17:35+05:30  Cprogrammer
# added filterit tests
#
# Revision 1.8  2023-09-08 16:11:12+05:30  Cprogrammer
# added dkim tests
#
# Revision 1.7  2023-09-08 15:42:28+05:30  Cprogrammer
# added test for autoresponder
#
# Revision 1.6  2023-09-08 00:54:00+05:30  Cprogrammer
# added test for qmail-qfilter
#
# Revision 1.5  2023-08-26 23:18:32+05:30  Cprogrammer
# use default cipherlist, ciphersuite created by svctool
#
# Revision 1.4  2023-08-25 08:27:05+05:30  Cprogrammer
# fixed queue-fix
# removed use of hardcoded uid, gid in assign file
#
# Revision 1.3  2023-08-22 20:25:14+05:30  Cprogrammer
# added tests for TLSv1.2, TLSv1.3
#
# Revision 1.2  2023-08-04 00:09:43+05:30  Cprogrammer
# removed bashism
#
# Revision 1.1  2023-07-26 23:56:10+05:30  Cprogrammer
# Initial revision
#
#
