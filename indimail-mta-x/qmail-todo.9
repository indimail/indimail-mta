.TH qmail-todo 8
.SH NAME
qmail-todo \- process todo messages from the queue
.SH SYNOPSIS
.B qmail-todo
.SH DESCRIPTION
.B qmail-todo
handles todo messages placed into the outgoing queue by
.B qmail-queue.
.B qmail-todo
by default looks at QMAIL/queue for messages. This path can be changed by defining the QUEUEDIR
environment variable.

.B qmail-todo
addresses a problem known as the silly qmail (queue) problem. This problem is found only on system
with high injection rates. qmail with a big local and remote concurrency could deliver a tremendous
amount of messages but normally this can not be achieved because
.B qmail-send
becomes a bottleneck on those high volumes servers.
.B qmail-send
preprocesses all new messages before distributing them for local or remote delivering. In one run 
.B qmail-send
does one todo run but has the ability to close multiple jobs. Because of this layout 
.B qmail-send
can not feed all the new available (local/remote) delivery slots and therefor it is not possible to
achieve the maximum throughput. This would be a minor problem if one 
.B qmail-send
run could be done in extreme short time. But because of many file system calls (fsync and (un)link)
a todo run is expensive and throttles the throughput.
.B qmail-todo
solves this by having the todo run done by itself rather than by
.B qmail-send
This reduces the run time in 
.B qmail-send.

.B qmail-todo
prepares incoming messages for local and remote delivering (by creating info/<messid>
local/<messid> and remote/<messid> and removing todo/<messid>). See also INTERNALS. As next 
.B qmail-todo
transmits the <messid> to qmail-send which will add this message into the priority queue which
schedules the message for delivery.

qmail-todo normally does a queue run for every injected message and then transmits the <messid>
to qmail-send which schedules it for local/remote delivery. If we get too many injections the
queue runs will stall scheduling of local/remote deliveries. Usually we see a sharp drop in
concurrent deliveries while new messages arrive at high rate in the queue. In such a situation it
doesn't make sense to process the queue after each and every injection. It is more important to
fill the delivery slots with work to drain the queue.

The todo run can be adjusted by setting the environment variable TODO_INTERVAL to have only one
queue run every TODO_INTERVAL seconds. It remembers the last complete queue run and will just
return if we get triggered before last queue run plus TODO_INTERVAL seconds. If we get
triggered before TODO_INTERVAL seconds it will schedule a forced queue run at last complete
queue run plus TODO_INTERVAL seconds to not miss the new additions to the queue. TODO_INTERVAL
can also be set in the control file
.IR todointerval .
The control file takes precedence over the environment variable. If TODO_INTERVAL=0 or
TODO_INTERVAL="" or a value less than zero, qmail-todo silently uses 10 secs as the value for
TODO_INTERVAL.

Some more thoughts:
 - This could even be made selftuning by measuring the time it takes
   to do a queue run and do the run delay only after a certain
   threshold has been reached
 - the optimal values for delaying have to found

If
.B qmail-todo
receives a HUP signal,
it will reread
.IR locals ,
.IR todointerval ,
.IR virtualdomains ,
.IR envnoathost ,
.IR conf-syncdir ,
and
.IR conf-fsync .

If the environment variable USE_FSYNC is set, then\fBqmail-todo\fR writes
all data to disk ("flushes") all modified in-core data of (i.e., modified
buffer cache pages for) the new message to the disk device (or other
permanent storage device) so that all  changed  information can  be
retrieved even if the system crashes or is rebooted. This includes
writing through or flushing a disk cache if present. The call blocks
until the device reports that the transfer has completed. This is done
for the info and mess files. This can also be set by using \fIconf-fsync\fR
control file.

If the environment variable USE_SYNCDIR is enabled, \fBqmail-send\fR
forces BSD style directory syncing. This can also be set by using
\fIconf-syncdir\fR control file.

The control files conf-syncdir, conf-fsync take precedence over
the environment variable counterparts. If the control conf-fsync,
conf-syncdir are present, \fBqmail-send\fR will additionally set
or unset the environment variables USE_FSYNC, USE_SYNCDIR. This feature
is exploited by \fBqmail-local(8)\fR. The fsync(2) system call is
used for doing this.

.SH INTERNALS
Communication between qmail-send and qmail-todo

qmail-todo -> qmail-send
   D[LRB]<mesgid>\\0
    Start delivery for new message with id <messid>.
    the character L, R or B defines the type
    of delivery, local, remote or both respectively.
   L<string>\\0
    Dump string to the logger without adding additional \\n or similar.

qmail-send -> qmail-todo
   H   Got a SIGHUP reread @controldir@/locals and @controldir@/virtualdomains
   X   Quit ASAP.

qmail-todo sends "\\0" terminated messages whereas qmail-send sends just one
character to qmail-todo.

.SH "SEE ALSO"
qmail-queue(8),
qmail-start(8),
qmail-daemon(8),
qmail-send(8),
qmail-lspawn(8),
qmail-rspawn(8),
fsync(2)
