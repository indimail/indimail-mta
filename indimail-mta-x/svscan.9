.TH svscan 8
.SH NAME
svscan \- starts and monitors a collection of services
.SH SYNOPSIS
.B svscan
[
.I directory
]
.SH DESCRIPTION
.B svscan
starts one
.BR supervise (8)
process for each subdirectory of the current directory, up to a limit of 1000
subdirectories.
.B svscan
skips subdirectory names starting with dots.
.BR supervise (8)
must be in
.BR svscan 's
path.

.B svscan
optionally starts a pair of
.BR supervise (8)
processes, one for a subdirectory
.IR s ,
one for
.IR s\fR/\fBlog ,
with a pipe between them. It does this if the name
.I s
is at most 255 bytes long and
.I s\fR/\fBlog
exists.
.B svscan
needs two free descriptors for each pipe.

Every five seconds,
.B svscan
checks for subdirectories again. If it sees a new subdirectory, it starts a
new
.BR supervise (8)
process. If it sees an old subdirectory where a
.BR supervise (8)
process has exited, it restarts the
.BR supervise (8)
process. In the
.B log
case it reuses the same pipe so that no data is lost.

The default scan interval of 5 secs can be changed by setting SCANINTERVAL environment variable. Set SCANINTERVAL
to 0 to disable the automatic scanning of the service directory completely. You
can also send a HUP signal to svscan to force a directory scan.

.B svscan
is designed to run forever. If it has trouble creating a pipe or running
.BR supervise (8),
it prints a message to stderr; it will try again five seconds (or SCANINTERVAL) later.

If
.B svscan
is given a command-line argument
.IR directory ,
it switches to that
.I directory
when it starts.

.B svscan
writes its pid to the file \fB.svlock\fR in the directory where it starts. It uses this file to prevent multiple copies of
.B svscan
to run on the same directory. It also uses the /proc filesystem to verify if the pid belongs to a process named
\fBsvscan\fR, by opening the file \fB/proc/pid/comm\fR. \fBsvscan\fR will start if the file does not exist, or if pid
does not exist, or if the pid belongs to a non-svscan process. The file \fB.svlock\fR is deleted on SIGTERM.

.B svscan
output can be driven through \fBmultilog\fR. If a directory (or symlink to a directory)
named
.B /service/.svscan
exists and the environment variable \fBSCANLOG\fR is defined. \fBsvscan\fR(8) will direct its
stdout and stderr to the supervised service run from the
.B /service/.svscan/log
directory. This simplifies
.B svscan
startup scripts and eliminates the use of
.BR readproctitle ,
which does not work on some platforms, e.g. FreeBSD 5.1. Redirecting
.B svscan
output through
.B multilog
also provides a much better solution than other
.B svscan
startup scripts which direct output exclusively to console, causing problems to go
undetected for a long time.

If \fBINITCMD\fR environment variable is defined and set to an empty string and if
\fI/directory\fR/.svscan/\fIrun\fR exists and has the executable bit set, \fIrun\fR is executed.
\fBINITCMD\fR can be set to full path of an executable or script to override \fBsvscan\fR running
\fIrun\fR. If \fBWAIT_INITCMD\fR env variable is set, it will additionally wait for \fIrun\fR
to exit, before starting the scan of \fIdirectory\fR. Typical use of \fBINITCMD\fR is to
mount --bind SYSCONFDIR/resolv.conf as /etc/resolv.conf, to redirect all dns resolver requests,
to locally running \fBdnscache\fR(8).  A typical \fIrun\fR looks like this

.EX
#!/bin/sh
/usr/bin/mount --bind SYSCONFDIR/resolv.conf /etc/resolv.conf
/usr/bin/mount -l
.EE

\fBsvscan\fR creates a file specified by the environment variable \fBSTATUSFILE\fR (if set),
on startup and deletes the same when it shuts down on SIGTERM.

.SH SEE ALSO
proc(5),
mount(8),
supervise(8),
svc(8),
svok(8),
svstat(8),
svctool(8),
svscanboot(8),
readproctitle(8),
fghack(8),  
pgrphack(8),
multilog(8),
tai64n(8),
tai64nlocal(8),
setuidgid(8),
envuidgid(8),
envdir(8),
dnscache(8),
softlimit(8),
setlock(8)

http://cr.yp.to/daemontools.html
