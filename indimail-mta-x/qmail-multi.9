.\" vim: tw=75
.TH qmail-multi 8

.SH NAME
qmail-multi \- queue multiplexor and filter

.SH SYNOPSIS
\fBqmail-multi\fR [\fIqqf\fR] [\fIarg1\fR] [\fIarg2\fR] ...

.SH DESCRIPTION
\fBqmail-multi(8)\fR is a queue multiplexor and filter for
\fBqmail-queue(8)\fR. The multiplexor can be turned on by defining
environment variable \fBQMAILQUEUE\fR=\fI@prefix@/sbin/qmail-multi\fR.
Following programs use \fBqmail-multi\fR(8) to deposit the mail to the
queue - \fBqmail-dkim\fR(8), \fBqmail-qfilter\fR(1),
\fBqmail-spamfilter\fR(8), \fBqscanq-stdin\fR(8).

\fBqmail-multi\fR(8) invokes \fBqmail-queue\fR(8) to deposit the mail. One
can call any other program by passing command line arguments to
\fBqmail-multi\fR(8) in \fBQMAILQUEUE\fR. If passed arguments,
\fBqmail-multi\fR(8) will call \fIqqf\fR. Any arguments after \fIqqf\fR will
be passed as arguments to \fIqqf\fR. You can change the program that
\fBqmail-multi\fR(8) calls, by setting the environment variable
\fBQUEUEPROG\fR, to the path of any qmail-queue frontend. \fBQUEUEPROG\fR
is typically used when you want to use write your own queue frontend, with
the queue path available in \fBQUEUEDIR\fR environment variable. If
\fBQUEUEDIR\fR is set \fBqmail-multi\fR(8) execs \fBqmail-queue\fR (or program
defined by \fBQUEUEPROG\fR without any processing or setting up any
environment variables. \fBQUEUEPROG\fR is ignored when \fBqmail-multi\fR(8)
is passed command line arguments.

The deposition and balancing of mail across multiple queues is controlled
by the following environment variables.

.TP 5
\fBQUEUE_BASE\fR The base directory having all the indimail queues. If this
is not defined, the control file \fIqueue_base\fR is used. This is
typically @qmaildir@/queue.

.TP 5
\fBQUEUE_START\fR This is a number which defines the first queue that
should be used.

e.g. QUEUE_START=1 implies the first queue to be @qmaildir@/queue/queue1

.TP 5
\fBQUEUE_COUNT\fR This defines the number of queues that should be used for
load balancing. \fBqmail-multi\fR(8) used a random number to select a queue in
a multi-queue setup.

e.g. QUEUE_START=1, QUEUE_COUNT=5 implies 5 queues @qmaildir@/queue/queue1,
@qmaildir@/queue/queue2, ..., @qmaildir@/queue/queue5

.TP 5
.B MIN_FREE
This is the minimum free disk space that should be available in the
filesystem containing the queues. When free space goes below this value,
\fBqmail-multi\fR(8) will return a temporary disk full error "qq write
error or disk full (#4.3.0)". This prevents \fBqmail-send\fR reaching a
deadlock in the case when disk becomes full and there are bounce messages
to be processed.  \fBqmail-send\fR in this case keeps on retrying bounce
message which does not succeeed because of insufficient disk space to write
the bounce. This effectively stops processing of local and remote messages
and thus disk space never gets freed up. \fBqmail-multi\fR(8) prevents this
from happening by accepting mails only when disk space greater than
MIN_FREE is present.  It uses \fBstatfs(2)\fR (\fBstatvfs\fR on solaris) to
get the free space on the filesystem.

.TP 5
.B DYNAMIC_QUEUE
If this is set, \fBqmail-multi\fR(8) uses a queue with the lowest
concurrency to total concurrency ratio. It uses shm_open(3) to open shared
memory /\fBqscheduler\fR and /\fBqueue\fR\fIN\fR, where \fIN\fR refers to
the queue number. The shared memory /\fBqscheduler\fR has the total number
of queue \fIqcount\fR, written by \fBqscheduler\fR(8). The shared memory
/\fBqueue\fR\fIN\fR has the current concurrency \fIC\fR, and the maximum
concurrency \fIM\fR configured for the queue. The concurrency details are
written to /\fBqueue\fR\fIN\fR shared memory by \fBqmail-send\fR(8)
\fBqmail-queue\fR(8) cycles through \fIqcount\fR queues and selects the
queue with the lowest \fIC\fR / \fIM\fR ratio.

.PP
\fBqmail-multi\fR(8) is actually a wrapper for \fBqmail-queue\fR(8) to
manage multiple queues. \fIN\fR queues can be set up in @qmaildir@ as
queue\fI1\fR, queue\fI2\fR, ... queue\fIN\fR. \fBqmail-multi\fR(8) does
load balancing across these \fIN\fR queues by doing exec of \fB
qmail-queue\fR with QUEUEDIR set to the path of one of these \fIN\fR
queues. Each of these \fIN\fR queues should be created using
\fBqueue-fix\fR(1) program. One also needs a program like
\fBqscheduler(8)\fR which invokes multiple \fBqmail-send\fR(8) with the
\fBQUEUEDIR\fR set individualy to path of these \fIN\fR queues.

\fBqmail-multi\fR(8) has the ability to run any filter defined by setting
the \fBFILTERARGS\fR environment variable. Any command defined by
\fBFILTERARGS\fR will be run using /bin/sh. The input to this filter will
be fd 0 and the output will be piped to \fBqmail-queue\fR(8). e.g.

.EX
FILTERARGS="/usr/bin/altermime --input=- --disclaimer=/etc/motd"
.EE

.fi
will append the output of altermime command to all mails.

The sequence in which the filter program is run is given below

.TP 3
1. create a pipe and fork

.TP 3
2. dup write end of the pipe to descriptor 1 in the child and exec the
filter program

.TP 3
3. dup read end of the pipe to descriptor 0 in parent and exec
\fBqmail-queue\fR.

.PP
.fi
This gives the ability for the \fBFILTERARG\fR program to read the mail
message from descriptor 0 before passing it to \fBqmail-queue\fR through
the pipe.

\fBqmail-multi\fR(8) will attempt to make the descriptor 0 seekable if the
environment variable \fBMAKE_SEEKABLE\fR is defined. This may be necessary
for certain filter programs which require descriptor to be seekable.

\fBqmail-multi\fR(8) will bounce the message if the return status from the
filter program is 100. The mail will be blackholed if the return status is
2. If the return status is non-zero, \fBqmail-multi\fR(8) will exit issuing
a temporary error.

\fBqmail-multi\fR(8) generates a random number and divides it by
\fBQUEUE_COUNT\fR. This remainder is added to \fBQUEUE_START\fR to arrive
at which queue to use. It then sets the
\fIQUEUEDIR=@prefix@/sbin/qmail-queue\fR to queue the mail.

\fBqmail-multi\fR(8) sets an alarm of 86400 seconds to quit if it doesn't
complete. This can be changed by setting \fBDEATH\fR environment variable.
See the man pages for \fBqmail-queue\fR(8) and
\fBindimail-mta-internals\fR(7) for more details.

.SH "EXIT CODES"
\fBqmail-multi\fR(8) does not print diagnostics. It exits 120 if it is not
able to exec \fBqmail-queue\fR(8). Apart from this it has the following
exit codes.

.EX
It exits 51 if it cannot allocate memory
It exits 55 if it is not able get the free space for the queue filesystem.
It exits 53 if the free space is below MIN_FREE value.
It exits 60 if it cannot create pipes or dup file descriptors.
It exits 61 if cannot change directory to @qmaildir@
It exits 68 if it cannot create temporary files to make the input seekable.
It exits 121 if fork fails
It exits 31 if the program/script defined by \fBFILTERARGS\fR returns 100
(i.e. mail gets bounced).
If the program/script defined by \fBFILTERARGS\fR returns 2 or 99, then the
mail gets blackholed.
If the program/script defined by \fBFILTERARGS\fR exits non-zero status,
it exits 71 and a temporary error is issued.
It exits 88 when the filter program exits with return value of 88 and also
passes the error message printed by the filter program on fd2 to
\fBqmail-queue\fR
It exits 123 if the filter program crashes.
For all other cases where no errors occur, it exits 0.
.EE

.SH "SEE ALSO"
addresses(5),
rfc-822(5),
qmail-send(8),
qmail-inject(8),
qmail-smtpd(8),
sendmail(8),
indimail-control(5),
qmail-header(5),
qmail-queue(8),
qmail-qmqpc(8),
qmail-nullqueue(8),
qmail-spamfilter(8),
qscanq(8),
cleanq(8),
bogofilter(1),
queue-fix(8),
spawn-filter(8),
qscheduler(8),
multi-queue(7),
indimail-mta-internals(7)

.SH "AUTHORS"

"Manvendra Bhangui" <manvendra@indimail.org>.
