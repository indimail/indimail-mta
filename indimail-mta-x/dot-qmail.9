.\" vim: tw=75
.TH dot-qmail 5

.SH NAME
dot-qmail \- control the delivery of mail messages

.SH DESCRIPTION
Normally the \fBqmail-local\fR program delivers each incoming message to
your system Maildir, \fIhomedir\fR\fB/Maildir/\fR, where \fIhomedir\fR is
your Maildir directory. If you omit the slash, e.g.
\fIhomedir\fR\fB/Mailbox\fR, it delivers it to your system mailbox file
instead of Maildir.

It can instead write the mail to a different file or directory, forward it
to another address, distribute it to a mailing list, or even execute
programs, all under your control.

.SH "THE QMAIL FILE"
To change \fBqmail-local\fR's behavior, set up a \fB.qmail\fR file in your
home directory.

\fB.qmail\fR contains one or more lines. Each line is a delivery
instruction. \fBqmail-local\fR follows each instruction in turn. There are
five types of delivery instructions:
(1) comment; (2) program; (3) forward; (4) mbox; (5) maildir; (6) branch;

.TP 5
(1)
A comment line begins with a number sign:

.EX
  # this is a comment
.EE

\fBqmail-local\fR ignores the line.

.TP 5
(2)
A program line begins with a vertical bar:

.EX
  |preline /usr/ucb/vacation djb
.EE

\fBqmail-local\fR takes the rest of the line as a command to supply to
\fBsh\fR. See \fBqmail-command\fR(8) for further information. If the
program line has filterit without the path, \fBqmail-local\fR will use it's
internal \fBfilterit\fR filter.

.EX
  |filterit ...
.EE

If program line has filterit with the path, \fBqmail-local\fR will execute
filterit as an external command like any other program line.
.EX
  | /bin/filterit ...
.EE

.TP 5
(3)
A forward line begins with an ampersand:

.EX
     &me@new.job.com
.EE

\fBqmail-local\fR takes the rest of the line as a mail address; it uses
\fBqmail-queue\fR to forward the message to that address. The address must
contain a fully qualified domain name; it must not contain extra spaces,
angle brackets, or comments:

.EX
  # the following examples are WRONG
.br
  &me@new
.br
  &<me@new.job.com>
.br
  & me@new.job.com
.br
  &me@new.job.com (New Address)
.EE

If the address begins with a letter or number, you may leave out the
ampersand:

.EX
  me@new.job.com
.EE

Note that \fBqmail-local\fR omits its new \fBReturn-Path\fR line when
forwarding messages.

.TP 5
(4)
An \fImbox\fR line begins with a slash or dot, and does not end with a
slash:

.EX
  /home/djb/Mailbox.sos
.EE

\fBqmail-local\fR takes the entire line as a filename. It appends the mail
message to that file, using \fBflock -style\fR file locking if possible.
\fBqmail-local\fR stores the mail message in \fImbox\fR format, as
described in \fBmbox\fR(5) .

\fBWARNING:\fR On many systems, anyone who can read a file can \fBflock\fR
it, and thus hold up \fBqmail-local\fR's delivery forever. Do not deliver
mail to a publicly accessible file!

If \fBqmail-local\fR is able to lock the file, but has trouble writing to
it (because, for example, the disk is full), it will truncate the file back
to its original length. However, it cannot prevent mailbox corruption if
the system crashes during delivery.

.TP 5
(5)
A \fImaildir\fR line begins with a slash or dot, and ends with a slash:

.EX
  /home/djb/Maildir/
.EE

\fBqmail-local\fR takes the entire line as the name of a directory in
\fImaildir\fR format. It reliably stores the incoming message in that
directory. See \fBmaildir\fR(5) for more details.

.TP 5
(6)
A \fIbranch\fR line begins with a question mark, and ends with a label

.EX
  ?label command arg ...
  ...
  :label
.EE

A \fB.qmail\fR file using this feature might look like:

.EX
  # Sort out mail from Sue.
  ?test [ "$SENDER" = sue@somewhere.org ] || exit 99
  /home/b1ff/mail/sue/
  # Skip all further processing.
  ?done
  :test

  # Is this a copy of a mailing list message?
  ?test iftocc `cat lists` || exit 99
  # Bounce this copy.
  |cat duplicate; exit 100
  :test

  # Deliver to the default mailbox.
  /home/b1ff/mail/main/
.EE

\fBqmail-local\fR will deliver the message to the command just as it does
for a |command line, and if the command exits with status 99, qmail-local
will skip down to the :label line; delivery instructions in the intervening
lines are ignored. If the command exits with status other than 99, the
result is the same as with a |command line (See \fBqmail-command\fR(8)).
:label lines are otherwise ignored, just like #comment lines.

A label is a (possibly empty) sequence of non-space, non-tab, nonzero
bytes. Text following a label on a ":" line is ignored. If there is no
command on a ?label line, it's an unconditional jump. If a command exits 99
and the corresponding label is not found, all following delivery
instructions are skipped (as with |command). There are no backward jumps.

This makes the \fB.qmail\fR language a little more useful, IMO, but not
enough to cause trouble. (You get if-then-else, but no loops.) The syntax
is a little ugly, but it gets the job done. The same functionality is
already available with |command lines, but then you need multiple
\fB.qmail\fR files, which exposes extra addresses to outside senders, so it
gets a little more complicated.

.TP 5
(7)
A envdir line begins with a percent sign:

.EX
     % envdir_path
.EE

\fBqmail-local\fR takes the rest of the line as a directory with
environment variables and sets/unsets environment variables like the
\fBenvdir\fR(8) command. An command executed using a command line in
\fBdot-qmail\fR(5) will inherit these environment variables. You can also
ensure that the commands run just with the environment variables from
\fIenvdir_path\fR by setting \fBSANITIZE_ENV\fR environment variable for
\fBqmail-local\fR. If \fBSANITIZE_ENV\fR is enabled \fBqmail-local\fR
will first clear all environment variables other than USE_FSYNC,
USE_FDATASYNC, USE_SYNCDIR. You can set additional environment variables to
preserve by setting SANITIZE_ENV as a colon ':' separated list of
environment variables to preserve. The purpose of \fBSANITIZE_ENV\fR is to
ensure programs run using \fBdot-qmail\fR(5) will run without any
environment variable inherited from the startup scripts.

.PP
If \fB.qmail\fR has the execute bit set, it must not contain any program
lines, \fImbox\fR lines, or \fImaildir\fR lines. If \fBqmail-local\fR sees
any such lines, it will stop and indicate a temporary failure.

If \fB.qmail\fR is completely empty (0 bytes long), or does not exist,
\fBqmail-local\fR follows the \fIdefaultdelivery\fR instructions set by
your system administrator; normally \fIdefaultdelivery\fR is
\fB./Mailbox\fR, so \fBqmail-local\fR appends the mail message to
\fBMailbox\fR in \fImbox\fR format.

\fB.qmail\fR may contain extra spaces and tabs at the end of a line. Blank
lines are allowed, but not for the first line of \fB.qmail\fR.

If \fB.qmail\fR is world-writable or group-writable, \fBqmail-local\fR
stops and indicates a temporary failure.

.SH "SAFE QMAIL EDITING"
Incoming messages can arrive at any moment. If you want to safely edit your
\fB.qmail\fR file, first set the sticky bit on your home directory:

.EX
  chmod +t $HOME
.EE

\fBqmail-local\fR will temporarily defer delivery of any message to you if
your home directory is sticky (or group-writable or other-writable, which
should never happen). Make sure to

.EX
  chmod -t $HOME
.EE

when you are done! It's a good idea to test your new \fB.qmail\fR file as follows:

.EX
  qmail-local -n $USER ~ $USER '' '' '' '' ./Mailbox
.EE

.SH "EXTENSION ADDRESSES"
In the \fBqmail\fR system, you control all local addresses of the form .IR
user\fBBREAK\fR\fIanything\fR, as well as the address \fIuser\fR itself,
where \fIuser\fR is your account name. Delivery to
\fIuser\fR\fBBREAK\fIanything is controlled by the file
\fIhomedir\fR/\fB.qmail\fR\-\fIanything\fR.

(These rules may be changed by the system administrator; see \fBqmail-users\fR(5).)

The \fBalias\fR user controls all other addresses. Delivery to \fIlocal\fR
is controlled by the file \fIhomedir\fR/\fB.qmail\fR\-\fIlocal\fR, where
\fIhomedir\fR is \fBalias\fR's home directory.

In the following description, \fBqmail-local\fR is handling a message
addressed to \fIlocal@domain\fR, where \fIlocal\fR is controlled by
\fB.qmail\fR\-\fIext\fR. Here is what it does.

If \fB.qmail\fR\-\fIext\fR is completely empty, \fBqmail-local\fR follows
the \fIdefaultdelivery\fR instructions set by your system administrator.

If \fB.qmail\fR\-\fIext\fR doesn't exist, \fBqmail-local\fR will try some
default \fB.qmail\fR files.  For example, if \fIext\fR is \fBfoo-bar\fR,
\fBqmail-local\fR will try first \fB.qmail-foo-bar\fR, then
\fB.qmail-foo-default\fR, and finally \fB.qmail-default\fR. If any of these
default \fB.qmail\fR files exist, \fBqmail-local\fR will set the
environment variable \fBDEFAULT\fR as the string "\fIdefault\fR".
If none of these exist, \fBqmail-local\fR will bounce the message.
(Exception: for the basic \fIuser\fR address, \fBqmail-local\fR treats a
nonexistent \fB.qmail\fR the same as an empty \fB.qmail\fR.)

\fBWARNING:\fR For security, \fBqmail-local\fR replaces any dots in
\fIext\fR with colons before checking \fB.qmail\fR\-\fIext\fR .  For
convenience, \fBqmail-local\fR converts any uppercase letters in \fIext\fR
to lowercase.

When \fBqmail-local\fR forwards a message as instructed in
\fB.qmail\fR\-\fIext\fR (or \fB.qmail-default ), it checks whether
\fB.qmail\fR\-\fIext\fR\fB-owner\fP exists. If so, it uses
\fIlocal\fB-owner@\fIdomain as the envelope sender for the forwarded
message. Otherwise it retains the envelope sender of the original message.
Exception: \fBqmail-local\fR always retains the original envelope sender if
it is the empty address or \fB#@[]\fR, i.e., if this is a bounce message.
\fBqmail-local\fR sets the environment variable \fBNEWSENDER\fR to the
envelope sender for the forwarded message.

\fBqmail-local also supports \fBvariable envelope return paths\fR (VERPs):
if \fB.qmail\fR\-\fIext\fR\fB-owner\fP and
\fB.qmail\fR\-\fIext\fR\fB-owner-default\fP both exist, it uses
\fIlocal\fR\fB\-owner\-\fR@\fIdomain\fR\fB-@[]\fR as the envelope sender.
This will cause a recipient \fIrecip\fR\fB@\fR\fIreciphost\fR to see an
envelope sender of
\fIlocal\fR\fB\-owner\-\fR\fIrecip\fR\fB=\fR\fIreciphost\fR\fB@\fR\fIdomain\fR.

.SH "ERROR HANDLING"
If a delivery instruction fails, \fBqmail-local\fR stops immediately and
reports failure. \fBqmail-local\fR handles forwarding after all other
instructions, so any error in another type of delivery will prevent all
forwarding.

If a program returns exit code 99, \fBqmail-local\fR ignores all succeeding
lines in \fB.qmail\fR, but it still pays attention to previous forward lines.

To set up independent instructions, where a temporary or permanent failure
in one instruction does not affect the others, move each instruction into a
separate \fB.qmail\fR\-\fIext\fR file, and set up a central \fB.qmail\fR
file that forwards to all of the \fB.qmail\fR\-\fIext\fRs.
Note that \fBqmail-local\fR can handle any number of forward lines
simultaneously.

.SH "SEE ALSO"
ifaddr(1),
iftocc(1),
iftoccfrom(1)
condredirect(1),
condtomaildir(1),
filterto(1),
except(1),
bouncesaying(1),
dot-forward(1),
fastforward(1),
forward(1),
printforward(1),
setforward(1),
preline(1),
qnotify(1),
qreceipt(1),
replier(1),
rrforward(1)
qmail-command(8),
envelopes(5),
maildir(5),
mbox(5),
qmail-users(5),
qmail-local(8),
qmail-queue(8),
qmail-lspawn(8)
