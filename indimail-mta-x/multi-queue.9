.\" vim: tw=75
.TH multi-queue 7
.SH NAME
multi-queue \- indimail's multi queue architecture

.SH DESCRIPTION
\fBindimail\fR can be configured to use multiple queues for mail
deliveries, using the \fBqscheduler\fR(8) daemon. These can be configured
by setting few environment variables and by specifying command-line
switches to the \fBqscheduler\fR(8) daemon. The command line options can be
used either to configure a set of fixed static queues or have the queue
increased dynamically with load. The load is the ratio of concurrency used
and total concurrency configured for a queue. These are actually two
ratios. One ratio for local deliveries and another ratio for remote
deliveries.

A queue in \fBindimail\fR is denoted by a number and a base path. The
compile time default is \fIQMAILHOME/queue\fR, but can be changed by the
control file \fI@controldir@/queue_base\fR or the environment variable
\fBQUEUE_BASE\fR. The environment variable takes precedence. The queue
number and the base path constitutes the actual path for the queue. e.g.

.EX
queue numbered 1, means QMAILHOME/queue/queue1
queue numbered 2, means QMAILHOME/queue/queue2
...
queue numbered n, means QMAILHOME/queue/queuen
.EE

The compile time default for the first queue of the multi-queue environment
is \fIqueue1\fR. This can be changed by setting \fBQUEUE_START\fR
environment variable. The compile time default for the number of queues
that indimail uses is 5, which can be changed by setting \fBQUEUE_COUNT\fR
environment variable.

.SH ENVIRONMENT VARIABLES

The following environment variables are used to configure the queues.

QUEUE_START - defines the first queue that should be used. QUEUE_START=1
implies that QMAILHOME/queue/queue1 be the first queue

QUEUE_COUNT - defines the total number of queues that should be used for
mail deliveries. This is the fixed upper limit when \fBqscheduler\fR(8) is
passed the -\fIs\fR argument

As explained earlier, \fBqscheduler\fR(8) can be used for configuring mail
delivery with fixed number of queues or load dependent dynamic queues. The
following additional environment variables can be set when dynamic queues
are used.

QUEUE_MAX - defines the maximum queues that qscheduler can use for
deliveries when dynamic queues is configured (-\fId\fR argument to
\fBqscheduler\fR(8). The compile time default is 20.

QUEUE_LOAD - defines the max queue load after which \fBqscheduler\fR(8)
should increment the queue count by creating a new queue and starting an
additional \fBqmail-send\fR(8), \fBtodo-proc\fR(8) instance. The compile
time default is 90.

ERROR_INTERVAL - Used by \fBqscheduler\fR(8) when in dynamic mode.
Any failure in accessing message queues, allocating memory, opening
control files \fBqscheduler\fR sleeps for \fBERROR_INTERVAL\fR seconds
before continuing. The compile time default is 5 seconds.

.SH Inter-Process Communication
.
\fBqscheduler\fR(8) uses POSIX inter-process communication namely shared
memory segments and message queues. The various forms of IPC are described
as below

.PP
.TP 3
\fBshared memory\fR /\fIqscheduler\fR

This is created by \fBqscheduler\fR(8) using \fBshm_open\fR(3), owned by
root:root with perm 0644.

This segment is used to store two integers
.RS 3
.LP
.nr step 1 1
.IP \n[step] 2
\fBqueue count\fR - \fIqcount\fR number of queues in use by
\fBqscheduler\fR(8). This value will be the value of \fBQUEUE_COUNT\fR
environment variable on \fBqscheduler\fR(8) startup. This is a dynamic
number that is incremented when the total concurrency load goes beyond a
threshold (defined by \fBQUEUE_LOAD\fR environment variable).
\fBqscheduler\fR(8) will increase the queue count upto a maximum defined by
the \fBQUEUE_MAX\fR environment variable. \fBqmail-multi\fR(8),
\fBqmail-queue\fR(8) cycles through \fIqcount\fR queues to find the queue
with the least concurrency and uses that queue to queue the message.

.IP \n+[step]
\fBqueue configured\fR - \fIqconf\fR number of existing queues in QMAILHOME
directory. This number is incremented by qscheduler when it creates a new
queue. This number cannot go beyond the value of \fBQUEUE_MAX\fR
environment variable.
.LP
.RE

.PP
.TP 3
\fBshared memory\fR /\fBqueue\fR\fIN\fR
This is created by \fBqscheduler\fR(8) but used by \fBqmail-send\fR(8) to
write its current concurrency value and the maximum concurrency configured
(for both local and remote deliveries). The concurrency is incremented
whenever a job is opened and decremented whenever a job is closed. This is
owned by qmails:qmail with perm 0644. The queue load is the ratio of
current concurrency and the maximum concurrency.

.PP
The program \fBqtop\fR(8) uses the above shared memory segments to display
the queues with top load continuously without using file IO.
\fBqmail-qread\fR(8) is another program that uses the above shared memory to
display the queue status.

.PP
.TP 3
\fBmessage queue\fR /\fIqscheduler\fR

This is created by \fBqscheduler\fR(8) and used by \fBqmail-send\fR(8) to
communicate back, when its queue reaches, the maximum threshold percentage
for concurrency to total concurrency ratio. When the average concurrency
load reaches \fBQUEUE_LOAD\fR, \fBqscheduler\fR(8) starts a new
\fBqmail-send\fR(8), \fBqmail-send\fR(8) instance to install a new queue.
This is owned by root:root with perm 0600. This message queue is also used
by \fBsetqload\fR(8) to set queue load by sending a message on
\fIqscheduler\fR message queue to set the queue laod or to increase the
number of queues manually at runtime. \fBsetqload\fR(8) can also be used to
disable a queue temporarily.

.PP
.TP 3
\fBmessage queue\fR /\fBqueue\fR\fIN\fR

For each queue, \fBqscheduler\fR(8) creates a message queue using
\fBmq_open\fR(3). Here \fIN\fR refers to the queue number). This is owned
by qmailq:qmail with perm 0640.

This message queue is used by \fBqmail-queue\fR(8) to communicate to
\fBtodo-proc\fR(8) the split dir and the inode number of the message in
the outgoing queue. This is more efficient than the trigger method that
qmail-queue uses, where the trigger wakes up \fBqmail-send\fR(8) to scan
the \fItodo\fR directory. Scanning \fItodo\fR using \fBopendir\fR(3),
\fBreaddir\fR(2), also introduces what is known as the Silly Qmail
Syndrome (\fBSQS\fR), where a single instance of \fBqmail-send\fR(8) cannot
keep up with the injection rate from multiple qmail-queue clients. The
solution to this problem is to have a seperate process to process
\fItodo\fR directory. Having multiple instances of qmail-send can also
help avoiding \fBSQS\fR. These instances of qmail-send can be a fixed
number (qscheduler -s) or increased dynamically (qscheduler -d).

.SH SEE ALSO
qscheduler(8),
setqload(8),
qtop(8),
qmail-qread(8),
qmail-start(8),
qmail-multi(8),
qmail-queue(8),
qmail-send(8),
todo-proc(8),
shm_open(3),
mq_open(3),
ipcs(1),
mq_overview(7)
