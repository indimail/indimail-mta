.\" vim: tw=75
.TH qmail-queue 8

.SH NAME
qmail-queue \- queue a mail message for delivery

.SH SYNOPSIS
.B qmail-queue

.SH DESCRIPTION
\fBqmail-queue\fR reads a mail message from descriptor 0. It then reads
envelope information from descriptor 1. It places the message into the
outgoing queue for future delivery by \fBqmail-send\fR. The default
outgoing queue is @qmaildir@/queue. This can be changed by setting
environment variable QUEUEDIR to point to a path having a valid
queue created by the program \fBqueue-fix\fR(8). \fBqmail-queue\fR
is setuid to uid of user \fIqmailq\fR.

The deposition and balancing of mail across multiple queues is controlled
by the following environment variables.

.TP 5
\fBQUEUE_BASE\fR The base directory having all the indimail queues. If this
is not defined, the control file \fIqueue_base\fR is used. This is
typically QMAILHOME/queue.

.TP 5
\fBQUEUE_START\fR This is a number which defines the first queue that
should be used.

e.g. QUEUE_START=1 implies the first queue to be QMAILHOME/queue/queue1

.TP 5
\fBQUEUE_COUNT\fR This defines the number of queues that should be used for
load balancing. \fBqmail-queue\fR used a random number to select a queue in
a multi-queue setup.

e.g. QUEUE_START=1, QUEUE_COUNT=5 implies 5 queues QMAILHOME/queue/queue1,
QMAILHOME/queue/queue2, ..., QMAILHOME/queue/queue5

.TP 5
.B MIN_FREE
This is the minimum free disk space that should be available in the
filesystem containing the queues. When free space goes below this value,
qmail-multi will return a temporary disk full error "qq write error or disk
full (#4.3.0)". This prevents \fBqmail-send\fR reaching a deadlock in the
case when disk becomes full and there are bounce messages to be processed.
\fBqmail-send\fR in this case keeps on retrying bounce message which does
not succeeed because of insufficient disk space to write the bounce. This
effectively stops processing of local and remote messages and thus disk
space never gets freed up. \fBqmail-multi\fR prevents this from happening
by accepting mails only when disk space greater than MIN_FREE is present.
It uses \fBstatfs(2)\fR (\fBstatvfs\fR on solaris) to get the free space on
the filesystem.

\fBqmail-queue\fR uses DIRSPLIT as the directory split. It can be
overriden by environment variable \fBCONFSPLIT\fR upto a max of
\fBDIRSPLIT\fR.

The envelope information is an envelope sender address followed by a list
of envelope recipient addresses. The sender address is preceded by the
letter F and terminated by a 0 byte. Each recipient address is preceded by
the letter T and terminated by a 0 byte. The list of recipient addresses is
terminated by an extra 0 byte. If \fBqmail-queue\fR sees end-of-file before
the extra 0 byte, it aborts without placing the message into the queue. If
\fBUSE_FSYNC\fR \fBUSE_FDATASYNC\fR environment variable is defined
\fBqmail-queue\fR uses fsync(2) or fdatasync(2) to sync the message file in
\fIqueue/mess\fR and the envelope in \fIqueue/intd\fR file as well. After
creating a link to the envelope in \fIqueue/todo\fR to \fIqueue/intd\fR,
qmail-queue syncs the directory using the following two methods.

.IP \[bu] 2
BSD Style Synchronous Directory -
This gets enabled if \fBUSE_SYNCDIR\fR environment variable is defined. This
forces directory syncing.

.IP \[bu]
Using FSYNC -
\fBqmail-queue\fR opens the file in \fBqueue/todo\fR and uses the fsync(2)
call to flush data buffers to the disk

.IP \[bu]
Using FDATASYNC -
\fBqmail-queue\fR opens the file in \fBqueue/todo\fR and uses the
fdatasync(2) instead of fsync(2) call to flush data buffers to the disk.
fdatasync(2) is faster than fsync(2), but does not flush few of the file's
metadata.

.PP
\fBqmail-queue\fR(8) communicates with \fBtodo-proc\fR(8) when it places a
message in the outgoing queue using either of the two below methods.

\fBtrigger\fR method - This is used when the environment variable
\fBDYNAMIC_QUEUE\fR is not set. Every queue in indimail has the path
\fIlock/trigger\fR pointing to a named pipe. When a message is queued,
\fBqmail-queue\fR writes a null byte to the pipe which causes
\fBtodo-proc\fR to wake up and scan the \fItodo\fR subdirectory of the
queue. This is a disk intensive operation and can overwhelm
\fBtodo-proc\fR / \fBqmail-send\fR under high injection rate conditions.

\fBmessage queue\fR method - This is used when the environment variable
\fBDYNAMIC_QUEUE\fR is set. Here \fBqmail-queue\fR communicates the inode
number and the todo subdirectory name using POSIX message queue
/queue\fIN\fR. Here \fIN\fR refers to the queue number (See
\fBmulti-queue\fR(7). qmail-queue uses mq_open(3) to open the message
queue. This method avoids the need for \fBtodo-proc\fR / \fBqmail-send\fR
to scan the queue subdirectories for new messages, thereby saving on disk
IO for better filesystem performance.

If the environment variable \fBORIGINIPFIELD\fR is set, a
"X-Originating-IP" header will be added to every relayed mail.

If the environment variable \fBFASTQUEUE\fR is set, qmail-queue will bypass
QHPSI, ORIGINIPFIELD, extraqueue, removeheaders, envheaders, logheaders,
mailarchive control files

.SH CONTROL FILES
\fBqmail-queue\fR use many control files to provide various features.

.TP
\fBextraqueue\fR
If this control file exists, each line in the content is added as a
recipient to the recipient list. The environment variable \fBEXTRAQUEUE\fR
also does the same thing. The value of the environment variable overrides
the value in the control file. Also the environment variable can be just one
recipient. There is a potential for loops in case the recipient is local and
the local delivery has any kind of forwarding rule which results in
qmail-queue being invoked. If \fBEXTRAQUEUE\fR is set but empty, the
control will not be read.

.TP
\fBquarantine\fR
If this control file exists, recipient list is replaced with its content.
The environment variable \fBQUARANTINE\fR also does the same thing. The
value of the environment variable overrides the value in the control file.
Additionally, comma separated list of original recipient list is added to
the header \fBX-Quarantine-ID\fR. If \fBQUARANTINE\fR is set but empty, the
control will not be read.

.TP
\fBenvheaders\fR
If this control file exists, \fBqmail-queue\fR passes all headers listed
in the control file to the queue along with the value. \fBqmail-local\fR
and \fBqmail-remote\fR will set environment variables corresponding to the
headers with the values. An optional length, separated by a ':', can be
appended to the name of the header. If length is specified, the
environment variable will be set only if the actual length of the header
value is less than or equal to this value. This will prevent emails with
extra long headers or malicious headers to exploit memory allocation on
the system. The environment variable \fBENVHEADERS\fR can be set to use
a different name for this control file. If \fBENVHEADERS\fR is set but
empty, the control file will not be read.

.TP
\fBlogheaders\fR
If this control file exists, \fBqmail-queue\fR writes all headers (along
with values) listed in the control file to file descriptor defined by
\fBLOGHEADERFD\fR environment variable. The file descriptor needs to be open
for write. You can open the file descriptor in the startup scripts for
\fBqmail-smtpd\fR, for example. If \fBLOGHEADERS\fR is set but empty, the
control file will not be read.

.EX
 touch /tmp/header.log
 exec 45 >/tmp/header.log
 LOGHEADERFD=45
.EE

If the file descriptor is not open, logging of header will be silently
ignored. Logging of headers can be useful for debugging or logging specific
headers in log files. The environment variable \fBLOGHEADERS\fR can be set
to use a different name for this control file.

.TP
\fBremoveheaders\fR
If this control file
exists, \fBqmail-queue\fR removes all headers listed in the control file
from the mail message on descriptor 0 before writing it to the disk. The
environment variable \fBREMOVEHEADERS\fR can be set to use a different
name for this control file. If \fBREMOVEHEADERS\fR is set but empty, the
control will not be read.

Every envelope recipient address should contain a username, an @ sign,
and a fully qualified domain name.

\fBqmail-queue\fR always adds a \fBReceived\fR line to the top of the
message. If the environment variable \fBHIDE_HOST\fR is set,
\fBqmail-queue\fR does not write hostnames and IP addresses in the received
headers.

\fBqmail-queue\fR keeps a copy of the \fBQQEH\fR environment variable (if
set), and passes it into the queue. \fBqmail-local\fR and
\fBqmail-remote\fR will prepend it to the headers of the email when it is
delivered.

.TP
\fBmailarchive\fR
if this control file exists, its content can be used for rule based
archival. The environment variable \fBMAILARCHIVE\fR overrides the name of
the \fImailarchive\fR control file. If \fBMAILARCHIVE\fR is set but empty,
the control file will not be read. A line in this control file can be of
the form

.EX
  type:regexp:dest_mailbox
.EE

where \fItype\fR is \fBF\fR or \fBT\fR. If \fItype\fR is \fBF\fR, rule
is appled on the sender. If \fItype\fR is \fBT\fR, the rule is applied on
the recipient. \fItype\fR can be omitted to match all recipients (but not
senders). \fIregexp\fR is an expression to match the address (sender or
recipient as specfied by \fItype\fR) and \fIdest_mailbox\fR is a valid
email address. \fIregexp\fR can be omitted to match any address. Remember
that \fIregexp\fR is a real regular expression and not filename glob
pattern as used by functions like \fBfnmatch\fR(3). Typically
\fB.*@yourdomain\fR (and not \fB*@yourdomain\fR) is what you intend when
you want to use it to match all addresses from \fIyourdomain\fR.
\fIregexp\fR can be preceded by a \fB!\fR sign to negate the expression. A
\fB%\fR in \fIdest_mailbox\fR followed by \fBu\fR, \fBd\fR or \fBe\fR gets
replaced as below

.EX
  %u - user component in address without the '@' sign
  %d - domain component in address
  %e - email address
.EE

As stated above, the address used for matching \fIregexp\fR is the sender
in case type is \fBF\fR. For bounces, you can use \fB<>\fR to match a null
sender. e.g.

.EX
  F:<>:bounce_archive@example.com
.EE

When a rule matches a sender or any one of the recipients, the
\fIdest_mailbox\fR address after expansion will be added to the existing
recipient list. When a rule matches multiple recipients, only one email
address will be added to recipient list to avoid duplicates.

The below will make a copy all mails for domain \fIyourdomain\fR to
\fIarchyourdomain\fR (for all senders - practically each and every mail).

.EX
  ::%u@arch%d
.EE

The below will make a copy of all mails sent by anyone from your
\fIyourdomain\fR address.

.EX
  F:.*@yourdomain:outgoing@yourdomain
.EE

The below will make a copy of all mails sent by anyone not from your
\fIyourdomain\fR address. Here we have used \fB!\fR to negate the
result of \fIregexp\fR match.

.EX
  F:!.*@yourdomain:incoming@yourdomain
.EE

.TP
\fBoriginipfield\fR
If this control file is set or if the environment variable
\fBORIGINIPFIELD\fR is set, a "X-Originating-IP" header will be added to
every relayed mail. The environment variable \fBORIGINIPFIELD\fR overrides
the control file \fBoriginipfield\fR.

.PP
\fBqmail-queue\fR does not inspect the message and does not enforce any
restrictions on its contents. However, the recipients probably expect to
see a proper header, as described in \fBqmail-header\fR(5) .

If \fBQMAILQUEUE\fR environment variable is set, programs included with
qmail which invoke \fBqmail-queue\fR will invoke the the program set by
\fBQMAILQUEUE\fR instead.

.SH "FILESYSTEM RESTRICTIONS"
\fBqmail-queue\fR imposes two constraints on the queue structure:
each \fBmess\fR subdirectory must be in the same filesystem as the
\fBpid\fR directory; and each \fBtodo\fR subdirectory must be in the same
filesystem as the \fBintd\fR directory.

.SH "Qmail High Performance Scanner Interface"
A large fraction of today's emails is infected by a virus or a worm. It is
necessary to recognize those malicious emails as soon as possible --
already in the DATA phase of the SMTP conversation and to reject them.

Typically, this is facilitated my means of \fBAMaViS\fR,
\fBqmail-scanner\fR, or \fBqscanq\fR which facilitate as "wrapper" of the
original qmail-queue program invoked by means of \fBQMAILQUEUE\fR
environment variable.

However -- in case of virus attacks -- those umbrella programs become part
of the problem itself due to their resource requirements.

Today's virus scanner -- in particluar Clam AV -- work in resource
efficient client/server mode (clamd/clamdscan) and include the feature to
detect virii/worms in the base64 encoded data stream. Thus, there is no
necessity to call additional programs (like reformime or ripmime) except
for the virus scanner itself.

The QHPSI extension for qmail-queue allows to call an arbitary virus scanner
directly to scan the message file in \fImess\fR subdirectory or it allows
plugins to be loaded from the @prefix@/lib/indimail/plugins directory. This
directory can be changed by defining \fBPLUGINDIR\fR environment variable.
QHPSI can be advised to pass multiple arguments to the virus scanner for
customization. To run external scanner or load scanner plugins,
\fBqmail-queue\fR calls \fBqhpsi\fR, a program setuid to \fIqscand\fR. By
default, \fBqhpsi\fR looks for the symbol \fIvirusscan\fR to invoke the
scanner. The symbol can be changed by setting the environment variable
\fBQUEUE_PLUGIN_SYMB\fR to the desired symbol.

In order to use the QHPSI, the virus scanner has to have the following
qualifications:

.TP 3
a. Correct interpretation of the base64 and perhaps the uudecoded data in
order to detect the virii/worms therein.

.TP 3
b. Results have to be made available on stderr/stdout.

.TP 0
.fi
And perhaps:

.TP 3
c. Suppression of 'negative' scan results. 

.TP 0
.fi
You can set environment variables to set the QPHSI interface as given
below.

.B QHPSI
can be set either to the full path of a scanner or to a list of plugins.

.LP
.nr step 1 1
.IP \n[step] 2
is set to full path of the virus scanner, i.e. QHPSI=@prefix@/bin/clamdscan.
If full path is not specified, \fBqmail-queue\fR will use execvp(2) to run
the scanner. Else it uses execv(2). Setting QHPSI environment variable
turns on the QHPSI interface. The Qmail High Performance Scanner interface
QHPSI also allows \fBqmail-queue\fR to read command line arguments taken
from the \fBQHPSI\fR environment to be used as a call-interface for an
external virus scanner:

.EX
  QHPSI="clamdscan %s --quiet --no-summary"
.EE

Any \fB'%s'\fR in the \fBQHPSI\fR gets replaced with
the message filename in the queue's '\fImess\fR' directory.

.IP \n+[step]
is set to list of plugins starting with a keyword 'plugin:'.

.EX
  QHPSI="plugin: clamd.so fsecure.so symantec.so"
.EE

Sets \fBqmail-queue\fR to load three plugins clamd, fsecure and symantec from
@prefix@/lib/indimail/plugins directory.

You can also use the plugin generic.so. generic.so plugin can use any scanner
defined by the \fBSCANCMD\fR environment variable.

.EX
  QHPSI="plugin: generic.so"
  SCANCMD="clamdscan %s --quiet --no-summary"
.EE

Any \fB'%s'\fR in the \fBSCANCMD\fR gets replaced with
the message filename in the queue's '\fImess\fR' directory.

.LP

.TP
\fBQHPSIRC\fR
To specify the return code of the virus scanner in case of an infection;
default is 1.

.TP
\fBQHPSIRN\fR
To specify the return code of the virus scanner in case of no infection;
default is 0.

.TP
\fBREJECTVIRUS\fR
If set to 1, infected mails will be bounced to sender. If set to 2, infected
mails will be blackholed. If set to 0, infected mails will be accepted.
Blackholing does not work if VIRUSFORWARD or QUARANTINE is defined. Setting
to a value > 2 will bounce infected mails to sender

.TP
\fBVIRUSFORWARD\fR
Infected mails will be quarantined to the email defined by VIRUSFORWARD.
This will work only if \fBREJECTVIRUS\fR is not equal to 1. Setting
VIRUSFORWARD sets the \fBX-Quarantine-ID\fR containing the list of all
recipients.

.TP
\fBQHPSIMINSIZE\fR
The minimal size of the message to invoke the virus scanner; default is 0.
A typical choice would be QHPSIMISIZE=10000 (~10k).

.TP
\fBQHPSIMAXSIZE\fR
The maximal size of the message to invoke the virus scanner; default is
unrestricted. A typical choice would be QHPPIMAXSIZE=1000000 (~1M).

When QHPSI is enabled \fBqmail-queue\fR adds the header X-QHPSI, the value
of which is either 'infected' or 'clean' (depending on whether the mail as
identifed as infected or not).

.SH "EXIT CODES"
\fBqmail-queue\fR does not print diagnostics. It exits 0 if it has
successfully queued the message. It exits between 1 and 99 if it has failed
to queue the message.

All \fBqmail-queue\fR error codes between 11 and 40 indicate permanent errors:
.TP 5
.B 11
Address too long.
.TP
.B 31
Mail server permanently refuses to send the message to any recipients.
(Not used by \fBqmail-queue\fR, but can be used by programs offering the
same interface.)
.TP
.B 32
Spam or Junk Mail threshold exceeded. This is returned when a spam filter
like \fBbogofilter\fR is used (SPAMFILTER is defined) and the mail is
identified as spam.
.TP
.B 33
Message contains a virus.
.TP
.B 34
Message contains banned attachments
.TP
.B 88
Custom error (=bounce) messages. You have to write the error message to
STDERR and exit 88, in order to use the custom message. Format of the
message:

Dthis is a custom fatal error message

Zthis is a custom temporary failure message

.PP
All other \fBqmail-queue\fR error codes indicate temporary errors:
.TP 5
.B 51
Out of memory.
.TP
.B 52
Timeout.
.TP
.B 53
Write error; e.g., disk full.
.TP
.B 54
Unable to read the message or envelope.
.TP
.B 55
Unable to read a configuration file.
.TP
.B 56
Problem making a network connection from this host. (Not used by
.BR qmail-queue .)
.TP
.B 61
Problem with the qmail home directory.
.TP
.B 62
Problem with the queue directory.
.TP
.B 63
Problem with queue/pid.
.TP
.B 64
Problem with queue/mess.
.TP
.B 65
Problem with queue/intd.
.TP
.B 66
Problem with queue/todo.
.TP
.B 67
Problem with uids/gids.
.TP
.B 71
Mail server temporarily refuses to send the message to any recipients. (Not
used by \fBqmail-queue\fR.)
.TP
.B 72
Connection to mail server timed out. (Not used by \fBqmail-queue\fR.)
.TP
.B 73
Connection to mail server rejected. (Not used by \fBqmail-queue\fR.)
.TP
.B 74
Connection to mail server succeeded, but communication failed. (Not used by
\fBqmail-queue\fR.)
.TP
.B 79
Envelope format error.
.TP
.B 81
Internal bug; e.g., segmentation fault.

.SH Notes

Samples with clamd/clamdscan:

Here is a typical sample how to customize QHPSI together with Clam AV
(clamd/clamdscan) for a tcpserver tcp.smtpd file:

.EX
 :allow,QHPSI='@prefix@/bin/clamdscan %s --quiet --no-summary'

Comments:

 - The path of 'clamdscan' can be omitted, because it is in 
   the standard path (@prefix@/bin).
 - In the configuration file clamav.conf, the option
  'ScanMail' has to be enabled; clamd has to run as 'root'.
 - The argument QHPSI='@prefix@/bin/clamdscan %s --quiet --no-summary'
   tells Clam AV to just provide the return status and print nothing
   on the stdout.
 - The argument QHPSIRC is not necessary, because
   'clamdscan' return with 'RC=1' (the default) in 
   case a virus infection is recognized.

Sample with McAfee's uvscan:

 :allow,QHPSI='/usr/bin/uvscan --secure',QHPSIMAXSIZE='9000000',QHPSIRC='13'

Comments:

 - The path of 'uvscan' is '/usr/local/bin' and can be ommitted.
 - 'uvscan' returns with RC=13 in case a virus is found,
   therefore, QHPSIRC has to provide this value.
 - The virus scanning is omitted, if the size of the message
   exceeds 9.000.000 byte, ~ 8.5MB.

You can also set these variables outside tcp.smtp. e.g.

  # echo @prefix@/bin/clamdscan %s --quiet --no-summary \\
     > @servicedir@/qmail.smtpd.25/variables/QHPSI
.EE

.SH "SEE ALSO"
addresses(5),
envelopes(5),
qmail-header(5),
qmail-inject(8),
indimail-control(5),
queue-fix(8),
qmail-rm(1),
qmail-qread(8),
qmail-qmqpc(8),
qmail-send(8),
qmail-smtpd(8),
qmail-internals(8),
qmail-multi(8),
qmail-spamfilter(8),
qmail-nullqueue(8),
qmail-direct(8),
multi-queue(7),
fsync(2),
fdatasync(2),
mq_open(3),
qmail-queue-clients(7)
