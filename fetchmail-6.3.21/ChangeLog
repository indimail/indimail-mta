1.  conf.c - authmeth
2.  configure.ac - --enable-indimail and --enable-indimaildir=dir
3.  fetchmail.c - authmeth
4.  fetchmailconf.py - authmeth
5.  fetchmail.h - authmeth
6.  lock.c - use /var/tmp instead of home directory
7.  odmr.c - odmr_up, use SMTP authentication as defined by AUTHMETHOD instead
    of only CRAM-MD5
8.  options.c - authmeth
9.  rcfile_y.y - authmeth
10. rcfile_l.l - authmeth
11. smtp.c
12. Makefile.am
13. copy slemsPrivate.c, writefifo.c, fixwvdialconf.c, fetchmail.up.in,
    fetchmail.down.in, ip-down.local.in, ip-up.local.in, ppp-off, fetchmail.cron

                          Checklist for Adding Options

   Adding a control option is not complicated in principle, but there are
   a lot of fiddly details in the process. You'll need to do the following
   minimum steps.
     * Add a field to represent the control in struct run, struct query,
       or struct hostdata.
     * Go to rcfile_y.y. Add the token to the grammar. Don't forget the
       %token declaration.
     * Pick an actual string to declare the option in the .fetchmailrc
       file. Add the token to rcfile_l.
     * Pick a long-form option name, and a one-letter short option if any
       are left. Go to options.c. Pick a new LA_ value. Hack the
       longoptions table to set up the association. Hack the big switch
       statement to set the option. Hack the `?' message to describe it.
     * If the default is nonzero, set it in def_opts near the top of
       load_params in fetchmail.c.
     * Add code to dump the option value in fetchmail.c:dump_params.
     * For a per-site or per-user option, add proper FLAG_MERGE actions in
       fetchmail.c's optmerge() function. For a global option, add an
       override at the end of load_params; this will involve copying a
       "cmd_run." field to a corresponding "run." field, see the existing
       code for models.
     * Document the option in fetchmail.man. This will require at least
       two changes; one to the collected table of options, and one full
       text description of the option.
     * Hack fetchmailconf to configure it. Bump the fetchmailconf version.
     * Hack conf.c to dump the option so we won't have a version-skew
       problem.
     * Add an entry to NEWS.
     * If the option implements a new feature, add a note to the feature
       list.

   There may be other things you have to do in the way of logic, of
   course.

   Before you implement an option, though, think hard. Is there any way to
   make fetchmail automatically detect the circumstances under which it
   should change its behavior? If so, don't write an option. Just do the
   check!
