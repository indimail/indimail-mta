#
# $Log: common.tcl.in,v $
# Revision 2.22  2016-06-08 10:42:04+05:30  Cprogrammer
# fixed paths for dns*, qmail-tcpto and images
#
# Revision 2.21  2016-06-07 18:38:23+05:30  Cprogrammer
# FHS compliance
#
# Revision 2.20  2010-06-25 17:43:33+05:30  Cprogrammer
# replaced qmail-qstat with qmail-qread
#
# Revision 2.19  2010-02-20 13:52:28+05:30  Cprogrammer
# set firefox as default browser and gnome-terminal as default terminal
#
# Revision 2.18  2009-10-03 23:55:14+05:30  Cprogrammer
# removed mailstat
#
# Revision 2.17  2009-02-27 14:43:42+05:30  Cprogrammer
# replaced directories in autoconf variables
#
# Revision 2.16  2004-06-20 01:06:00+05:30  Cprogrammer
# *** empty log message ***
#
# Revision 2.15  2004-05-05 11:52:31+05:30  Cprogrammer
# update screen before mailstat to get indium screen
#
# Revision 2.14  2003-12-30 00:27:18+05:30  Cprogrammer
# *** empty log message ***
#
# Revision 2.13  2003-12-07 23:09:12+05:30  Cprogrammer
# changed log path from /var/log/qmail to /var/log/indimail
#
# Revision 2.12  2003-12-06 23:40:39+05:30  Cprogrammer
# corrected help command
#
# Revision 2.11  2003-11-03 21:00:38+05:30  Cprogrammer
# initialize win
#
# Revision 2.10  2003-11-03 20:58:44+05:30  Cprogrammer
# use vuserinfo to determine the host for distributed domains
#
# Revision 2.9  2003-11-03 00:49:00+05:30  Cprogrammer
# added load monitor
#
# Revision 2.8  2003-10-29 23:21:17+05:30  Cprogrammer
# use sane value for supervise directory configuration
# added checkbutton for TAI selection
#
# Revision 2.7  2003-10-27 22:36:44+05:30  Cprogrammer
# corrected dbcontrol aborting if smtproutes file was absent
#
# Revision 2.6  2003-10-22 01:07:02+05:30  Cprogrammer
# *** empty log message ***
#
# Revision 2.5  2003-10-18 20:05:38+05:30  Cprogrammer
# allow postmaster to login in without admin privileges
# added Supervise tool in main window
#
# Revision 2.4  2003-10-18 00:14:01+05:30  Cprogrammer
# corrected return value of msg_dialog
# added combobox for multilog file list
#
#
proc msg_dialog {win title text imagefile default args} {
	global BWidget_present prgtext textcolor
	variable msg

	if {[string length $text] > 60} {
		set textMode 1
	} else {
		set textMode 0
	}
	if {$BWidget_present != 1} {
		return [tk_dialog $win $title $text $image $args]
	} else {
		catch {destroy $win}
		set dlg [Dialog $win -parent . \
			-separator 1 \
			-title   $title \
			-side    right    \
			-modal local \
			-image [image create photo -file $imagefile] \
			-anchor  n  \
			-default $default -cancel $default]
		$dlg add -name cancel -text "Cancel"
		foreach line $args {
			if {[string length $line]} {
				$dlg add -name $line -text $line
			}
		}
		set fr [$dlg getframe]
		if {[info exists textMode] && $textMode} {
			if {[info exists textcolor] == 0 || $textcolor == ""} {
				set textcolor DeepSkyBlue4
			}
			frame $fr.1 -height 220 -width 1
			frame $fr.2 -height 220 -width 520
			pack $fr.1 -side left -anchor nw -expand 0 -fill y
			pack $fr.2 -side left -anchor nw -expand 1 -fill both
			set lab [label $fr.2.l -text "Message" -width 45]
			pack $lab -fill x -expand 0
			set msg $fr.2.msg
			text $msg -setgrid 0 -wrap none -bd 2 \
				-relief sunken -insertofftime 0 \
				-background $textcolor \
				-xscrollcommand "$msg.scrollx set" \
				-yscrollcommand "$msg.scrolly set"
			scrollbar $msg.scrolly -orient vertical -trough black -command {$msg yview}
			scrollbar $msg.scrollx -orient horiz    -trough black -command {$msg xview}
			pack $msg.scrolly -side right  -fill y -anchor ne
			pack $msg.scrollx -side bottom -fill x -anchor sw -in $msg
			pack $msg -fill both -expand yes
			$msg insert end "$text \n"
			$msg yview moveto 1
			$msg configure -state disabled
		} else {
			set msg [label $fr.msg -text $text -justify center -anchor c]
			pack $msg -fill both -expand yes
		}
		set returnstatus [$dlg draw]
		if {[info exists textMode] && $textMode} {
			wm geometry $dlg "=160x350"
			wm resizable $dlg 0 0
			wm overrideredirect $dlg 0
		}
		return $returnstatus
	}
}

proc validateKey {c val} {
	if {$c == 1} {
		## Alphanum
		set expr {^[A-Za-z0-9 ]*$}
	} 
	if {$c == 2} {
		## Alpha
		set expr {^[A-Za-z ]*$}
	} 
	if {$c == 3} {
		## Real
		set expr {^[-+]?[0-9]*\.?[0-9]*([0-9]\.?e[-+]?[0-9]*)?$}
	}
	if {[regexp $expr $val]} {
		return 1
	} else {
		bell
		return 0
	}
}

proc splash {maxevents} {
	global prgindic prgtext
	global indiumversion indiliteversion textcolor
	variable tfr
	variable top

	if {[info exists textcolor] == 0 || $textcolor == ""} {
			set textcolor DeepSkyBlue4
	}

	set top [toplevel .intro -relief raised -borderwidth 2]
	wm withdraw $top
	wm geometry $top "=100x40+0+0"
	wm maxsize  $top 80 25
	wm resizable $top
	wm overrideredirect $top 0
	wm protocol $top WM_DELETE_WINDOW {wm withdraw $top}
	wm withdraw .

	set ximg  [label $top.x   -bitmap @@imagedir@/x1.xbm      -foreground grey90 -background white]
	set bwimg [label $ximg.bw -bitmap @@imagedir@/bwidget.xbm -foreground grey90 -background white]
	set frame [frame $ximg.f -background white]
	if {[info exists indiumversion]} {
	set lab1  [label $frame.lab1 -text "Indium $indiumversion"     -background white -font {times 24}]
	} else {
	set lab1  [label $frame.lab1 -text "IndiLITE $indiliteversion" -background white -font {times 24}]
	}
	frame $frame.lab2 -bd 2 -bg white
	set prg  [ProgressBar $frame.lab2.1 -bg white -variable prgindic -maximum $maxevents]
	set lbl  [label $frame.lab2.2 -textvariable prgtext -background white -font {times 14} -width 20]
	pack $prg -side left
	pack $lbl -side left -expand 0 -fill x
	set tfr   [frame $frame.fr -bg blue]
	if {[info exists indiumversion]} {
	label $tfr.label -text "Indium" -relief raised -bd 2
	} else {
	label $tfr.label -text "IndiLITE" -relief raised -bd 2
	}
	text $tfr.log -wrap none -borderwidth 2 \
		-relief sunken -setgrid true -insertofftime 0 \
		-background $textcolor \
		-xscrollcommand "$tfr.log.scrollx set" \
		-yscrollcommand "$tfr.log.scrolly set"
	scrollbar $tfr.log.scrolly -orient vertical -trough black -command {$tfr.log yview}
	scrollbar $tfr.log.scrollx -orient horiz    -trough black -command {$tfr.log xview}

	pack $tfr.label -expand 0 -fill x -in $tfr
	pack $tfr.log.scrolly -side right  -fill y -anchor e -in $tfr.log
	pack $tfr.log.scrollx -side bottom -fill x -in $tfr.log
	#pack $tfr.label -expand 1 -fill x -in $tfr
	#pack $tfr.log.scrolly -side right  -fill y -anchor e -expand 1
	#pack $tfr.log.scrollx -side bottom -fill x -in $tfr.log
	pack $tfr.log -side left -ipadx 260 -ipady 85 -expand 1 -fill both -anchor nw
	pack $lab1 $frame.lab2 -side top -anchor nw
	pack $tfr -side bottom -anchor sw
	place $frame -x 0 -y 0 -anchor nw
	place $bwimg -relx 1 -rely 1 -anchor se
	pack $ximg
	BWidget::place $top 0 0 center
	wm deiconify $top
	update
	bind $top <F2> {wm withdraw .intro}
}


proc progressDialog {} {
	variable top
	global prgtext w want_progressdialog

	catch {destroy .progress}
	if {$want_progressdialog == 0} {
		return
	}
	if {[winfo exists $w]} {
		set target $w
	} else {
		set target .
	}
	set x [expr [winfo rootx $target] + ([winfo width  $target]/2)]
	set y [expr [winfo rooty $target] + ([winfo height $target]/2)]
	set top [toplevel .progress -width 220 -height 50 -relief flat -bd 2 -takefocus 1]
	wm title $top "Wait..."
	wm resizable $top 0 0
	wm positionfrom $top program
	wm protocol $top WM_DELETE_WINDOW {destroy $top}
	$top configure -cursor watch
	if {[file exist @imagedir@/hourglass.gif]} {
		label $top.i
		$top.i config -image [image create photo -file @imagedir@/hourglass.gif]
		pack $top.i -side left
	}
	label $top.l -text $prgtext -width 20 -relief flat
	pack $top.l -side left
	BWidget::place $top 220 50 "center" $target
}

proc showManEntry {} {
	global mlvar aidedir tcl_platform env
	help::init  @shareddir@/doc/indimail.html
}

# SetIcon --
#
# Set the icon bitmap
#
# Arguments:
# w    - window to set the icon for
# icon - the name of the icon

proc SetIcon {w icon} {
	source @scriptdir@/global.tcl

	switch $icon {
		normal {
			if {[file readable @imagedir@/tkrat.xbm]} {
				wm iconbitmap @$w @imagedir@/tkrat.xbm
				wm iconmask $w @@imagedir@/tkratmask.xbm
	    	}
		}
		small {
			if {[file readable @imagedir@/linux.xbm]} {
				wm iconbitmap $w @@imagedir@/linux.xbm
				wm iconmask $w @@imagedir@/linux_mask.xbm
	    	}
		}
		none {
	    	wm iconbitmap $w ""
	    	wm iconmask $w ""
		}
	}
}

#---------------------------------------------------------
#   Type names		Extension(s)	Mac File Type(s)
#---------------------------------------------------------
proc fileDialog {w ent operation list_type} {
	global tk_strictMotif
	global emailfile
	global exfile
	global subscribefile
	global initialdir
	global rwin
	set types {
		{"All files"		*}
		{"Text files"		{.txt .doc}	}
		{"Text files"		{}		TEXT}
		{"Tcl Scripts"		{.tcl}		TEXT}
		{"C Source Files"	{.c .h} }
		{"All Source Files"	{.tcl .c .h} }
		{"Image Files"		{.gif} }
		{"Image Files"		{.jpeg .jpg} }
		{"Image Files"		""		{GIFF JPEG} }
	}
	if {$operation == "dir"} {
		set file [tk_chooseDirectory -initialdir $initialdir -mustexist true -title "Directory" -parent $w]
	} else {
		#set tk_strictMotif 1
		if {$operation == "open"} {
			set file [tk_getOpenFile -filetypes $types -parent $w -initialdir $initialdir]
		} else {
			set file [tk_getSaveFile -filetypes $types -parent $w -initialfile Untitled -defaultextension .txt]
		}
		if {[string length $file] > 0 && $list_type == 1} {
			$rwin.files delete 0 end
			$rwin.files list delete 0 end
			if {[string length $emailfile] > 0 && [string compare $file $emailfile] != 0} {
				$rwin.files list insert end $emailfile
			}
			if {[string length $exfile] > 0 && [string compare $file $exfile] != 0} {
				$rwin.files list insert end $exfile
			}
			if {[string length $subscribefile] > 0 && [string compare $file $subscribefile] != 0} {
				$rwin.files list insert end $subscribefile
			}
			$rwin.files list insert end $file
		}
		#set tk_strictMotif 0
	}
	if {[string length $file] > 0} {
		$ent delete 0 end
		$ent insert 0 $file
		$ent xview end
	}
}

proc createWindow {} {
	global BWidget_present prgtext
	source @scriptdir@/global.tcl
	global w win

	set win .dname
	set w $win
	destroyFirstPage
	if {$BWidget_present == 1} {
		ScrollableFrame $win -yscrollcommand "$win.vscroll set" -xscrollcommand "$win.hscroll set"
		scrollbar $win.vscroll -command "$win yview" -trough black
		scrollbar $win.hscroll -command "$win xview" -trough black -orient horiz
		pack $win -side left -anchor nw -expand 1 -fill both
		grid $win.vscroll -row 0 -column 1 -rowspan 2 -columnspan 1 -sticky news
		grid $win.hscroll -row 1 -column 0 -rowspan 1 -columnspan 1 -sticky news
		grid rowconfig    $win 0 -weight 1 -minsize 0
		grid columnconfig $win 0 -weight 1 -minsize 0
		set w [$win getframe]
		set lwin [frame $w.left  -relief flat  -bd 2]
		set rwin [frame $w.right -relief flat  -bd 2]
		set dwin $w.debug
	} else {
		frame $w -relief flat  -bd 2
		pack $w -side left -anchor nw -expand 1 -fill x
		set lwin [frame $w.left  -relief flat  -bd 2]
		set rwin [frame $w.right -relief flat  -bd 2]
		set dwin $w.debug
	}
	pack $lwin -side left -anchor nw -expand 0 -fill x -anchor nw -in $w
	pack $rwin -side left -anchor nw -expand 0 -fill x -anchor nw -in $w -after $lwin
	#setGrab .dname
}

proc destroyWindows {} {
	global hostname w win BWidget_present prgtext text logfile clockmode 
	global indiumversion indiliteversion fileSize

	if {$BWidget_present == 1} {
		catch {destroy $win}
		catch {destroy $w}
	} else {
		catch {destroy $w}
	}
	catch {destroy .f1}
	catch {destroy .pm1}
	bind . <F1> {doHelp About}
	if {[winfo exists .l1]} {
		pack .l1 -fill x -expand no -side top -anchor w
	}
	if {[winfo exists .c]} {
		if {$clockmode == 1} {
			pack .c -side right -fill both -anchor se
		}
	}
	if {[winfo exists .search]} {
		pack .search -fill x -expand no -side top -anchor nw
	}
	if {[winfo exists .v]} {
		pack .v -fill both -expand yes -side top -anchor nw
		set text .v.t
		if {$BWidget_present == 1} {
			$text configure -font [.mbar2.font cget -font]
		}
	}
	if {[winfo exists .status]} {
		pack .status -fill x -expand yes -side left -anchor nw
	}
	catch {.statusBar.foo configure -text "        "}
	if {[info exists indiumversion]} {
	catch {.statusBar.lab configure -text "Indium"}
	wm title . "Indium $indiumversion $hostname"
	} else {
	catch {.statusBar.lab configure -text "IndiLITE"}
	wm title . "IndiLITE $indiliteversion $hostname"
	}
	if {[info exists logfile]} {
		$text configure -state normal
		$text delete 1.0 end
		set fileSize 0
		loadFile $logfile
	}
}

proc destroyFirstPage {} {
	global w win
	source @scriptdir@/global.tcl

	set win $w
	catch {destroy .f1}
	catch {destroy .pm1}
	if {[winfo exists .c]} {
		pack forget .c
	}
	if {[winfo exists .l1]} {
		pack forget .l1
	}
	if {[winfo exists .search]} {
		pack forget .search
	}
	if {[winfo exists .v]} {
		pack forget .v
	}
	if {[winfo exists .status]} {
		pack forget .status
	}
	if {[winfo exists $w]} {
		destroy $w
	}
}

proc runCommand {cmd} {
	global BWidget_present prgtext errorCode logfd logevent
	source @scriptdir@/global.tcl

	if {$BWidget_present == 1} {
		set prgtext "Hmm... I am Busy"
		progressDialog
	}
	puts stdout "$cmd"
	set returnstatus [catch {eval $cmd} result]
	set code $errorCode
	if {[info exists logfd] && [info exists logevent]} {
		incr logevent
	} else {
		set logevent 1
	}
	if {$returnstatus != 0} {
		if {[info exists logfd]} {
			set atime [clock format [clock seconds] -format "%d:%m:%y %H:%M:%S"]
			puts $logfd "$logevent: $atime: Cmd \[$cmd\], Status $returnstatus, Code $code"
			if {$result != ""} {
				puts $logfd "Command Output -----------------"
				puts $logfd "$result"
				puts $logfd "----------------------------------------------------"
			}
			flush $logfd
		}
		set err_type [lindex $code 0]
		if {[string compare $err_type "CHILDSTATUS"] == 0} {
			set returnstatus [lindex $code 2]
		}
	} else {
		if {[info exists logfd]} {
			puts $logfd "$logevent: Cmd \[$cmd\], Status 0"
			if {$result != ""} {
				puts $logfd "Command Output -----------------"
				puts $logfd "$result"
				puts $logfd "----------------------------------------------------"
			}
			flush $logfd
		}
	}
	if {$BWidget_present == 1} {
		catch {destroy .progress}
	}
	return $returnstatus
}

proc log_create {} {
	source @scriptdir@/global.tcl

	set exists [winfo exists .debug]
	if {$exists == 0} {
		toplevel .debug    -relief sunken -borderwidth 2 -width 50
		wm positionfrom .debug user
		wm sizefrom .debug ""
		wm grid .debug 80 30 6 12
		wm title .debug "Information Window"
		if {[info exists textcolor] == 0 || $textcolor == ""} {
			set textcolor DeepSkyBlue4
		}
		label .debug.label -text "Debug Window" -relief raised -bd 2
		text .debug.log -wrap none -borderwidth 2 \
			-relief sunken -setgrid true -insertofftime 0 \
			-background $textcolor \
			-xscrollcommand ".debug.log.scrollx set" \
			-yscrollcommand ".debug.log.scrolly set"
		scrollbar .debug.log.scrolly -orient vertical -trough black -command {.debug.log yview}
		scrollbar .debug.log.scrollx -orient horiz    -trough black -command {.debug.log xview}

		pack .debug.label -expand 0 -fill x -in .debug
		pack .debug.log.scrolly -side right  -fill y -anchor e -in .debug.log
		pack .debug.log.scrollx -side bottom -fill x -in .debug.log
		pack .debug.log -side left -ipadx 130 -ipady 95 -expand 1 -fill both -anchor nw
	} else {
		wm deiconify .debug
	}
	set exists [info exists result]
	if {$exists != 0 && [string length $result] > 0} {
		.debug.log insert end "$result\n"
		.debug.log yview moveto 1
	}
}

proc text_create {Title expand width height} {
	global rwin dwin text BWidget_present prgtext lastAfter
	source @scriptdir@/global.tcl

	after cancel $lastAfter
	if {[winfo exists $dwin] == 0} {
		frame $dwin -relief sunken -borderwidth 2
		if {[info exists rwin] == 0} {
			set rwin $w.right
		}
		if {$expand == 1} {
			pack $dwin -side bottom -expand 1 -fill both -padx 15 -pady 15 -anchor ne
		} else {
			pack $dwin -side bottom -expand 0 -fill x    -padx 15 -pady 15 -anchor ne
		}
		label $dwin.label -text $Title -relief raised -bd 2
		pack $dwin.label -side top -anchor n -expand 0 -fill x
		if {[info exists textcolor] == 0 || $textcolor == ""} {
			set textcolor DeepSkyBlue4
		}
		text $dwin.log \
			-wrap none \
			-width $width \
			-height $height \
			-borderwidth 2 \
			-relief sunken \
			-setgrid false \
			-insertofftime 0 \
			-background $textcolor \
			-xscrollcommand "$dwin.scrollx set" \
			-yscrollcommand "$dwin.scrolly set"
		set text $dwin.log
		if {$BWidget_present == 1} {
			$dwin.log configure -font [.mbar2.font cget -font]
		}
		scrollbar $dwin.scrolly -orient vertical -trough black -command {$dwin.log yview}
		scrollbar $dwin.scrollx -orient horiz    -trough black -command {$dwin.log xview}
		pack $dwin.scrolly -side right  -fill y -in $dwin -anchor e
		pack $dwin.scrollx -side bottom -fill x -in $dwin
		pack $dwin.log -side top -anchor n -expand 1 -fill both
	}
	set exists [info exists result]
	if {$exists != 0 && [string length $result] > 0} {
		$dwin.log insert end "$result\n"
		$dwin.log yview moveto 1
	}
}

proc setWidthHeight {w width height} {
	$w configure -width $width
	$w configure -height $height
	set geom "=$width"
	append geom x
	append geom $height
	wm geometry . $geom
}

# This routine pops up a help dialog.  The help topic is the
# argument.
#
# e.g. doHelp About"
proc doHelp subject {
	global Help textcolor
	if {[winfo exists .help]} {
		destroy .help
	}
	toplevel .help -bg black
	wm geometry .help 840x420
	wm title .help {Help}
	wm overrideredirect .help 0
	wm resizable .help 0 0
	wm iconname .help {Help}
	button .help.dismiss -text "Close Window" -bd 2 -highlightthickness 1 -bg #AD8383 -command {catch {destroy .help}}
	pack .help.dismiss -side bottom
	if {[info exists textcolor] == 0 || $textcolor == ""} {
		set textcolor DeepSkyBlue4
	}
	text .help.t -yscrollcommand ".help.sb set" -wrap word \
		-width 80 -background $textcolor
	pack .help.t -side left -fill both -expand 1
	scrollbar .help.sb -orient vertical -command ".help.t yview" -trough black
	pack .help.sb -side right -fill y
	.help.t tag config heading -justify center \
		-font -adobe-helvetica-bold-r-normal-*-18-180-75-75-p-103-iso8859-1
	.help.t tag config bold -justify left -font \
		-adobe-helvetica-bold-r-normal-*-14-140-75-75-p-82-iso8859-1
	.help.t tag config normal -justify left \
		-font -adobe-helvetica-medium-r-normal-*-14-140-75-75-p-77-iso8859-1
	if {![info exists Help($subject)]} {
		set msg $Help(unknown)
	} else {
		set msg $Help($subject)
	}
	.help.t delete 1.0 end
	set cnt 0
	set linestart 0
	set ll [llength $msg]
	for {set i 0} {$i<$ll} {incr i} {
		set cmd [lindex $msg $i]
		switch $cmd {
			heading -
			text -
			bold {
				incr i
				set txt [lindex $msg $i]
				regsub -all "\n *" $txt { } txt
			}
		}
		switch $cmd {
			heading {
				if {$cnt>0} {.help.t insert end \n\n heading}
				.help.t insert end $txt\n\n heading
				set linestart 1
			}
			text {
				if {!$linestart} {.help.t insert end " " normal}
				.help.t insert end $txt\n normal
				set linestart 0
			}
			bold {
				if {!$linestart} {.help.t insert end " " normal}
				.help.t insert end $txt bold
				set linestart 0
			}
			paragraph {
				.help.t insert end "\n\n" normal
				set linestart 1
			}
		}
		incr cnt
	}
	.help.t config -state disabled
}

proc begerror {s} {
	source @scriptdir@/global.tcl
	global errorInfo errorCode
	set Info $errorInfo
	set Code $errorCode
	set wrapmode "none"

	set ou .ou
	catch {destroy $ou}
	toplevel $ou -bg black
	setGrab $ou
	wm title $ou "Error Message"
	wm resizable $ou false false

	frame $ou.img -bg black
	pack $ou.img -side left -anchor n -fill y -expand 1
	if {[file exist [file join @imagedir@/stop.gif] ]} {
		label $ou.img.i -image [image create photo warn -file @imagedir@/stop.gif] -bd 0 -bg black
	}  else {
		label $ou.img.i -text "Warning" -bg black -fg $menubarcolor
	}
	button $ou.img.ok -text "Ok" -bg red -borderwidth 5 -command "destroy $ou;return"
	pack $ou.img.i  -side top  -anchor n
	pack $ou.img.ok -side top  -anchor n -expand 1 -fill y
	focus $ou.img.ok
	frame $ou.1 -bg black
	frame $ou.2 -bg black
	pack $ou.1 -side top
	pack $ou.2 -side top -fill x

	label $ou.1.label -text "$s" -relief ridge -bd 2 -bg IndianRed
	if {[info exists textcolor] == 0 || $textcolor == ""} {
		set textcolor DeepSkyBlue4
	}
	text $ou.1.t -relief flat -bd 0 \
		-background $textcolor \
		-yscrollcommand "$ou.1.sbv set" \
		-xscrollcommand "$ou.1.sbh set" \
		-wrap $wrapmode
	scrollbar $ou.1.sbv -orient vertical   -command "$ou.1.t yview" -trough black
	scrollbar $ou.1.sbh -orient horizontal -command "$ou.1.t xview" -trough black
	pack $ou.1.sbv   -fill y    -expand no  -side right  -anchor nw
	pack $ou.1.sbh   -fill x    -expand no  -side bottom -anchor nw
	pack $ou.1.label -fill x    -expand yes -side top    -anchor n
	pack $ou.1.t     -fill both -expand yes -side left   -anchor nw
	$ou.1.t insert end "ErrorCode : $Code\n"
	$ou.1.t insert end "$Info\n"
	$ou.1.t yview moveto 1
	$ou.1.t configure -state disabled
	if {[info exist powin]} { 
		powin $ou
	}
}

proc powin {w args} {
	if {$args==""} {
		set rw "."
	} else {
		set rw $args
	}
	set hc   [expr  ( [winfo height  $rw ] - [winfo reqheight  $w ] )/2 ]
	set y [expr [winfo y $rw] + $hc ]
	set wc   [expr  ( [winfo width  $rw ] - [winfo reqwidth  $w ] )/2 ]
	set x [expr [winfo x $rw] + $wc ]
	wm geometry $w "=+$x+$y" 
}

proc setGrab {win} {
	global oldFocus oldGrab grabStatus

	set oldFocus [focus]
	set oldGrab [grab current $win]
	if {$oldGrab != ""} {
		set grabStatus [grab status $oldGrab]
	}
	grab $win
}

proc releaseGrab {win} {
	global oldFocus oldGrab grabStatus

	if {[winfo exists $win]} {
		grab release $win
	}
	catch {focus $oldFocus}
	if {$oldGrab != ""} {
		if {$grabStatus == "global"} {
			grab -global $oldGrab
		} else {
			grab $oldGrab
		}
	}
	update idletasks
}

proc listboxSelection {args} {
	set a $args
}

# sort the list based on a particular column
proc listboxsort {w id} {
	global sortorder

	if {[info exists sortorder] && $sortorder} {
		set order "-decreasing"
	} else {
		set order "-increasing"
	}
	set error ""
	set result ""
	set data [$w get 0 end]
	set index [lsearch -exact [$w column names] $id]
	catch {set result [lsort $order -integer -index $index $data]} error
	if {[string length $result] == 0} {
		set error ""
		catch {set result [lsort $order -index $index $data]} error
	}
	if {[string length $result] != 0} {
		$w delete 0 end
		# ... and add our sorted data in
		eval $w insert end $result
	}
}

# x,y are the coordinates relative to the upper-left corner of the
# listbox; rootx,rooty are screen coordinates (for knowing where 
# to place the menu). w is the name of the mclistbox widget that was
# clicked on.
proc showContextMenu1 {w x y rootx rooty args} {
	variable mwin
	$w configure -state normal
	if {[info exists args] && [string length $args]} {
		set mwin $args
		$mwin add separator
	} else {
		set mwin .contextMenu
		catch {destroy $mwin}
		menu $mwin -tearoff false
	}
	# ask the widget for what column this is
	set column [$w column nearest $x]
	if {[string length $column]} {
		catch {set columnLabel [$w column cget $column -label]} result
		$mwin configure   -title "$columnLabel"
		$mwin add command -label "Hide $columnLabel"       -command [list $w column configure $column -visible false]
		$mwin add separator
	}
	$mwin add command -label "Show All Hidden Columns" -command "showAllColumns $w"
	if {[info exists args] == 0 || [string length $args] == 0} {tk_popup $mwin $rootx $rooty}
}

proc showContextMenu {w args} {
	if {[info exists args] && [string length $args]} {
		set mwin $args
		$mwin add separator
	} else {
		set mwin .contextMenu
		catch {destroy $mwin}
		menu $mwin -tearoff false
	}
	foreach column [$w column names] {
		if {[string length $column]} {
			catch {set columnLabel [$w column cget $column -label]} result
			if {[::mclistbox::ColumnIsHidden $w $column] == 0} {
				$mwin add command -label "Hide $columnLabel" -command [list $w column configure $column -visible false]
			}
		}
	}
	$mwin add separator
	$mwin add command -label "Show All Hidden Columns" -command "showAllColumns $w"
	tk_popup $mwin [winfo pointerx $w] [winfo pointery $w]
}

proc showAllColumns {w} {
	foreach column [$w column names] {
		$w column configure $column -visible true
	}
}

proc preferences {mode} {
	source @scriptdir@/global.tcl
	global lwin1 BWidget_present
	global configs editor xterm_cmd browser conffile env default_domain
	global imaphost imapport imapuser imappass userLimit clockmode want_progressdialog want_splash
	global User taiconvert
	set w .dname
	set initialdir "/usr/bin"

	destroyFirstPage
	if {$authenticated != 1} {
		Login $mode
	}
	set Description "Edit Preferences"
	wm title . $Description
	.statusBar.lab configure -text $Description

	if {$BWidget_present == 1} {
		set   pw  [PanedWindow $w -weights available -side top]
		pack $pw -expand 1 -fill both
		set pane1  [$pw add -minsize 10]
		set pane2  [$pw add -minsize 10]
		set lf [TitleFrame $pane1.fr -text $Description -side center -relief ridge -bd 2]
		pack $lf -side top -anchor nw -expand 1 -fill both
		set fr [$lf getframe]
			ScrollableFrame $fr.s \
				-yscrollcommand "$fr.s.vscroll set" \
				-xscrollcommand "$fr.s.hscroll set"
			scrollbar $fr.s.vscroll -command "$fr.s yview" -trough black
			scrollbar $fr.s.hscroll -command "$fr.s xview" -trough black -orient horiz
			pack $fr.s -side left -anchor nw -expand 1 -fill both
			grid $fr.s.vscroll -row 0 -column 1 -rowspan 2 -columnspan 1 -sticky news
			grid $fr.s.hscroll -row 1 -column 0 -rowspan 1 -columnspan 1 -sticky news
			grid rowconfig    $fr.s 0 -weight 1 -minsize 0
			grid columnconfig $fr.s 0 -weight 1 -minsize 0
			set tf [$fr.s getframe]
		set lwin $tf.notebook
		set dwin $pane2.debug
	} else {
		frame $w -relief ridge -bd 2
		pack $w -side left -ipadx 20 -ipady  20 -expand 1 -fill both -anchor nw
		set lwin $w.left
		set dwin $w.debug
	}

	if {$BWidget_present == 1} {
		set notebook [NoteBook $lwin]
		$notebook compute_size
		pack $notebook -side left -fill y -expand 0 -padx 4 -pady 4
		set lwin1 [$lwin insert end pref -text "Basic"]
		if {$mode == 1} {
			set lwin2 [$lwin insert end adv  -text "Advanced"]
		}
		$notebook raise [$notebook page 0]
	} else {
		set NotebookPages {Basic Advanced}
		Notebook:create $lwin -pad 2 -pages $NotebookPages
		set lwin1 [Notebook:frame $lwin Basic]
		if {$mode == 1} {
			set lwin2 [Notebook:frame $lwin Advanced]
		}
		pack $lwin -side left -fill y -expand 0 -anchor nw -padx 4 -pady 4
	}
	set result ""
	text_create $Description 1 40 25

	## Frame 1 #######################################################################
	set exists [info exists configs(editor)]
	if {$exists == 0} {
		if {[file exist /bin/vi]} {
			set editor "/bin/vi"
			set configs(editor) $editor
		}
	}  else {
		set editor $configs(editor)
	}
	frame  $lwin1.configs1
	pack   $lwin1.configs1 -side top -anchor nw
	label  $lwin1.configs1.label1 -relief ridge -text Editor -bd 2 -width 20
	entry  $lwin1.configs1.entry1 -relief sunken -textvariable editor
	button $lwin1.configs1.button -command {set initialdir /bin;fileDialog $w $lwin1.configs1.entry1 open 0} -padx "9" -pady "3" -relief ridge 
	$lwin1.configs1.button configure -image [image create photo -data "R0lGODlhEAAQAIUAAPwCBAQCBOSmZPzSnPzChPzGhPyuZEwyHExOTFROTFxaVFRSTMSGTPT29Ozu7Nze3NTS1MzKzMTGxLy6vLS2tLSytDQyNOTm5OTi5Ly+vKyqrKSmpIyOjLR+RNTW1MzOzJyenGxqZBweHKSinJSWlExKTMTCxKyurGxubBQSFAwKDJyanERCRERGRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAQABAAAAaRQIBwGCgGhkhkEWA8HpNPojFJFU6ryitTiw0IBgRBkxsYFAiGtDodDZwPCERCEV8sEk0CI9FoOB4BEBESExQVFgEEBw8PFxcYEBIZGhscCEwdCxAPGA8eHxkUGyAhIkwHEREQqxEZExUjJCVWCBAZJhEmGRUnoygpQioZGxsnxsQrHByzQiJxz3EsLSwWpkJ+QQAh/mhDcmVhdGVkIGJ5IEJNUFRvR0lGIFBybyB2ZXJzaW9uIDIuNQ0KqSBEZXZlbENvciAxOTk3LDE5OTguIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQpodHRwOi8vd3d3LmRldmVsY29yLmNvbQA7"]
	pack $lwin1.configs1.label1 $lwin1.configs1.entry1 $lwin1.configs1.button -side left
	## Frame 2 #######################################################################
	set exists [info exists configs(xterm)]
	if {$exists == 0} {
		if {[file exist /usr/bin/gnome-terminal]} {
			set xterm_cmd "/usr/bin/gnome-terminal"
			set configs(xterm) $xterm_cmd
		} 
		if {[file exist /usr/bin/X11/xterm]} {
			set xterm_cmd "/usr/bin/X11/xterm"
			set configs(xterm) $xterm_cmd
		} 
	} else {
		set xterm_cmd $configs(xterm)
	}
	frame $lwin1.configs2
	pack $lwin1.configs2 -side top -anchor nw
	label $lwin1.configs2.label1 -relief ridge -text Xterm -bd 2 -width 20
	entry $lwin1.configs2.entry1 -relief sunken -textvariable xterm_cmd
	button $lwin1.configs2.button -command {set initialdir /usr/bin;fileDialog $w $lwin1.configs2.entry1 open 0} -padx "9" -pady "3" -relief ridge 
	$lwin1.configs2.button configure -image [image create photo -data "R0lGODlhEAAQAIUAAPwCBAQCBOSmZPzSnPzChPzGhPyuZEwyHExOTFROTFxaVFRSTMSGTPT29Ozu7Nze3NTS1MzKzMTGxLy6vLS2tLSytDQyNOTm5OTi5Ly+vKyqrKSmpIyOjLR+RNTW1MzOzJyenGxqZBweHKSinJSWlExKTMTCxKyurGxubBQSFAwKDJyanERCRERGRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAQABAAAAaRQIBwGCgGhkhkEWA8HpNPojFJFU6ryitTiw0IBgRBkxsYFAiGtDodDZwPCERCEV8sEk0CI9FoOB4BEBESExQVFgEEBw8PFxcYEBIZGhscCEwdCxAPGA8eHxkUGyAhIkwHEREQqxEZExUjJCVWCBAZJhEmGRUnoygpQioZGxsnxsQrHByzQiJxz3EsLSwWpkJ+QQAh/mhDcmVhdGVkIGJ5IEJNUFRvR0lGIFBybyB2ZXJzaW9uIDIuNQ0KqSBEZXZlbENvciAxOTk3LDE5OTguIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQpodHRwOi8vd3d3LmRldmVsY29yLmNvbQA7"]
	pack $lwin1.configs2.label1 $lwin1.configs2.entry1 $lwin1.configs2.button -side left
	## Frame 3 #######################################################################
	set exists [info exists configs(browser)]
	if {$exists == 0} {
		if {[file exist /usr/bin/netscape]} {
			set browser "/usr/bin/netscape"
			set configs(browser) $browser
		} 
		if {[file exist /usr/bin/X11/netscape]} {
			set browser "/usr/bin/X11/netscape"
			set configs(browser) $browser
		} 
		if {[file exist /usr/bin/firefox]} {
			set browser "/usr/bin/firefox"
			set configs(browser) $browser
		} 
	} else {
		set browser $configs(browser)
	}
	frame $lwin1.configs3
	pack $lwin1.configs3 -side top -anchor nw
	label $lwin1.configs3.label1 -relief ridge -text "WWW Browser" -bd 2 -width 20
	entry $lwin1.configs3.entry1 -relief sunken -textvariable browser
	button $lwin1.configs3.button -command {set initialdir /usr/bin/X11;fileDialog $w $lwin1.configs3.entry1 open 0} -padx "9" -pady "3" -relief ridge 
	$lwin1.configs3.button configure -image [image create photo -data "R0lGODlhEAAQAIUAAPwCBAQCBOSmZPzSnPzChPzGhPyuZEwyHExOTFROTFxaVFRSTMSGTPT29Ozu7Nze3NTS1MzKzMTGxLy6vLS2tLSytDQyNOTm5OTi5Ly+vKyqrKSmpIyOjLR+RNTW1MzOzJyenGxqZBweHKSinJSWlExKTMTCxKyurGxubBQSFAwKDJyanERCRERGRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAQABAAAAaRQIBwGCgGhkhkEWA8HpNPojFJFU6ryitTiw0IBgRBkxsYFAiGtDodDZwPCERCEV8sEk0CI9FoOB4BEBESExQVFgEEBw8PFxcYEBIZGhscCEwdCxAPGA8eHxkUGyAhIkwHEREQqxEZExUjJCVWCBAZJhEmGRUnoygpQioZGxsnxsQrHByzQiJxz3EsLSwWpkJ+QQAh/mhDcmVhdGVkIGJ5IEJNUFRvR0lGIFBybyB2ZXJzaW9uIDIuNQ0KqSBEZXZlbENvciAxOTk3LDE5OTguIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQpodHRwOi8vd3d3LmRldmVsY29yLmNvbQA7"]
	pack $lwin1.configs3.label1 $lwin1.configs3.entry1 $lwin1.configs3.button -side left
	## Frame 4 #######################################################################
	set mailclient "/usr/local/bin/sylpheed"
	set exists [info exists configs(mailclient)]
	if {$exists == 0} {
		if {[file exist /usr/local/bin/sylpheed]} {
			set mailclient "/usr/local/bin/sylpheed"
			set configs(mailclient) $mailclient
		} 
		if {[file exist /usr/bin/sylpheed]} {
			set mailclient "/usr/bin/sylpheed"
			set configs(mailclient) $mailclient
		} 
	} else {
		set mailclient $configs(mailclient)
	}
	frame $lwin1.configs4
	pack $lwin1.configs4 -side top -anchor nw
	label $lwin1.configs4.label1 -relief ridge -text "Mail Client" -bd 2 -width 20
	entry $lwin1.configs4.entry1 -relief sunken -textvariable mailclient
	button $lwin1.configs4.button -command {set initialdir /usr/local/bin;fileDialog $w $lwin1.configs4.entry1 open 0} -padx "9" -pady "3" -relief ridge 
	$lwin1.configs4.button configure -image [image create photo -data "R0lGODlhEAAQAIUAAPwCBAQCBOSmZPzSnPzChPzGhPyuZEwyHExOTFROTFxaVFRSTMSGTPT29Ozu7Nze3NTS1MzKzMTGxLy6vLS2tLSytDQyNOTm5OTi5Ly+vKyqrKSmpIyOjLR+RNTW1MzOzJyenGxqZBweHKSinJSWlExKTMTCxKyurGxubBQSFAwKDJyanERCRERGRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAQABAAAAaRQIBwGCgGhkhkEWA8HpNPojFJFU6ryitTiw0IBgRBkxsYFAiGtDodDZwPCERCEV8sEk0CI9FoOB4BEBESExQVFgEEBw8PFxcYEBIZGhscCEwdCxAPGA8eHxkUGyAhIkwHEREQqxEZExUjJCVWCBAZJhEmGRUnoygpQioZGxsnxsQrHByzQiJxz3EsLSwWpkJ+QQAh/mhDcmVhdGVkIGJ5IEJNUFRvR0lGIFBybyB2ZXJzaW9uIDIuNQ0KqSBEZXZlbENvciAxOTk3LDE5OTguIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQpodHRwOi8vd3d3LmRldmVsY29yLmNvbQA7"]
	pack $lwin1.configs4.label1 $lwin1.configs4.entry1 $lwin1.configs4.button -side left
	## Frame 5 #######################################################################
	if {[info exists configs(mailargs)]} {
		set mailargs $configs(mailargs)
	} else {
		catch {unset mailargs}
	}
	frame  $lwin1.configs5
	pack   $lwin1.configs5 -side top -anchor nw
	label  $lwin1.configs5.label1 -relief ridge -text "MailClient Args" -bd 2 -width 20
	entry  $lwin1.configs5.entry1 -relief sunken -textvariable mailargs -width 14
	pack $lwin1.configs5.label1 $lwin1.configs5.entry1 -side left
	## Frame 6 #######################################################################
	set conffile "$env(HOME)/.indimail/$User.indiumrc"
	frame  $lwin1.configs6
	pack   $lwin1.configs6 -side top -anchor nw
	label  $lwin1.configs6.label1 -relief ridge -text "Configuration File" -bd 2 -width 20
	entry  $lwin1.configs6.entry1 -relief sunken -textvariable conffile -width 25
	button $lwin1.configs6.button -command {set initialdir $env(HOME)/.indimail;fileDialog $w $lwin1.configs6.entry1 open 0} -padx "9" -pady "3" -relief ridge 
	$lwin1.configs6.button configure -image [image create photo -data "R0lGODlhEAAQAIUAAPwCBAQCBOSmZPzSnPzChPzGhPyuZEwyHExOTFROTFxaVFRSTMSGTPT29Ozu7Nze3NTS1MzKzMTGxLy6vLS2tLSytDQyNOTm5OTi5Ly+vKyqrKSmpIyOjLR+RNTW1MzOzJyenGxqZBweHKSinJSWlExKTMTCxKyurGxubBQSFAwKDJyanERCRERGRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAQABAAAAaRQIBwGCgGhkhkEWA8HpNPojFJFU6ryitTiw0IBgRBkxsYFAiGtDodDZwPCERCEV8sEk0CI9FoOB4BEBESExQVFgEEBw8PFxcYEBIZGhscCEwdCxAPGA8eHxkUGyAhIkwHEREQqxEZExUjJCVWCBAZJhEmGRUnoygpQioZGxsnxsQrHByzQiJxz3EsLSwWpkJ+QQAh/mhDcmVhdGVkIGJ5IEJNUFRvR0lGIFBybyB2ZXJzaW9uIDIuNQ0KqSBEZXZlbENvciAxOTk3LDE5OTguIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQpodHRwOi8vd3d3LmRldmVsY29yLmNvbQA7"]
	pack $lwin1.configs6.label1 $lwin1.configs6.entry1 $lwin1.configs6.button -side left
	## Frame 7 #######################################################################
	set exists [info exists configs(menubarcolor)]
	if {$exists == 0} {
		set configs(menubarcolor) $menubarcolor
	} else {
		set menubarcolor $configs(menubarcolor)
	}
	frame  $lwin1.configs7
	pack   $lwin1.configs7 -side top -anchor nw
	label  $lwin1.configs7.label1 -relief ridge -text "Menubar Color" -bd 2 -width 20
	entry  $lwin1.configs7.entry1 -relief sunken -textvariable menubarcolor -width 14
	button $lwin1.configs7.button -command "setbgColor 0" -padx "9" -pady "3" -relief ridge 
	$lwin1.configs7.button configure -image [image create photo -data "R0lGODlhEAAQAIMAAPz+BAQCBAQC/MQCxATCxATCBPyqXPwCBPzerAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAQABAAAARWEMgZ6rwYBCFsvtXWeWA1DBU3ggRhomJQBm14dlJYFFXrbjKNwVDZ9Vw4TWWoKyCDgcNhyXQClVLpMmANIRAhLdGa+36j07GrfM4GiKTAGfsOlmYZfwQAIf5oQ3JlYXRlZCBieSBCTVBUb0dJRiBQcm8gdmVyc2lvbiAyLjUNCqkgRGV2ZWxDb3IgMTk5NywxOTk4LiBBbGwgcmlnaHRzIHJlc2VydmVkLg0KaHR0cDovL3d3dy5kZXZlbGNvci5jb20AOw=="]
	pack $lwin1.configs7.label1 $lwin1.configs7.entry1 $lwin1.configs7.button -side left
	## Frame 7 #######################################################################
	set exists [info exists configs(textcolor)]
	if {$exists == 0} {
		set configs(textcolor) $textcolor
	} else {
		set textcolor $configs(textcolor)
	}
	frame  $lwin1.configs13
	pack   $lwin1.configs13 -side top -anchor nw
	label  $lwin1.configs13.label1 -relief ridge -text "Text Color" -bd 2 -width 20
	entry  $lwin1.configs13.entry1 -relief sunken -textvariable textcolor -width 14
	button $lwin1.configs13.button -command "setbgColor 2" -padx "9" -pady "3" -relief ridge 
	$lwin1.configs13.button configure -image [image create photo -data "R0lGODlhEAAQAIMAAPz+BAQCBAQC/MQCxATCxATCBPyqXPwCBPzerAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAQABAAAARWEMgZ6rwYBCFsvtXWeWA1DBU3ggRhomJQBm14dlJYFFXrbjKNwVDZ9Vw4TWWoKyCDgcNhyXQClVLpMmANIRAhLdGa+36j07GrfM4GiKTAGfsOlmYZfwQAIf5oQ3JlYXRlZCBieSBCTVBUb0dJRiBQcm8gdmVyc2lvbiAyLjUNCqkgRGV2ZWxDb3IgMTk5NywxOTk4LiBBbGwgcmlnaHRzIHJlc2VydmVkLg0KaHR0cDovL3d3dy5kZXZlbGNvci5jb20AOw=="]
	pack $lwin1.configs13.label1 $lwin1.configs13.entry1 $lwin1.configs13.button -side left
	## Frame 8 #######################################################################
	set exists [info exists configs(bgColor)]
	if {$exists == 0} {
		set configs(bgColor) $bgColor
	} else {
		set bgColor $configs(bgColor)
	}
	frame  $lwin1.configs8
	pack   $lwin1.configs8 -side top -anchor nw
	label  $lwin1.configs8.label1 -relief ridge -text "Background Color" -bd 2 -width 20
	entry  $lwin1.configs8.entry1 -relief sunken -textvariable bgColor -width 14
	button $lwin1.configs8.button -command "setbgColor 1" -padx "9" -pady "3" -relief ridge 
	$lwin1.configs8.button configure -image [image create photo -data "R0lGODlhEAAQAIMAAPz+BAQCBAQC/MQCxATCxATCBPyqXPwCBPzerAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAQABAAAARWEMgZ6rwYBCFsvtXWeWA1DBU3ggRhomJQBm14dlJYFFXrbjKNwVDZ9Vw4TWWoKyCDgcNhyXQClVLpMmANIRAhLdGa+36j07GrfM4GiKTAGfsOlmYZfwQAIf5oQ3JlYXRlZCBieSBCTVBUb0dJRiBQcm8gdmVyc2lvbiAyLjUNCqkgRGV2ZWxDb3IgMTk5NywxOTk4LiBBbGwgcmlnaHRzIHJlc2VydmVkLg0KaHR0cDovL3d3dy5kZXZlbGNvci5jb20AOw=="]
	pack $lwin1.configs8.label1 $lwin1.configs8.entry1 $lwin1.configs8.button -side left
	## Frame 9 #######################################################################
	set exists [info exists configs(userLimit)]
	if {$exists == 0} {
		set configs(userLimit) $userLimit
	} else {
		set userLimit $configs(userLimit)
	}
	frame  $lwin1.configs9
	pack   $lwin1.configs9 -side top -anchor nw
	label  $lwin1.configs9.label1 -relief ridge -text "User Query Limit" -bd 2 -width 20
	if {$BWidget_present} {
		SpinBox $lwin1.configs9.entry1 -relief sunken -textvariable userLimit -bd 2 -width 5 -range {0 5000 100} \
			-vcmd {regexp {^[+]?[0-9]*$} %P} -validate key -invcmd bell
	} else {
		entry $lwin1.configs9.entry1   -relief sunken -textvariable userLimit -bd 2 -width 5 \
			-vcmd {regexp {^[+]?[0-9]*$} %P} -validate key -invcmd bell
	}
	pack $lwin1.configs9.label1 $lwin1.configs9.entry1 -side left
	## Frame 10 ######################################################################
	set exists [info exists configs(clockmode)]
	if {$exists == 0} {
		set configs(clockmode) $clockmode
	} else {
		set clockmode $configs(clockmode)
	}
	set exists [info exists configs(taiconvert)]
	if {$exists == 0} {
		set configs(taiconvert) $taiconvert
	} else {
		set taiconvert $configs(taiconvert)
	}
	frame  $lwin1.configs10
	pack   $lwin1.configs10 -side top -anchor nw
	checkbutton $lwin1.configs10.c1 -text "Enable Analog Clock" -variable clockmode
	checkbutton $lwin1.configs10.c2 -text "Enable TAI Conversion" -variable taiconvert
	pack $lwin1.configs10.c1 $lwin1.configs10.c2 -side left
	## Frame 11 ######################################################################
	set exists [info exists configs(progressdialog)]
	if {$exists == 0} {
		set configs(progressdialog) $want_progressdialog
	} else {
		set want_progressdialog $configs(progressdialog)
	}
	frame  $lwin1.configs11
	pack   $lwin1.configs11 -side top -anchor nw
	checkbutton $lwin1.configs11.check -text "Enable Progress Dialog" -variable want_progressdialog
	pack $lwin1.configs11.check -side left
	## Frame 12 ######################################################################
	set exists [info exists configs(splash)]
	if {$exists == 0} {
		set want_splash 0
	} else {
		set want_splash $configs(splash)
	}
	frame  $lwin1.configs12
	pack   $lwin1.configs12 -side top -anchor nw
	checkbutton $lwin1.configs12.check -text "Enable Splash" -variable want_splash
	pack $lwin1.configs12.check -side left

	## Frame 1 #######################################################################
	if {$mode == 1} {
	catch {exec @prefix@/bin/dbinfo -s | grep domain | sort -u | awk {{print $2}}} domain_list
	frame $lwin2.configs1
	pack $lwin2.configs1 -side top -anchor nw
	label $lwin2.configs1.label1 -relief ridge -text "Default Domain" -bd 2 -width 20
	set exists [info exists configs(default_domain)]
	if {$exists == 0} {
		set default_domain [lindex $domain_list 0]
		set configs(default_domain) $default_domain
	} else {
		set default_domain $configs(default_domain)
	}
	combobox $lwin2.configs1.entry1 \
	-textvariable default_domain \
	-editable false \
	-highlightthickness 1 \
	-borderwidth 2 \
	-command "setDomain"
	foreach line $domain_list {
		$lwin2.configs1.entry1 list insert end $line
	}
	set cindex [$lwin2.configs1.entry1 curselection]
	$lwin2.configs1.entry1 select $cindex
	pack $lwin2.configs1.label1 $lwin2.configs1.entry1 -side left
	## Frame 2 #######################################################################
	set exists [info exists configs(mysql_host)]
	if {$exists == 0} {
		set mysql_host [lindex $sqlserver_list($default_domain) 0]
		set configs(mysql_host) $mysql_host
	} else {
		set mysql_host $configs(mysql_host)
	}
	frame $lwin2.configs2
	pack $lwin2.configs2 -side top -anchor nw
	label $lwin2.configs2.label1 -relief ridge -text "MySQL Host" -bd 2 -width 20
	combobox $lwin2.configs2.entry1 \
		-textvariable mysql_host \
		-editable false \
		-highlightthickness 1 \
		-borderwidth 2
	foreach line $sqlserver_list($default_domain) {
		$lwin2.configs2.entry1 list insert end $line
	}
	pack $lwin2.configs2.label1 $lwin2.configs2.entry1 -side left
	## Frame 3 #######################################################################
	set exists [info exists configs(mysql_port)]
	if {$exists == 0} {
		set mysql_port 3306
		set configs(mysql_port) $mysql_port
	} else {
		set mysql_port $configs(mysql_port)
	}
	frame $lwin2.configs3
	pack $lwin2.configs3 -side top -anchor nw
	label $lwin2.configs3.label1 -relief ridge -text "MySQL Port" -bd 2 -width 20
	if {$BWidget_present} {
	SpinBox $lwin2.configs3.entry1 -relief sunken -textvariable mysql_port -width 5 -range {3306 65534 1} \
		-vcmd {regexp {^[0-9]*$} %P} -validate key -invcmd bell
	} else {
	entry $lwin2.configs3.entry1 -relief sunken -textvariable mysql_port -width 5 \
		-vcmd {regexp {^[0-9]*$} %P} -validate key -invcmd bell
	}
	pack $lwin2.configs3.label1 $lwin2.configs3.entry1 -side left
	## Frame 4 #######################################################################
	set exists [info exists configs(mysql_database)]
	if {$exists == 0} {
		set mysql_database "indimail"
		set configs(mysql_database) $mysql_database
	} else {
		set mysql_database $configs(mysql_database)
	}
	frame $lwin2.configs4
	pack $lwin2.configs4 -side top -anchor nw
	label $lwin2.configs4.label1 -relief ridge -text "MySQL Database" -bd 2 -width 20
	entry $lwin2.configs4.entry1 -relief sunken -textvariable mysql_database \
		-vcmd {expr {[string length %P]<=16}} -validate key -invcmd bell
	pack $lwin2.configs4.label1 $lwin2.configs4.entry1 -side left
	## Frame 5 #######################################################################
	set exists [info exists configs(mysql_user)]
	if {$exists == 0} {
		set mysql_user "indimail"
		set configs(mysql_user) $mysql_user
	} else {
		set mysql_user $configs(mysql_user)
	}
	frame $lwin2.configs5
	pack $lwin2.configs5 -side top -anchor nw
	label $lwin2.configs5.label1 -relief ridge -text "MySQL User" -bd 2 -width 20
	entry $lwin2.configs5.entry1 -relief sunken -textvariable mysql_user \
		-vcmd {expr {[string length %P]<=16}} -validate key -invcmd bell
	pack $lwin2.configs5.label1 $lwin2.configs5.entry1 -side left
	## Frame 6 #######################################################################
	set exists [info exists configs(mysql_pass)]
	if {$exists == 0} {
		set mysql_pass "indimail"
		set configs(mysql_pass) $mysql_pass
	} else {
		set mysql_pass $configs(mysql_pass)
	}
	frame $lwin2.configs6
	pack $lwin2.configs6 -side top -anchor nw
	label $lwin2.configs6.label1 -relief ridge -text "MySQL Password" -bd 2 -width 20
	entry $lwin2.configs6.entry1 -relief sunken -textvariable mysql_pass -show * \
		-vcmd {expr {[string length %P]<=8}} -validate key -invcmd bell
	pack $lwin2.configs6.label1 $lwin2.configs6.entry1 -side left
	## Frame 7 #######################################################################
	set exists [info exists configs(adminhost)]
	if {$exists == 0} {
		set adminhost [lindex $server_list($default_domain) 0]
		set configs(adminhost) $adminhost
	} else {
		set adminhost $configs(adminhost)
	}
	frame $lwin2.configs7
	pack $lwin2.configs7 -side top -anchor nw
	label $lwin2.configs7.label1 -relief ridge -text "Admin Host" -bd 2 -width 20
	combobox $lwin2.configs7.entry1 \
		-textvariable adminhost \
		-editable false \
		-highlightthickness 1 \
		-borderwidth 2
	foreach line $server_list($default_domain) {
		$lwin2.configs7.entry1 list insert end $line
	}
	pack $lwin2.configs7.label1 $lwin2.configs7.entry1 -side left
	## Frame 8 #######################################################################
	set exists [info exists configs(adminport)]
	if {$exists == 0} {
		set adminport 4000
		set configs(adminport) $adminport
	} else {
		set adminport $configs(adminport)
	}
	frame $lwin2.configs8
	pack $lwin2.configs8 -side top -anchor nw
	label $lwin2.configs8.label1 -relief ridge -text "Admin Port" -bd 2 -width 20
	if {$BWidget_present} {
	SpinBox $lwin2.configs8.entry1 -relief sunken -textvariable adminport -width 5 -range {3306 65534 1} \
		-vcmd {regexp {^[0-9]*$} %P} -validate key -invcmd bell
	} else {
	entry $lwin2.configs8.entry1 -relief sunken -textvariable adminport -width 5 \
		-vcmd {regexp {^[0-9]*$} %P} -validate key -invcmd bell
	}
	pack $lwin2.configs8.label1 $lwin2.configs8.entry1 -side left
	## Frame 9 #######################################################################
	set exists [info exists configs(adminuser)]
	if {$exists == 0} {
		set adminuser "admin"
		set configs(adminuser) $adminuser
	} else {
		set adminuser $configs(adminuser)
	}
	frame $lwin2.configs9
	pack $lwin2.configs9 -side top -anchor nw
	label $lwin2.configs9.label1 -relief ridge -text "Admin User" -bd 2 -width 20
	entry $lwin2.configs9.entry1 -relief sunken -textvariable adminuser \
		-vcmd {expr {[string length %P]<=16}} -validate key -invcmd bell
	pack $lwin2.configs9.label1 $lwin2.configs9.entry1 -side left
	## Frame 10 #######################################################################
	set exists [info exists configs(adminpass)]
	if {$exists == 0} {
		set adminpass "admin"
		set configs(adminpass) $adminpass
	} else {
		set adminpass $configs(adminpass)
	}
	frame $lwin2.configs10
	pack $lwin2.configs10 -side top -anchor nw
	label $lwin2.configs10.label1 -relief ridge -text "Admin Password" -bd 2 -width 20
	entry $lwin2.configs10.entry1 -relief sunken -textvariable adminpass -show * \
		-vcmd {expr {[string length %P]<=8}} -validate key -invcmd bell
	pack $lwin2.configs10.label1 $lwin2.configs10.entry1 -side left

	## Frame 11 #######################################################################
	set exists [info exists configs(controldir)]
	if {$exists == 0} {
		set controldir @sysconfdir@/control
		set configs(controldir) $controldir
	} else {
		set controldir $configs(controldir)
	}
	frame $lwin2.configs11
	pack $lwin2.configs11 -side top -anchor nw
	label $lwin2.configs11.label1 -relief ridge -text "Control Dir" -bd 2 -width 20
	entry $lwin2.configs11.entry1 -relief sunken -textvariable controldir
	button $lwin2.configs11.button -command "set initialdir [file dirname $controldir];fileDialog $w $lwin2.configs11.entry1 dir 0" -padx "9" -pady "3" -relief ridge
	$lwin2.configs11.button configure -image [image create photo -data "R0lGODlhEAAQAIUAAPwCBAQCBOSmZPzSnPzChPzGhPyuZEwyHExOTFROTFxaVFRSTMSGTPT29Ozu7Nze3NTS1MzKzMTGxLy6vLS2tLSytDQyNOTm5OTi5Ly+vKyqrKSmpIyOjLR+RNTW1MzOzJyenGxqZBweHKSinJSWlExKTMTCxKyurGxubBQSFAwKDJyanERCRERGRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAQABAAAAaRQIBwGCgGhkhkEWA8HpNPojFJFU6ryitTiw0IBgRBkxsYFAiGtDodDZwPCERCEV8sEk0CI9FoOB4BEBESExQVFgEEBw8PFxcYEBIZGhscCEwdCxAPGA8eHxkUGyAhIkwHEREQqxEZExUjJCVWCBAZJhEmGRUnoygpQioZGxsnxsQrHByzQiJxz3EsLSwWpkJ+QQAh/mhDcmVhdGVkIGJ5IEJNUFRvR0lGIFBybyB2ZXJzaW9uIDIuNQ0KqSBEZXZlbENvciAxOTk3LDE5OTguIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQpodHRwOi8vd3d3LmRldmVsY29yLmNvbQA7"]
	pack $lwin2.configs11.label1 $lwin2.configs11.entry1 $lwin2.configs11.button -side left
	## Frame 12 ######################################################################
	set exists [info exists configs(servicedir)]
	if {$exists == 0} {
		set servicedir "/service"
		set configs(servicedir) $servicedir
	} else {
		set servicedir $configs(servicedir)
	}
	frame $lwin2.configs12
	pack $lwin2.configs12 -side top -anchor nw
	label $lwin2.configs12.label1 -relief ridge -text "Service Dir" -bd 2 -width 20
	entry $lwin2.configs12.entry1 -relief sunken -textvariable servicedir
	button $lwin2.configs12.button -command "set initialdir [file dirname $servicedir];fileDialog $w $lwin2.configs12.entry1 dir 0" -padx "9" -pady "3" -relief ridge
	$lwin2.configs12.button configure -image [image create photo -data "R0lGODlhEAAQAIUAAPwCBAQCBOSmZPzSnPzChPzGhPyuZEwyHExOTFROTFxaVFRSTMSGTPT29Ozu7Nze3NTS1MzKzMTGxLy6vLS2tLSytDQyNOTm5OTi5Ly+vKyqrKSmpIyOjLR+RNTW1MzOzJyenGxqZBweHKSinJSWlExKTMTCxKyurGxubBQSFAwKDJyanERCRERGRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAQABAAAAaRQIBwGCgGhkhkEWA8HpNPojFJFU6ryitTiw0IBgRBkxsYFAiGtDodDZwPCERCEV8sEk0CI9FoOB4BEBESExQVFgEEBw8PFxcYEBIZGhscCEwdCxAPGA8eHxkUGyAhIkwHEREQqxEZExUjJCVWCBAZJhEmGRUnoygpQioZGxsnxsQrHByzQiJxz3EsLSwWpkJ+QQAh/mhDcmVhdGVkIGJ5IEJNUFRvR0lGIFBybyB2ZXJzaW9uIDIuNQ0KqSBEZXZlbENvciAxOTk3LDE5OTguIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQpodHRwOi8vd3d3LmRldmVsY29yLmNvbQA7"]
	pack $lwin2.configs12.label1 $lwin2.configs12.entry1 $lwin2.configs12.button -side left
	## Frame 14 ######################################################################
	set exists [info exists configs(imaphost)]
	if {$exists == 0} {
		set imaphost [lindex $server_list($default_domain) 0]
		set configs(imaphost) $imaphost
	} else {
		set imaphost $configs(imaphost)
	}
	frame $lwin2.configs14
	pack $lwin2.configs14 -side top -anchor nw
	label $lwin2.configs14.label1 -relief ridge -text "IMAP Host" -bd 2 -width 20
	combobox $lwin2.configs14.entry1 \
		-textvariable imaphost \
		-editable true \
		-highlightthickness 1 \
		-borderwidth 2
	foreach line $server_list($default_domain) {
		$lwin2.configs14.entry1 list insert end $line
	}
	pack $lwin2.configs14.label1 $lwin2.configs14.entry1 -side left
	## Frame 15 ######################################################################
	set exists [info exists configs(imapport)]
	if {$exists == 0} {
		set imapport 143
		set configs(imapport) $imapport
	} else {
		set imapport $configs(imapport)
	}
	frame $lwin2.configs15
	pack $lwin2.configs15 -side top -anchor nw
	label $lwin2.configs15.label1 -relief ridge -text "IMAP Port" -bd 2 -width 20
	if {$BWidget_present} {
	SpinBox $lwin2.configs15.entry1 -relief sunken -textvariable imapport -width 5 -range {143 65534 1} \
		-vcmd {regexp {^[0-9]*$} %P} -validate key -invcmd bell
	} else {
	entry $lwin2.configs15.entry1 -relief sunken -textvariable imapport -width 5 \
		-vcmd {regexp {^[0-9]*$} %P} -validate key -invcmd bell
	}
	pack $lwin2.configs15.label1 $lwin2.configs15.entry1 -side left
	## Frame 16 ######################################################################
	set exists [info exists configs(imapuser)]
	if {$exists == 0} {
		set imapuser "postmaster"
		set configs(imapuser) $imapuser
	} else {
		set imapuser $configs(imapuser)
	}
	frame $lwin2.configs16
	pack $lwin2.configs16 -side top -anchor nw
	label $lwin2.configs16.label1 -relief ridge -text "Mail User" -bd 2 -width 20
	entry $lwin2.configs16.entry1 -relief sunken -textvariable imapuser \
		-vcmd {expr {[string length %P]<=32}} -validate key -invcmd bell
	pack $lwin2.configs16.label1 $lwin2.configs16.entry1 -side left
	## Frame 17 ######################################################################
	set exists [info exists configs(imappass)]
	if {$exists == 0} {
		set imappass "********"
		set configs(imappass) $imappass
	} else {
		set imappass $configs(imappass)
	}
	frame $lwin2.configs17
	pack $lwin2.configs17 -side top -anchor nw
	label $lwin2.configs17.label1 -relief ridge -text "Postmaster Password" -bd 2 -width 20
	entry $lwin2.configs17.entry1 -relief sunken -textvariable imappass -show * \
		-vcmd {expr {[string length %P]<=8}} -validate key -invcmd bell
	pack $lwin2.configs17.label1 $lwin2.configs17.entry1 -side left
	## Frame 18 ######################################################################
	set exists [info exists configs(imapinterval)]
	if {$exists == 0} {
		set imapinterval 60
		set configs(imapinterval) $imapinterval
	} else {
		set imapinterval $configs(imapinterval)
	}
	frame $lwin2.configs18
	pack $lwin2.configs18 -side top -anchor nw
	label $lwin2.configs18.label1 -relief ridge -text "Mailcheck Interval" -bd 2 -width 20
	if {$BWidget_present} {
	SpinBox $lwin2.configs18.entry1 -relief sunken -textvariable imapinterval -width 5 -range {60 7200 1} \
		-vcmd {regexp {^[0-9]*$} %P} -validate key -invcmd bell
	} else {
	entry $lwin2.configs18.entry1 -relief sunken -textvariable imapinterval -width 5 \
		-vcmd {regexp {^[0-9]*$} %P} -validate key -invcmd bell
	}
	pack $lwin2.configs18.label1 $lwin2.configs18.entry1 -side left
	} else {
		if {[info exists configs(default_domain)]} {
			set default_domain $configs(default_domain)
		} else {
			set default_domain ""
		}
		if {[info exists configs(mysql_host)]} {
			set mysql_host $configs(mysql_host)
		} else {
			set mysql_host "localhost"
		}
		if {[info exists configs(mysql_port)]} {
			set mysql_port $configs(mysql_port)
		} else {
			set mysql_port 3306
		}
		if {[info exists configs(mysql_database)]} {
			set mysql_database $configs(mysql_database)
		} else {
			set mysql_database "indimail"
		}
		if {[info exists configs(mysql_user)]} {
			set mysql_user $configs(mysql_user)
		} else {
			set mysql_user "indimail"
		}
		if {[info exists configs(mysql_pass)]} {
			set mysql_pass $configs(mysql_pass)
		} else {
			set mysql_pass ""
		}
		if {[info exists configs(adminhost)]} {
			set adminhost $configs(adminhost)
		} else {
			set adminhost "localhost"
		}
		if {[info exists configs(adminport)]} {
			set adminport $configs(adminport)
		} else {
			set adminport 4000
		}
		if {[info exists configs(adminuser)]} {
			set adminuser $configs(adminuser)
		} else {
			set adminuser "admin"
		}
		if {[info exists configs(adminpass)]} {
			set adminpass $configs(adminpass)
		} else {
			set adminpass ""
		}
	}
	## Frame n #######################################################################
	if {[file exists $env(HOME)/.indimail] == 0} {
		if {[catch {file mkdir $env(HOME)/.indimail} result]} {
			msg_dialog .d {config} "$result" @imagedir@/warning.gif 0 "OK"
			return 1
		}
	} else {
		if {[file isdirectory $env(HOME)/.indimail] == 0} {
			msg_dialog .d {config} "$env(HOME)/.indimail is not a directory" @imagedir@/warning.gif 0 "OK"
			return 1
		}
	}
	if {$mode == 1} {
		set winlist "$lwin1 $lwin2"
	} else {
		set winlist "$lwin1"
	}
	foreach tmpwin $winlist {
		frame $tmpwin.configsn
		pack $tmpwin.configsn -side top -anchor nw
		button $tmpwin.configsn.save -text Save   -bg orange -command "saveGlobals bins $conffile" -bd 5 \
			-highlightthickness 5 -highlightbackground black -underline 0
		button $tmpwin.configsn.quit -text Quit -bg IndianRed -command "destroyWindows;loadPreferences;return" -bd 5 \
			-highlightthickness 5 -highlightbackground black
		pack $tmpwin.configsn.save $tmpwin.configsn.quit  -side left
	}
}

proc  setDomain {w domain} {
	global configs
	set configs(default_domain) $domain
}


proc loadPreferences {} {
	global env configs userLimit clockmode want_progressdialog
	global imaphost imapport imapuser imappass imapinterval taiconvert
	global User

	if {[file exists $env(HOME)/.indimail] == 0} {
		if {[catch {file mkdir $env(HOME)/.indimail} result]} {
			msg_dialog .d {config} "$result" @imagedir@/warning.gif 0 "OK"
			return 1
		}
	} else {
		if {[file isdirectory $env(HOME)/.indimail] == 0} {
			msg_dialog .d {config} "$env(HOME)/.indimail is not a directory" @imagedir@/warning.gif 0 "OK"
			return 1
		}
	}
	if {[file exists $env(HOME)/.indimail/$User.indiumrc]} {
		set prefFile $env(HOME)/.indimail/$User.indiumrc
	} else {
		set prefFile $env(HOME)/.indimail/.indiumrc
	}
	if {[file exists $prefFile]} {
		source $prefFile
		set mysql_port $configs(mysql_port)
		set mysql_host $configs(mysql_host)
		set mysql_database $configs(mysql_database)
		set mysql_user $configs(mysql_user)
		set mysql_pass $configs(mysql_pass)
		set adminhost $configs(adminhost)
		set adminport $configs(adminport)
		set adminuser $configs(adminuser)
		set adminpass $configs(adminpass)
		set controldir @sysconfdir@/control
		append controldir "/control"
		set servcedir $configs(servicedir)
		set bgColor $configs(bgColor)
		set textcolor $configs(textcolor)
		.v.t configure -bg $textcolor
		set userLimit $configs(userLimit)
		set clockmode $configs(clockmode)
		set taiconvert $configs(taiconvert)
		if {[info exists configs(progressdialog)]} {
			set want_progressdialog $configs(progressdialog)
		} else {
			set want_progressdialog 0
		}
		if {[info exists bgColor]} {
			catch {tk_setPalette $bgColor}
		}
	} else {
		default_config
	}
}

proc default_config {} {
	global env
	source @scriptdir@/global.tcl
	global configs

	set configs(editor) "/bin/vi"
	set configs(xterm) "/usr/bin/gnome-terminal"
	set configs(mysql_host) "localhost"
	set configs(mysql_port) 3306
	set configs(mysql_database) "indimail"
	set configs(mysql_user) "indimail"
	set configs(adminhost) "localhost"
	set configs(adminport) 4000
	set configs(adminuser) "admin"
	set configs(adminpass) ""
	set configs(mysql_pass) "ssh-1.5-"
	set configs(browser) "/usr/bin/firefox"
	set configs(mailclient) "/usr/local/bin/sylpheed"
	set configs(controldir) "@sysconfdir@/control"
	if {[file exists "/service"]} {
		set configs(servicedir) "/service"
	} elseif {[file exists "/service1"]} {
		set configs(servicedir) "/service1"
	} else {
		msg_dialog .d {default config} "daemontools not configured\nSetting service dir to /service" @imagedir@/warning.gif 0 "OK"
		set configs(servicedir) "/service"
	}
	set configs(bgColor) "#d9d9d9"
	set configs(menubarcolor) "LightSeaGreen"
	set configs(textcolor) "#fffff5df6f5c"
	set configs(userLimit) 100
	set configs(clockmode) 0
	set configs(taiconvert) 0
	set configs(progressdialog) 1
	set configs(splash) 1
	if {[file exists $env(HOME)/.indimail] == 0} {
		puts stderr "Creating First time User Preferences"
		if {[catch {file mkdir $env(HOME)/.indimail} result]} {
			msg_dialog .d {default config} "$result" @imagedir@/warning.gif 0 "OK"
			return 1
		}
		catch {file copy @sysconfdir@/filemanrc $env(HOME)/.indimail/.filemanrc} result
		if {$result != ""} {
			msg_dialog .d {default config} "$result" @imagedir@/warning.gif 0 "OK"
		}
		catch {file copy @sysconfdir@/cronlist $env(HOME)/.indimail/.cronlist} result
		if {$result != ""} {
			msg_dialog .d {default config} "$result" @imagedir@/warning.gif 0 "OK"
		}
		catch {file copy @sysconfdir@/osh.table $env(HOME)/.indimail/osh.table} result
		if {$result != ""} {
			msg_dialog .d {default config} "$result" @imagedir@/warning.gif 0 "OK"
		}
	} else {
		if {[file isdirectory $env(HOME)/.indimail] == 0} {
			msg_dialog .d {default config} "$env(HOME)/.indimail is not a directory" @imagedir@/warning.gif 0 "OK"
			return 1
		}
	}
}

proc saveGlobals {mode file} {
	global User
	source @scriptdir@/global.tcl
	global env configs editor xterm_cmd browser mailclient mailargs env default_domain bgColor menubarcolor
	global imaphost imapport imapuser imappass imapinterval userLimit clockmode want_progressdialog want_splash
	global taiconvert

	if {[catch {open $file w} f]} {
		msg_dialog .d {Save Preferences} "$f" @imagedir@/warning.gif 0 "OK"
		return 1
	}
	file attributes $file -permissions 0600
	switch -regexp $mode {
		bins {
	    	puts $f "set configs(editor) \"$editor\""
			puts $f "set configs(xterm) \"$xterm_cmd\""
	    	puts $f "set configs(default_domain) \"$default_domain\""
	    	puts $f "set configs(mysql_host) \"$mysql_host\""
	    	puts $f "set configs(mysql_port) $mysql_port"
	    	puts $f "set configs(mysql_database) \"$mysql_database\""
	    	puts $f "set configs(mysql_user) \"$mysql_user\""
	    	puts $f "set configs(mysql_pass) \"$mysql_pass\""
	    	puts $f "set configs(adminhost) \"$adminhost\""
	    	puts $f "set configs(adminport) \"$adminport\""
	    	puts $f "set configs(adminuser) \"$adminuser\""
	    	puts $f "set configs(adminpass) \"$adminpass\""
	    	puts $f "set configs(browser) \"$browser\""
	    	puts $f "set configs(mailclient) \"$mailclient\""
			if {[info exists mailargs]} {
	    		puts $f "set configs(mailargs) \"$mailargs\""
			}
	    	puts $f "set configs(controldir) \"$controldir\""
	    	puts $f "set configs(servicedir) \"$servicedir\""
	    	puts $f "set configs(menubarcolor) \"$menubarcolor\""
	    	puts $f "set configs(textcolor) \"$textcolor\""
	    	puts $f "set configs(bgColor) \"$bgColor\""
	    	puts $f "set configs(userLimit) \"$userLimit\""
	    	puts $f "set configs(clockmode) \"$clockmode\""
	    	puts $f "set configs(taiconvert) \"$taiconvert\""
	    	puts $f "set configs(progressdialog) \"$want_progressdialog\""
	    	puts $f "set configs(splash) \"$want_splash\""
			set result ""
	    	append result "set configs(editor) \"$editor\"\n"
			append result "set configs(xterm) \"$xterm_cmd\"\n"
	    	append result "set configs(default_domain) \"$default_domain\"\n"
	    	append result "set configs(mysql_host) \"$mysql_host\"\n"
	    	append result "set configs(mysql_port) $mysql_port\n"
	    	append result "set configs(mysql_database) \"$mysql_database\"\n"
	    	append result "set configs(mysql_user) \"$mysql_user\"\n"
	    	append result "set configs(mysql_pass) \"$mysql_pass\"\n"
	    	append result "set configs(adminhost) \"$adminhost\"\n"
	    	append result "set configs(adminport) \"$adminport\"\n"
	    	append result "set configs(adminuser) \"$adminuser\"\n"
	    	append result "set configs(adminpass) \"$adminpass\"\n"
	    	append result "set configs(browser) \"$browser\"\n"
	    	append result "set configs(mailclient) \"$mailclient\"\n"
			if {[info exists mailargs]} {
	    	append result "set configs(mailargs) \"$mailargs\"\n"
			}
	    	append result "set configs(controldir) \"$controldir\"\n"
	    	append result "set configs(servicedir) \"$servicedir\"\n"
	    	append result "set configs(menubarcolor) \"$menubarcolor\"\n"
	    	append result "set configs(textcolor) \"$textcolor\"\n"
	    	append result "set configs(bgColor) \"$bgColor\"\n"
	    	append result "set configs(userLimit) \"$userLimit\"\n"
	    	append result "set configs(clockmode) \"$clockmode\"\n"
	    	append result "set configs(taiconvert) \"$taiconvert\"\n"
	    	append result "set configs(progressdialog) \"$want_progressdialog\"\n"
	    	append result "set configs(splash) \"$want_splash\"\n"
		}
	}
	set returnstatus [catch {close $f} result_tmp]
	if {$returnstatus == 0} {
		catch {$dwin.log insert end "$result\n"}
		catch {$dwin.log yview moveto 1}
		if {$User == "postmaster"} {
			catch {file copy -force $file $env(HOME)/.indimail/.indiumrc} result_tmp
			if {$result_tmp != ""} {
				msg_dialog .d {Save Preferences} $result_tmp @imagedir@/warning.gif 0 "OK"
				return
			}
		}
		.statusBar.lab configure -text "Saved Configuration"
		msg_dialog .d {Save Preferences} "Saved Configuration" @imagedir@/warning.gif 0 "OK"
	} else {
		msg_dialog .d {Save Preferences} $result_tmp @imagedir@/warning.gif 0 "OK"
	}
}

proc setbgColor {type} {
	global bgColor textcolor menubarcolor w BWidget_present dwin

	if {$type == 0} {
		set initialcolor $menubarcolor
		if {$BWidget_present == 1} {
			set menubarcolor [SelectColor $w.col -color $initialcolor -title "Choose Menubar Color"]
		} else {
			set menubarcolor [tk_chooseColor -initialcolor $initialcolor -parent $w -title "Choose Menubar Color"]
		}
		if {[info exists menubarcolor]} {
			if {[string length $menubarcolor] != 0} {
				.status           configure -bg $menubarcolor
				.search           configure -bg $menubarcolor
				.search.wrap      configure -bg $menubarcolor
				.search.tail      configure -bg $menubarcolor
				.search.label     configure -bg $menubarcolor
				.search.r         configure -bg $menubarcolor
				.search.c         configure -bg $menubarcolor
				.search.cl        configure -bg $menubarcolor
				.mbar2.font       configure -bg $menubarcolor
			} else {
				set menubarcolor $initialcolor
			}
		} else {
			set menubarcolor $initialcolor
		}
	} elseif {$type == 1} {
		set initialcolor $bgColor
		if {$BWidget_present == 1} {
			set bgColor [SelectColor $w.col -color $initialcolor -title "Choose Background Color"]
		} else {
			set bgColor [tk_chooseColor -initialcolor $initialcolor -parent $w -title "Choose Background Color"]
		}
		if {[info exists bgColor]} {
			if {[string length $bgColor] != 0} {
				tk_setPalette $bgColor
			} else {
				set bgColor $initialcolor
			}
		} else {
			set bgColor $initialcolor
		}
	} elseif {$type == 2} {
		set initialcolor $textcolor
		if {$BWidget_present == 1} {
			set textcolor [SelectColor $w.col -color $initialcolor -title "Choose Text Color"]
		} else {
			set textcolor [tk_chooseColor -initialcolor $initialcolor -parent $w -title "Choose Text Color"]
		}
		if {[info exists textcolor]} {
			if {[string length $textcolor] != 0} {
				.v.t configure -bg $textcolor
				catch {$dwin.log configure -bg $textcolor}
			} else {
				set textcolor $initialcolor
			}
		} else {
			set textcolor $initialcolor
		}
	}
}

proc logBrowser {mode} {
	global BWidget_present prgtext env
	source @scriptdir@/global.tcl
	global fontFamily fontSize tc fileSize lastMatch lastSearch lastAfter statusB smaller larger tailmode
	global SSearch text refreshPerSec f pwd logfile
	global imaphost imapport imapuser imappass clockmode User taiconvert
	global taiconvert
	global logfile_monitor
	global loadcheck
	variable logfile_list

	set fontFamily Terminal
	set fontSize 11
	set wrapmode none
	set tc 0 ;# Tag counter
	set fileSize 0
	set lastMatch 1.0
	set lastSearch ""
	set lastAfter xxx
	set loadcheck 1
	set f -1

	#frame .l1 -relief flat -bd 0 -bg #0C104A
	frame .l1 -relief flat -bd 0 -bg black
	pack .l1  -side top   -fill x    -expand 0 -anchor w

	#set b [frame .l1.b -relief flat -bd 0 -bg #0C104A]
	set b [frame .l1.b -relief flat -bd 0 -bg black]
	set logmon  $b.ind
	set larger  $b.font.larger
	set smaller $b.font.smaller
	if {[file exists "/var/log/indimail"]} {
		set pwd "/var/log/indimail"
	} elseif {[file exists "/var/log/qmail"]} {
		set pwd "/var/log/qmail"
	} elseif {[file exists "/var/log"]} {
		set pwd "/var/log"
	} elseif {[file exists "/var/adm"]} {
		set pwd "/var/adm"
	} elseif {[file exists "/var"]} {
		set pwd "/var"
	} else {
		set pwd "/"
	}

	label $logmon -bg black -bd 0
	if {[file exist @imagedir@/greenon.gif]} {
		$logmon configure -image [image create photo -file @imagedir@/greenon.gif] -bg black
		balloonHelp $logmon  "Activity of LogFile.\nGreen - Activity\nRed   - No Activity"
	}
	if {$BWidget_present != 1} {
		frame $b.font -relief flat -bg black
		button $b.font.larger  -text "F+ $fontFamily $fontSize" -bg $menubarcolor -bd 4 -command larger \
			-highlightthickness 2 -highlightbackground white
		$b.font.larger configure -image [image create photo -data "R0lGODlhFgAWAIUAAPwCBBQSFJyanKy2tLzCxHyChNTa3Nzq7Nz29Nzy9Mzy9MTu9OTy9Nzi5Oz6/OT29MTi5Kzi7NTy9KTm7JzW3ITO1Lzq7IzW5HzK1LS+vMTq7Jze7ITW3GTCzGS+zLTS1MzOzLzq9Kzm7Jze5ITW5HTS3FS2vLze5EzCzEyyvEyutJTa5NTu9ITa5FTK1ESirLTm7Mzi5FS6xEy2vESerESmtFSutESmrKyqrAz+/Dw+RAzi3ASutHRydAQCBAAAACH5BAEAAAAALAAAAAAWABYAAAbQQIBQGCgWh8jksCgYEAaCozIZKBgOiIRiwSgEpstCw/HYQiKRhBcMCBgQDodkMaFU0t9pQHCIyy0TFxgYEVF6GQ4LCQkaERscHR4RH3lUIAkWCyEiIyQlHiYjEJVIAQQJJ2gjJSUoKSorlHoCLBQcHC0lLikvHjCGejEiHBgeMjM0NRwPpFQFDBHFNjceHAjAYFWoI7cnCVE4OWxtex8QH1EBOjs4zUpGUjw6Pe3j2fP19u/4zT766vRI+fvHD4CPgwcJ9qg0UB85JA0dDjEQBAAh/mhDcmVhdGVkIGJ5IEJNUFRvR0lGIFBybyB2ZXJzaW9uIDIuNQ0KqSBEZXZlbENvciAxOTk3LDE5OTguIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQpodHRwOi8vd3d3LmRldmVsY29yLmNvbQA7"]
		balloonHelp $b.font.larger  "Increase Font size for text window"
		button $b.font.smaller -text "F- $fontFamily $fontSize" -bg $menubarcolor -bd 4 -command smaller \
			-highlightthickness 2 -highlightbackground white
		$b.font.smaller configure -image [image create photo -data "R0lGODlhFgAWAIUAAPwCBBQSFJyanKy2tLzCxHyChNTa3Nzq7Nz29Nzy9Mzy9MTu9OTy9Nzi5Oz6/OT29MTi5Kzi7NTy9KTm7JzW3ITO1Lzq7IzW5HzK1LS+vMTq7Jze7ITW3GTCzGS+zLTS1MzOzLzq9Kzm7Jze5ITW5HTS3FS2vLze5EzCzEyyvEyutJTa5NTu9ITa5FTK1ESirLTm7Mzi5FS6xEy2vESerESmtFSutESmrKyqrAz+/Dw+RAzi3ASutHRydAQCBAAAACH5BAEAAAAALAAAAAAWABYAAAbKQIBQGCgWh8jksCgYEAaCozIZKBgOiIRiwSgEpstCw/HYQiKRhBcMCBgQDodkMaFU0t9pQHCIyy0TFxgYEVF6GQ4LCQkaERscHR4RH3lUIAkWCyEiIyQlHiYjEJVIAQQJJ2gjJSUoKSorlHoCLBQcHC0lLikvHjCGejEiHBgeMjM0NRwPpFQFDBHFNjceHAjAYFWoI7cnCVE4OWxtex8QH1EBOjs4zUpGUjw6Pe3j2fP19u/47vrq9P3s/avno2BBf/MCClSob4iBIAAh/mhDcmVhdGVkIGJ5IEJNUFRvR0lGIFBybyB2ZXJzaW9uIDIuNQ0KqSBEZXZlbENvciAxOTk3LDE5OTguIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQpodHRwOi8vd3d3LmRldmVsY29yLmNvbQA7"]
		balloonHelp $b.font.larger  "Increase Font size for text window"
		balloonHelp $b.font.smaller  "Decrease Font size for text window"
		pack $b.font.larger $b.font.smaller -side top -expand 1 -fill y
	}

	set refreshPerSec 5
	set tailmode 1
	foreach line {smtp imap pop3 deli} {
		catch {unset logfile_monitor($line)}
	}
	set logfile_list {}
	foreach line [glob -nocomplain /service*/*/log/run] {
		if {[catch {open $line r} f]} {
			continue
		}
		set data [read $f]
		close $f
		set datalist [split $data "\n"]
		for {set i 0} {$i < [llength $datalist]} {incr i} {
			if {[string compare -length [string length "@prefix@/bin/multilog"] "@prefix@/bin/multilog" [lindex $datalist $i]] == 0} {
				set  str "[lindex [lindex $datalist $i] 2]/current"
				lappend logfile_list $str
				if {[string first "imapd" $str] != -1} {
					lappend logfile_monitor(imap) $str
				} elseif {[string first "pop3d" $str] != -1} {
					lappend logfile_monitor(pop3) $str
				} elseif {[string first "smtpd" $str] != -1} {
					lappend logfile_monitor(smtp) $str
				} elseif {[string first "deliver" $str] != -1} {
					lappend logfile_monitor(deli) $str
				}
			}
		}
	}
	if {$BWidget_present == 1} {
		frame $b.scale -bg black
		ComboBox $b.scale.l \
			-textvariable logfile \
			-editable false \
			-width 25 \
			-height 30 \
			-values $logfile_list \
			-modifycmd {
				set pwd [file dirname $logfile]
				after cancel $lastAfter
				loadFile $logfile
			}
		balloonHelp $b.scale.l "Multilog Logfile List"
		frame $b.scale.e -bg black
		pack $b.scale.e -fill x -side top 
		pack $b.scale.l -side bottom -anchor s -fill y

		if {[file exists @prefix@/sbin/osh]} {
			set env(TABLE_NAME) "$env(HOME)/.indimail/osh.table"
			button $b.scale.e.o   -text "Operator Shell" -highlightbackground white -bg black -bd 0 -command "catch {exec $configs(xterm) -e \"su -c @prefix@/sbin/osh\" &} result"
			$b.scale.e.o configure -image [image create photo -data "R0lGODlhFgAWAIcAAPwCBAQCBPTy9PTu9Ozq7OTi5Nze3OTe5Nza3NzW3NTS1MzOzMzKzMzGzMTCxMTGxOzm7AwGDBQOFBQSFCQeHCwmLCwuLDQyNDw6PERCRFROVEQ+RDQ2NLy+vKSipISChGxqbExKTOzu7OTm5Pz+/GRiZMS+xLy6vBQWFLy2vCwiHFQ+NMSmfNSyhIxmTDwuLJx+bLS2tCwmHMyyhMyqfPTqpPzyvLSWbLSWfPzitIx+ZDw2PAwKDCQiJGxWRPTmrPTerMyuhPzqtPz63PTWnPz6zNy+nIRiVDQuLKyWbOTanPz21NS2jNS6lDQqJHRaTPzmrPTSnPzyxOTClPz2xNSuhPTqxPzuvOzSpAQGDOTKnMy2jOzSrPTu1NzKnOzOnBwWHJRuXLSWdPTatPzqvNzClCwmJOzSnOTOnPTuxOzKlOzerOzarOzitJR6ZNTO1IxmXPTWrNSyjPzOjPTSpLSehHRqZOzirOTCjPS+fPzGhOy6bOzKhGROPMy2lPz+1PzmtKRyRHRiNNTCdPz+zNzCjEQ2NKySdDQmj/AAEIHEiwoMGBARIqXMhQIUIBAwYQIFCggIEDCBIoULBgAYMGDgIIDEBAwMSKBRBk3NjxAciQIwdACBBBwgQKFSxcwJBBwwYMHBx0EAmA5EwPH0CEsCChoYgOQ0cSGCHhA4kSS5syJGDiBNEAFVGUKKEBAwWFFM6SNJHi64gDFEKE4FBBggoKK1i0cPECxokYXw0gsECYggQZM2jAqGHjBo4cOtqOxLhDAg8ePXz8ABJEyBAWRIoYOfJipEoMCZEkuaFkSAslS5jUGJKkSRAnRREo0JDwCZQoTKQAmUKlihQrVa5gKZ1lI+oAK7QM2cJlSZMuU4Z4+TJEx0iNOwKAggkjZkyOFmS8kClzpcUQLRRGbjRD4MgZNEzSqKG+ZgobI2248dUbDDDwABzcxSEHEFpgEcUcdMRRhx1fFejAAx0cgcYdSxiBRx566LEHH0d8QFRRNC3Uhx985CHEH0MAEkhCBxWkgiCDFEFIEYUYUmONMhyCRxVH/PgjBYioYJAdAQEAIf5oQ3JlYXRlZCBieSBCTVBUb0dJRiBQcm8gdmVyc2lvbiAyLjUNCqkgRGV2ZWxDb3IgMTk5NywxOTk4LiBBbGwgcmlnaHRzIHJlc2VydmVkLg0KaHR0cDovL3d3dy5kZXZlbGNvci5jb20AOw=="]
			balloonHelp $b.scale.e.o "Operator Shell"
		}
		button $b.scale.e.f -text LogFile -highlightbackground white -bg black -bd 0 \
			-command openFile
		$b.scale.e.f configure -image [image create photo -data "R0lGODlhFgAWAIYAAPwCBAQCBCQWDCwaDDwmFPSubPzGhPzCfPy2dOSmZPzKlPzSnPzOlPzKjBQODPzChPzWnPy2bPSmXPyuZOyeXIRSLEQuFEwyHEQqFDQiFCweDKRuPFRSTPT29PTy9Ozq7OTi3Nze3NTW1MzOzMTGxMTCxLy6tLSytKyurDQyNMzKxOTm5OTi5Nza1NTS1MTCvLS2tLSyrKSmpJyenJSWlIyKjHx+fFxeXBwaHKxuPMzKzLy6vIyOjHx6fDw6NPy6dGxubLy+vISChCQmJNza3KyqrBQSFLR2RKSinJyanGxqZAwGBJSSlCwqLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAWABYAAAf/gACCg4SFhoeDAYqKiIeLj4wBjQCMhY+NkoiLk5qbhQIDoJyGBAUGBwgEo4MECQoLDA2pDrS1tKQPEAwHERITE77AvxKqhAQNDA8UFRYXFs8YBAQZGqGPxw0RGxwdHR4eHyAhIiMkJSYnKCgpBAYPEhcqHyssLS4kLzAxMjM0NTY3cBA4UCAHBw8gVnhgEcKFjhc7UPDj0cMHAAI/KFgY4YLFio/jRpTYsW8GDyCSCEQw2DChOHIqgsCQSEPIEEEEJFhAoUNECCJEyOk4d6KIyRtGcB7hIJKjixEjHu4oimSGEIs4d8IIUoKECnNB0ElMwkNJJgBLlJBAcQKGiR07KGAURVGViY0mhIwwSTKjr99+THjUoIg0r48hTRIrRtxkiOMhDgrZCQQAIf5oQ3JlYXRlZCBieSBCTVBUb0dJRiBQcm8gdmVyc2lvbiAyLjUNCqkgRGV2ZWxDb3IgMTk5NywxOTk4LiBBbGwgcmlnaHRzIHJlc2VydmVkLg0KaHR0cDovL3d3dy5kZXZlbGNvci5jb20AOw=="]
		balloonHelp $b.scale.e.f  "Path of Log File to monitor"
		button $b.scale.e.svc -text Svctool -highlightbackground white -bg black -bd 0 \
			-command {svctool 2} 
		$b.scale.e.svc configure -image [image create photo -data "R0lGODlhEAAQAIUAAPwCBExKTERCRAQCBOzu7Nze3MzKzLy+vCxqZBQ2NJyanKyqrGRiZDRydKza3FRWVPT29LSytDw6PMTm5EySjCxaXGRaJFSanCRSVGxqbPTmvMSqVJTW1GSurHS6vOzq7KSipISChFRKHJSGNPz23GxKFBQ6PKyurCwqLMyufJx2RAQGBJSWlEwyDIRiLNy+lLSKVDwmDJRuNOTOrLyabGRCFDx2dKSCVOzWtHzCxOTGnNSyhAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAQABAAAAahQIBwCAgIBAOiUiggFAyHASKxDAwUC8Zg0HAglA9IZPGQABoTSqJCFTIOEIsFgHBcEhhHUpKJFCwaGxYYHB0VEx4IEh8gIQwiIyQbJRMcHokmEicfDygAkCkqJQgIGG0rLElCLS4vMCWqQwMCQg0UMTIzNDVLQjaIGDE3ODQlS785CEkxKjowvEOHybG4O6JDCdNKuDUxRAmxRDHeveUAfkEAIf5oQ3JlYXRlZCBieSBCTVBUb0dJRiBQcm8gdmVyc2lvbiAyLjUNCqkgRGV2ZWxDb3IgMTk5NywxOTk4LiBBbGwgcmlnaHRzIHJlc2VydmVkLg0KaHR0cDovL3d3dy5kZXZlbGNvci5jb20AOw=="]
		balloonHelp $b.scale.e.svc  "Supervise Tool"
		SpinBox $b.scale.e.s -relief sunken -textvariable refreshPerSec -width 5 \
			-range {0 300 1} -editable false \
			-vcmd {regexp {^[0-9]*$} %P} -validate key -invcmd bell
		set loadf $b.scale.e.f
		if {[file exists @prefix@/sbin/osh]} {
		pack $b.scale.e.o $b.scale.e.f $b.scale.e.svc -side left -anchor nw
		} else {
		pack $b.scale.e.f $b.scale.e.svc -side left -anchor nw
		}
		pack $b.scale.e.s -side right -fill x -anchor nw
	} else {
		scale $b.scale -label "Log Refresh Time" -orient horizontal -length 300 -from 0 -to 20 \
			-bd 2 -relief raised -variable refreshPerSec -tickinterval 5 -command {setTailMode} \
			-highlightthickness 2 -highlightbackground black
	}
	balloonHelp $b.scale.e.s "Time in secs by which\nlog will be refreshed.\nSetting of 0 disables tail mode"
	if {$mode == 1} {
		frame $b.menu -relief flat -bd 0 -bg black
		button $b.menu.b1 -text "Preferences" -command "preferences 1"   -relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/preferences.gif]} {
			$b.menu.b1 config -image [image create photo -file @imagedir@/preferences.gif]
		}
		button $b.menu.b2 -text "IndiVersion" -command "indiversion"   -relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/version.gif]} {
			$b.menu.b2 config -image [image create photo -file @imagedir@/version.gif]
		}
		button $b.menu.b3 -text "Ldap Client" -command "catch {exec @prefix@/bin/gq &} result" -relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/gq.gif]} {
			$b.menu.b3 config -image [image create photo -file @imagedir@/gq.gif]
		}
		button $b.menu.b4 -text "Top" -command "catch {exec $configs(xterm) -e top &}" -relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/top.gif]} {
			$b.menu.b4 config -image [image create photo -file @imagedir@/top.gif]
		}
		button $b.menu.b5 -text "Network Configuration" -command "network_config" -relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/neat.gif]} {
			$b.menu.b5 config -image [image create photo -file @imagedir@/neat.gif]
		}
		button $b.menu.b6 -text "FLASH Interface" -command "catch {exec $configs(xterm) -e @prefix@/bin/shit &} result" -relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/shit.gif]} {
			$b.menu.b6 config -image [image create photo -file @imagedir@/shit.gif]
		}
		button $b.menu.b7 -text "Queue Statistics" -command "qmailAdv 1"   -relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/queuestatus.gif]} {
			$b.menu.b7 config -image [image create photo -file @imagedir@/queuestatus.gif]
		}
		button $b.menu.b8 -text "Control Info" -command "showCtl 1"   -relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/showctl.gif]} {
			$b.menu.b8 config -image [image create photo -file @imagedir@/showctl.gif]
		}
		button $b.menu.b9 -text "Delete Old Users" -command "vdeloldusers"   -relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/delolduser.gif]} {
			$b.menu.b9 config -image [image create photo -file @imagedir@/delolduser.gif]
		}
		button $b.menu.b10 -text "Scheduler" -command "xcron 1"   -relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/cron.gif]} {
			$b.menu.b10 config -image [image create photo -file @imagedir@/cron.gif]
		}
		pack $b.menu.b1 $b.menu.b2 $b.menu.b3 $b.menu.b4 $b.menu.b5 $b.menu.b6 $b.menu.b7 $b.menu.b8 $b.menu.b9 \
			$b.menu.b10 -side left
		balloonHelp $b.menu.b1  "Set Preferences"
		balloonHelp $b.menu.b2  "Version Information"
		balloonHelp $b.menu.b3  "Ldap Client"
		balloonHelp $b.menu.b4  "Top System Processes"
		balloonHelp $b.menu.b5  "Network Configuration"
		balloonHelp $b.menu.b6  "Dumb Terminal Interface"
		balloonHelp $b.menu.b7  "Queue Statistics"
		balloonHelp $b.menu.b8  "Qmail Control File Information"
		balloonHelp $b.menu.b9  "Delete Old Users"
		balloonHelp $b.menu.b10 "Scheduler"
	} else {
		frame $b.menu -relief flat -bd 0 -bg black
		button $b.menu.b1 -text "Preferences" -command "preferences 2"   -relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/preferences.gif]} {
			$b.menu.b1 config -image [image create photo -file @imagedir@/preferences.gif]
		}
		button $b.menu.b2 -text "Ldap Client" -command "catch {exec @prefix@/bin/gq &} result" \
			-relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/gq.gif]} {
			$b.menu.b2 config -image [image create photo -file @imagedir@/gq.gif]
		}
		button $b.menu.b3 -text "Top" -command "catch {exec $configs(xterm) -e top &}" \
			-relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/top.gif]} {
			$b.menu.b3 config -image [image create photo -file @imagedir@/top.gif]
		}
		button $b.menu.b4 -text "FLASH Interface" -command "catch {exec $configs(xterm) -e @prefix@/bin/flash &} result" \
			-relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/shit.gif]} {
			$b.menu.b4 config -image [image create photo -file @imagedir@/shit.gif]
		}
		button $b.menu.b5 -text "Queue Statistics" -command "qmailAdv 2" \
			-relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/queuestatus.gif]} {
			$b.menu.b5 config -image [image create photo -file @imagedir@/queuestatus.gif]
		}
		button $b.menu.b6 -text "Control Info" -command "showCtl 2" \
			-relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/showctl.gif]} {
			$b.menu.b6 config -image [image create photo -file @imagedir@/showctl.gif]
		}
		button $b.menu.b7 -text "Change User" -command "Login 2" \
			-relief groove -bd 2 \
			-highlightthickness 1 -highlightbackground black
		if {[file exist @imagedir@/forum.gif]} {
			$b.menu.b7 config -image [image create photo -file @imagedir@/forum.gif]
		}
		pack $b.menu.b1 $b.menu.b2 $b.menu.b3 $b.menu.b4 $b.menu.b5 \
		$b.menu.b6 $b.menu.b7 -side left
		balloonHelp $b.menu.b1 "Set Preferences"
		balloonHelp $b.menu.b2 "Ldap Client"
		balloonHelp $b.menu.b3 "Top"
		balloonHelp $b.menu.b4 "Dumb Terminal Interface"
		balloonHelp $b.menu.b5 "Queue Statistics"
		balloonHelp $b.menu.b6 "Qmail Control File Information"
		balloonHelp $b.menu.b7 "Change User"
	}

	pack $logmon   -side left -fill y -expand 0
	if {$BWidget_present == 1} {
	pack $b.scale  -side left -expand 0 -anchor nw -pady 4
	} else {
	pack $b.scale  -side left -fill y -expand 0 -anchor nw
	}
	pack $b.menu   -side left -padx 4 -pady 4 -expand 0 -anchor nw

	set s  [frame .search -relief flat -bg $menubarcolor -bd 2]
	set sl [label $s.label -anchor e -bg $menubarcolor -text "Search: "]
	set SSearch [entry $s.entry]
	if {$BWidget_present != 1} {
		pack $b.font    -side left   -fill y    -expand 0 -anchor nw
	}

	pack $sl        -side left 
	pack $SSearch   -side left   -fill x -expand 0 -anchor nw
	set wrapb   [checkbutton $s.wrap -highlightbackground black -bg $menubarcolor -text "Wrap"        -variable wrapmode -offvalue "none" -onvalue "char" -command {$text configure -wrap $wrapmode}]
	set tailb   [checkbutton $s.tail -highlightbackground black -bg $menubarcolor -text "Tail"        -variable tailmode -command {changeLogMode $logfile $tailmode}]
	set regexpb [checkbutton $s.r    -highlightbackground black -bg $menubarcolor -text "Regexp"      -variable regexpmode]
	set caseb   [checkbutton $s.c    -highlightbackground black -bg $menubarcolor -text "Ignore case" -variable casemode]
	set clockm  [checkbutton $s.cl   -highlightbackground black -bg $menubarcolor -text "Clock"       -variable clockmode -command {madClock $clockmode}]
	set taimod  [checkbutton $s.tai  -highlightbackground black -bg $menubarcolor -text "TAI"         -variable taiconvert]
	$tailb  select
	pack $regexpb $caseb $wrapb $tailb $clockm $taimod -side left -fill x -expand no -ipadx 3m -anchor nw

	set v [frame .v -relief flat -bd 2]
	if {[info exists textcolor] == 0 || $textcolor == ""} {
		set textcolor white
	}
	set text [text $v.t -state disabled -width 80 -font "$fontFamily $fontSize" \
		-background $textcolor \
		-yscrollcommand "$v.sbv set" \
		-xscrollcommand "$v.sbh set" \
		-wrap $wrapmode]
	set sbv [scrollbar $v.sbv -orient vertical   -trough black -command "$v.t yview"]
	set sbh [scrollbar $v.sbh -orient horizontal -trough black -command "$v.t xview"]

	bind $SSearch <Key-Home> {$text see 1.0}
	bind $SSearch <Key-End> {$text see end}
	bind $SSearch <Key-Prior> {$text yview scroll -1 pages}
	bind $SSearch <Key-Next> {$text yview scroll 1 pages}
	bind $SSearch <Key-Up> {$text yview scroll -1 units}
	bind $SSearch <Key-Down> {$text yview scroll 1 units}
	bind $SSearch <Key-Return> {SSearch}
	focus $SSearch
	set statusB [label .status -relief flat -bd 2 -bg $menubarcolor]
	pack $b      -fill x    -expand no  -side top    -anchor nw
	madClock 2
	madClock $clockmode
	pack $s      -fill x    -expand no  -side top    -anchor nw
	pack $sbv    -fill y    -expand no  -side right  -anchor nw
	pack $sbh    -fill x    -expand no  -side bottom -anchor nw
	pack $text   -fill both -expand yes -side left   -anchor nw
	pack $v      -fill both -expand yes -side top    -anchor nw
	pack $statusB -fill x    -expand yes -side left   -anchor nw
}

proc logfile_stat {uptimeText} {
	global logfile_monitor

	if {[array exists logfile_monitor] == 0} {
		return;
	}
	.c.1.text delete 1.0 end
	set ind [string first "load average" $uptimeText]
	if {$ind != -1} {
		incr ind 14
		.c.1.text insert end "Load: [string range $uptimeText $ind end]\n"
	}
	foreach mon_type {smtp imap pop3 deli} {
		foreach line $logfile_monitor($mon_type) {
			set name [format "%-12s" $mon_type]
			set ind2 [string last "/" $line]
			if {$ind2 != -1} {
				incr ind2 -1
				set ind1 [string last "/" $line $ind2]
				if {$ind1 != -1} {
					incr ind1
					set name [format "%-12s" [string range $line $ind1 $ind2]]
				}
			}
			if {$mon_type == "deli"} {
				if {[catch {exec tail -100 $line | grep status: | tail -1} result] == 0} {
					set ind [string first "status:" $result]
					if {$ind != -1} {
						incr ind 8
						.c.1.text insert end "$name: \n  [string range $result $ind end]\n"
					}
				}
			} else {
				if {[catch {exec tail -100 $line | grep status: | tail -1 | awk {{print $4}}} result] == 0} {
					.c.1.text insert end "$name: $result\n"
				}
			}
		}
	}
}

proc setTailMode {mode} {
	global tailmode refreshPerSec lastAfter f fileSize

	if {$mode == 0} {
		set tailmode 0
	} else {
		set tailmode 1
	}
	if {$tailmode == 0} {
		after cancel $lastAfter
		set refreshPerSec 0
	} 
}

proc changeLogMode {filename mode} {
	global lastAfter refreshPerSec Fdesc

	if {$mode} {
		set refreshPerSec 5
	} else {
		set refreshPerSec 0
	}
	if {$mode == 0} {
		after cancel $lastAfter
		if {[file exist @imagedir@/greenoff.gif]} {
			.l1.b.ind configure -image [image create photo -file @imagedir@/greenoff.gif] -bg black
		}
	} else {
		addText $filename $Fdesc
	}
}

proc larger {} {
	global text fontFamily fontSize larger smaller

	set fontSize [expr $fontSize + 1]
	$larger  configure -text "F+ $fontFamily $fontSize"
	$smaller configure -text "F- $fontFamily $fontSize"
	$text configure -font "$fontFamily $fontSize"
}

proc smaller {} {
	global text fontFamily fontSize larger smaller

	set fontSize [expr $fontSize - 1]
	if {$fontSize <= 0} {
		set fontSize 1
	}
	$larger  configure -text "F+ $fontFamily $fontSize"
	$smaller configure -text "F- $fontFamily $fontSize"
	$text configure -font "$fontFamily $fontSize"
}

proc setFont {} {
	global text BWidget_present

	if {$BWidget_present == 1} {
		catch {$text configure -font [.mbar2.font cget -font]}
	}
}

proc fixformatting { t fb fe } {
	global fontFamily fontSize tc

	set re "(.\b.)+"
	set mc 0		;# matched characters
	set p [$t search -count mc -regexp $re $fb $fe]
	while {$mc > 0} {
		switch -- [$t get $p] {
			"_"     { set style underline }
			default { set style bold }
		}
		# Remove the extra characters
		set dt [$t get $p "$p + $mc chars"]
		regsub -all ".\b(.)" $dt {\1} ft
		$t delete $p "$p + $mc chars"
		$t insert $p $ft
		# The length of the range is now 1/3 of the original
		set len [expr $mc / 3]
		set n f$tc
		$t tag add $n $p "$p + $len chars"
		set tc [expr $tc + 1]
		$t tag configure $n -font "$fontFamily $fontSize $style"
		set newindex "$p + $len chars"
		set mc 0
		set p [$t search -count mc -regexp $re $newindex $fe]
	}
}

proc addText {filename Fdesc} {
	global prevSize taiconvert
	global text statusB tailmode fileSize refreshPerSec lastAfter menubarcolor
	global servicedir
	global loadcheck

	if {[string compare $text ".v.t"] != 0} {
		return
	}
	if {$loadcheck == 1} {
		catch {exec /usr/bin/uptime} svText
		logfile_stat $svText
	}
	catch {set tmp_result [glob $servicedir/* $servicedir/*/log]}
	if {[info exists tmp_result] && $tmp_result != ""} {
		set cmd "exec @prefix@/bin/svstat $tmp_result"
		catch {eval $cmd} result
		append svText "\n$result"
	} else {
		append svText "\nNo Services configured\n"
	}
	balloonHelp .l1.b.scale.e.svc $svText
	seek $Fdesc $fileSize start
	if {[eof $Fdesc]} {
		if {$tailmode} {
			set i [expr $refreshPerSec * 1000]
			set lastAfter [after $i "addText $filename $Fdesc"]
		}
		return
	}
	set r [read $Fdesc]
	if {$r == ""} {
		if {$tailmode} {
			if {[file exist @imagedir@/greenoff.gif]} {
				.l1.b.ind configure -image [image create photo -file @imagedir@/greenoff.gif] -bg black
			}
			set i [expr $refreshPerSec * 1000]
			set lastAfter [after $i "addText $filename $Fdesc"]
		}
		return
	}
	$text configure -state normal
	set fixbegin [$text index end]
	if {$taiconvert == 1} {
		foreach line [split $r "\n"] {
			if {$line == ""} {
				continue
			}
			if {[catch {tai64 local $line} tailine] == 1} {
				.v.t insert end "$line\n"
			} else {
				.v.t insert end "$tailine [string range $line 26 end]\n"
			}
		}
	} else {
		.v.t insert end $r
	}
	fixformatting $text $fixbegin [$text index end]
	$text configure -state disabled
	if {$tailmode} {
		$text see end
		if {[file exist @imagedir@/greenon.gif]} {
			.l1.b.ind configure -image [image create photo -file @imagedir@/greenon.gif] -bg black
			.l1.b.scale.e.f flash
			update idletasks
		}
	}
	incr fileSize [string length $r]
	set size "$fileSize bytes"
	set nlines [expr [lindex [split [$text index end] .] 0] - 2]
	$statusB configure -text "$filename - $nlines lines, $size" -anchor w
	if {$tailmode} {
		set i [expr $refreshPerSec * 1000]
		set lastAfter [after $i "addText $filename $Fdesc"]
	}
	update
}

proc SSearch {} {
	global text SSearch regexpmode casemode lastMatch lastSearch

	set searchText [$SSearch get]
	if {$searchText != $lastSearch} {
		set lastMatch 1.0
	}
	set opt ""
	if {$regexpmode} {
		set opt "-regexp "
	}
	if {$casemode} {
		set opt "$opt -nocase"
	}
	set ms [eval $text search -count mc $opt -- {[$SSearch get]} $lastMatch]
	if {[string length $ms] == 0} {
		return
	}
	set ml [split $ms .]
	set me [lindex $ml 0].[expr [lindex $ml 1] + $mc]
	# Show the match using tag "sm"
	$text tag delete sm
	$text tag add sm $ms $me
	$text tag configure sm -foreground White -background Blue
	$text see $ms
	set lastMatch $me
	set lastSearch $searchText
}

proc loadFile {filename} {
	global text Fdesc fileSize logfile
	global prevSize

	if {[info exists Fdesc] && $Fdesc != -1} {
		catch {close $Fdesc}
	}
	if {[catch {open $filename r} Fdesc] } {
		puts stdout "$filename: $Fdesc"
		return 1
	} else {
		set prevSize -1
		set fileSize [file size $filename]
		if {$fileSize > 100000} {
			set fileSize [expr $fileSize - 100000]
			seek $Fdesc $fileSize start
			set fileSize [expr $fileSize + [gets $Fdesc line]]
			incr fileSize
		} else {
			set fileSize 0
		}
		set logfile $filename
		addText $filename $Fdesc
	}
}

proc openFile {} {
	global pwd logfile lastAfter

	set filename [tk_getOpenFile -parent . -initialdir $pwd -title "Open file for viewing..."]
	if {[string length $filename] == 0} {
		return
	}
	set pwd [file dirname $filename]
	set logfile $filename
	after cancel $lastAfter
	loadFile $filename
}

proc initBrowser {} {
	global FileMWin oldTK
	set oldTK 0
	set FileMWin ".ddname"
	FBInit .ddname
}

proc xcron {mode} {
	global BWidget_present prgtext w lwin rwin win env
	source @scriptdir@/global.tcl
	global run_daily
	variable fr1
	variable fr2
	variable fr3
	variable frp
	variable comment
	variable initialdir
	variable types
	variable str
	variable my_mode
	global enabled
	global minute_val
	global program
	global scrollfr
	global monthTab days weekTab minutes hours
	global st_cremod
	global cron_line
	global rundailyCheck
	global spinwin

	set my_mode $mode
	set cron_line ""
	set program ""
	set minute_val 0
	set standard_list {}
	if {[file exists $env(HOME)/.indimail/.cronlist]} {
		if {[catch {open $env(HOME)/.indimail/.cronlist r} f] } {
			msg_dialog .d {cronlist} "open: $f" @imagedir@/warning.gif 0 "OK"
			return 1
		} while {[gets $f line] >= 0} {
			if { [string index $line 0] != "#" } {
				lappend standard_list $line
			}
		}
		close $f
	} else {
	lappend standard_list "2,32 * * * * @prefix@/bin/hostsync"
	lappend standard_list "5,35 * * * * @prefix@/bin/clearopensmtp"
	lappend standard_list "5,35 * * * * @prefix@/bin/fetchmail.cron"
	lappend standard_list "7 * * * * @prefix@/bin/vfstab -b"
	lappend standard_list "24 0,4,8,12,16,20 * * * * @prefix@/bin/chowkidar -f /var/log/indimail/deliver.25/current -o $controldir/badmailfrom -n 300 -B > /dev/null 2>&1"
	lappend standard_list "24 0,4,8,12,16,20 * * * * @prefix@/bin/chowkidar -f /var/log/indimail/deliver.25/current -o $controldir/badrcptto -n 300 -T > /dev/null 2>&1"
	}
	createWindow
	focus $w
	set Description "Scheduler"
	.statusBar.lab configure -text $Description
	wm title . "Scheduler"
	set types {
		{"All files"		*}
		{"Text files"		{.txt .doc}	}
		{"Text files"		{}		TEXT}
		{"Tcl Scripts"		{.tcl}		TEXT}
		{"C Source Files"	{.c .h} }
		{"All Source Files"	{.tcl .c .h} }
		{"Image Files"		{.gif} }
		{"Image Files"		{.jpeg .jpg} }
		{"Image Files"		""		{GIFF JPEG} }
	}
	set initialdir @prefix@/bin
	TitleFrame $w.fr -text "Scheduler" -side center -relief groove -bd 2
	pack $w.fr
	set scrollfr [$w.fr getframe]
	frame $scrollfr.list -relief flat -bd 0
	label $scrollfr.list.l -text "Cron Entry" -padx 4
	combobox $scrollfr.list.c \
		-textvariable cron_line \
		-editable false \
		-width 50 \
		-command {selectLine} \
		-bd 2
	ComboBox $scrollfr.list.b \
		-textvariable cron_line \
		-editable true \
		-width 30 \
		-modifycmd {selectLine $scrollfr.list.b $cron_line} \
		-height 10 \
		-bd 2 \
		-vcmd {regexp {^[0-9.]*$} %P} -validate key -invcmd bell \
		-values $standard_list
	pack $scrollfr.list.l -side left
	pack $scrollfr.list.c -side left -expand 1 -fill x
	pack $scrollfr.list.b -side left -expand 0 -fill none
	#initVar
	#GetCurrentState
	set frp [frame $scrollfr.f1 -relief flat -bd 0]
	frame $scrollfr.f2 -relief flat -bd 0
	frame $scrollfr.f3 -relief flat -bd 0
	pack $scrollfr.list -side top -anchor nw -expand 1 -fill x
	pack $scrollfr.f1 $scrollfr.f2 $scrollfr.f3 -side top -anchor w -fill x

	label  $frp.l -text "Program" -padx 4
	entry  $frp.e -textvariable program
	button $frp.b -text "Browse" \
		-bg orange \
		-bd 2 \
		-highlightthickness 2 -highlightbackground black \
		-command { \
			set tmpfile [tk_getOpenFile -filetypes $types -parent $frp.e -initialdir $initialdir]; \
			if {$tmpfile != ""} {; \
				set program $tmpfile; \
				append program " >/dev/null 2>&1"
				set tmp [file dirname $tmpfile]; \
				if {$tmp != ""} {; \
					set initialdir $tmp; \
				}; \
			}; \
		}
	$frp.b configure -image [image create photo -data "R0lGODlhEAAQAIUAAPwCBAQCBPz+hPz+BOSmZPzSnPzChFxaXMTCBPyuZPz+xPzGhEwyHExOTPz+/MSGTFROTPT29OTm5KyurDQyNNza3Ozq5Nze3LR+RLy+vJyenMzKzNTS1Ly6vJSWlFRSTMzOzMTGxLS2tKSmpGxubBQSFAwKDKSinJyanIyOjCQiJERCRERGRBweHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAQABAAAAaNQIBwSCwaj8ikcokMCIqBaEDoBAQG1meAUDAQpIcBQoy1dg2JdBqhECgQ1IWB0WgcBIOBwIHXBwwPEBEREhIBbG4IExR/DBUVFhIXV2NjDVYYDY8SFU4ZVxpVAQwbGxynGxkdTh6XVh8gGSGzGSITIxokJUImGSMTwLcnKCkprgAqDSt1zCssKxQtQ35BACH+aENyZWF0ZWQgYnkgQk1QVG9HSUYgUHJvIHZlcnNpb24gMi41DQqpIERldmVsQ29yIDE5OTcsMTk5OC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4NCmh0dHA6Ly93d3cuZGV2ZWxjb3IuY29tADs="]
	checkbutton $scrollfr.f2.c1 -text "Enabled" -variable enabled -command { \
			if {$enabled == 1} { \
				if {[string index $cron_line 0] == "#"} { \
					set cron_line [string range $cron_line 2 end] \
				} \
			} else { \
				if {[string index $cron_line 0] != "#"} { \
					set cron_line "#-$cron_line" \
				} \
			} \
		}
	pack $frp.l -side left 
	pack $frp.e -side left -fill x -expand 1
	pack $frp.b -side left
	pack $scrollfr.f2.c1 -side top -anchor nw

	TitleFrame $scrollfr.f3.1 -text "Months" -side center -relief groove -bd 2
	set fr1 [$scrollfr.f3.1 getframe]
	frame $scrollfr.f3.2 -relief flat   -bd 0
	frame $scrollfr.f3.3 -relief flat   -bd 0
	pack $scrollfr.f3.1 $scrollfr.f3.2 $scrollfr.f3.3 -side left -anchor nw -fill y
	foreach month {January February March April May June July August September \
		October November December} {
		set str [string tolower $month]
		checkbutton $fr1.$str -text $month -variable monthTab($str) \
			-command "select_chkbut month $str"
		pack $fr1.$str -side top -anchor nw -padx 10
	}
	checkbutton $fr1.all -indicatoron 0 -text "All Months" -variable monthTab(*) \
		-selectcolor DeepSkyBlue4 -command every_month
	pack $fr1.all -side top -anchor nw -padx 10
	TitleFrame $scrollfr.f3.2.1 -text "Days of the Months" -side left -relief groove -bd 2
	TitleFrame $scrollfr.f3.2.2 -text "Days of the Week"   -side left -relief groove -bd 2
	pack $scrollfr.f3.2.1 $scrollfr.f3.2.2 -side top -pady 2 -fill x
	set fr2 [$scrollfr.f3.2.1 getframe]
	set fr3 [$scrollfr.f3.2.2 getframe]
	foreach i {1 2 3 4 5 6} {
		frame $fr2.$i -relief flat
		pack $fr2.$i -side top -anchor nw
	}
	for {set i 1} {$i < 8} {incr i} {
		checkbutton $fr2.1.$i -indicatoron 0 -text "0$i" -variable days($i) \
			-width 3 -command "select_chkbut days $i"
		pack $fr2.1.$i -side left -anchor nw
	}
	for {set i 8} {$i < 10} {incr i} {
		checkbutton $fr2.2.$i -indicatoron 0 -text "0$i" -variable days($i) \
			-width 3 -command "select_chkbut days $i"
		pack $fr2.2.$i -side left -anchor nw
	}
	for {set i 10} {$i < 15} {incr i} {
		checkbutton $fr2.2.$i -indicatoron 0 -text $i -variable days($i) \
			-width 3 -command "select_chkbut days $i"
		pack $fr2.2.$i -side left -anchor nw
	}
	for {set i 15} {$i < 22} {incr i} {
		checkbutton $fr2.3.$i -indicatoron 0 -text $i -variable days($i) \
			-width 3 -command "select_chkbut days $i"
		pack $fr2.3.$i -side left -anchor nw
	}
	for {set i 22} {$i < 29} {incr i} {
		checkbutton $fr2.4.$i -indicatoron 0 -text $i -variable days($i) \
			-width 3 -command "select_chkbut days $i"
		pack $fr2.4.$i -side left -anchor nw
	}
	for {set i 29} {$i < 32} {incr i} {
		checkbutton $fr2.5.$i -indicatoron 0 -text $i -variable days($i) \
			-width 3 -command "select_chkbut days $i"
		pack $fr2.5.$i -side left -anchor nw
	}
	checkbutton $fr2.6.1 -indicatoron 0 -text "All Days" -variable days(*) \
		-selectcolor DeepSkyBlue4 -command every_day
	pack $fr2.6.1 -side left -anchor nw
	foreach week {Sunday Monday Tuesday Wednesday Thursday Friday Saturday} {
		set str [string tolower $week]
		checkbutton $fr3.$str -text $week -variable weekTab($str) \
			-command "select_chkbut week $str"
		pack $fr3.$str -side top -anchor nw
		set str ""
	}
	checkbutton $fr3.all -indicatoron 0 -text "All Weeks" -variable weekTab(*) -bd 2 \
		-selectcolor DeepSkyBlue4 -command every_week
	pack $fr3.all -side top -anchor nw
	TitleFrame $scrollfr.f3.3.1 -text "Daily"   -side left -relief groove -bd 2
	TitleFrame $scrollfr.f3.3.2 -text "Hours"   -side left -relief groove -bd 2
	TitleFrame $scrollfr.f3.3.3 -text "Minutes" -side left -relief groove -bd 2
	frame      $scrollfr.f3.3.4                            -relief flat   -bd 0
	pack $scrollfr.f3.3.2 $scrollfr.f3.3.3 -side top \
		-pady 2 -fill none -anchor nw
	pack $scrollfr.f3.3.1 -side top \
		-pady 2 -fill x -anchor nw
	pack $scrollfr.f3.3.4 -side top \
		-pady 2 -fill none -anchor nw
	set fr4 [$scrollfr.f3.3.1 getframe]
	set fr5 [$scrollfr.f3.3.2 getframe]
	set fr6 [$scrollfr.f3.3.3 getframe]
	set rundailyCheck $fr4.c
	checkbutton $fr4.c -variable run_daily -text "Run Every Day" \
		-command {disable_command $run_daily $fr1 $fr2 $fr3}
	pack $fr4.c -side left -anchor w
	foreach i {1 2 3 4 5 6 7} {
		frame $fr5.$i -relief flat -bd 0
		pack $fr5.$i -side top -anchor nw -expand 1 -fill x
	}
	label $fr5.1.l -text "AM" -relief flat
	pack $fr5.1.l -side right -anchor center
	foreach i {0 1 2 3 4 5} {
		checkbutton $fr5.2.$i -indicatoron 0 -text "0$i" -variable hours($i) \
		-width 3 -command "select_chkbut hours $i"
		pack $fr5.2.$i -side left -anchor nw
	}
	foreach i {6 7 8 9} {
		checkbutton $fr5.3.$i -indicatoron 0 -text "0$i" -variable hours($i) \
			-width 3 -command "select_chkbut hours $i"
		pack $fr5.3.$i -side left -anchor nw
	}
	foreach i {10 11} {
		checkbutton $fr5.3.$i -indicatoron 0 -text $i -variable hours($i) \
			-width 3 -command "select_chkbut hours $i"
		pack $fr5.3.$i -side left -anchor nw
	}
	label $fr5.4.l -text "PM" -relief flat
	pack $fr5.4.l -side right -anchor ne
	foreach i {12 13 14 15 16 17} {
		checkbutton $fr5.5.$i -indicatoron 0 -text $i -variable hours($i) \
			-width 3 -command "select_chkbut hours $i"
		pack $fr5.5.$i -side left -anchor nw
	}
	foreach i {18 19 20 21 22 23} {
		checkbutton $fr5.6.$i -indicatoron 0 -text $i -variable hours($i) \
			-width 3 -command "select_chkbut hours $i"
		pack $fr5.6.$i -side left -anchor nw
	}
	checkbutton $fr5.7.1 -indicatoron 0 -text "Every Hour" -variable hours(*) \
		-selectcolor DeepSkyBlue4 -command every_hour
	pack $fr5.7.1 -side left -anchor nw
	foreach i {1 2 3} {
		frame $fr6.$i -relief flat -bd 0
		pack $fr6.$i -side top -anchor nw
	}
	foreach i {0 5} {
		checkbutton $fr6.1.$i -indicatoron 0 -text "0$i" -variable minutes($i) \
			-width 3 -command "select_chkbut minutes $i"
		pack $fr6.1.$i -side left -anchor nw
	}
	foreach i {10 15 20 25} {
		checkbutton $fr6.1.$i -indicatoron 0 -text $i -variable minutes($i) \
			-width 3 -command "select_chkbut minutes $i"
		pack $fr6.1.$i -side left -anchor nw
	}
	foreach i {30 35 40 45 50 55} {
		checkbutton $fr6.2.$i -indicatoron 0 -text $i -variable minutes($i) \
			-width 3 -command "select_chkbut minutes $i"
		pack $fr6.2.$i -side left -anchor nw
	}
	checkbutton $fr6.3.1 -indicatoron 0 -text "Every Min" -variable minutes(*) \
		-selectcolor DeepSkyBlue4 -command "every_minute $fr6.3.2"
	set spinwin $fr6.3.2
	SpinBox $fr6.3.2 -relief sunken -textvariable minute_val -width 5 \
		-range {0 59 1} -vcmd {regexp {^[0-9]*$} %P} -validate key \
		-invcmd bell -state disabled -modifycmd {set_minutes $minute_val} \
		-editable false
	pack $fr6.3.1 $fr6.3.2 -side left -anchor nw
	button $scrollfr.f3.3.4.b1 -text "Add"     -bd 2 -relief raised \
		-bg orange \
		-bd 5 \
		-highlightthickness 5 -highlightbackground black \
		-command {set st_cremod "create";OkCronProg $frp.e2.e 1 $my_mode}
	button $scrollfr.f3.3.4.b2 -text "Modify"     -bd 2 -relief raised \
		-bg orange \
		-bd 5 \
		-state disabled \
		-highlightthickness 5 -highlightbackground black \
		-command {set st_cremod "modify";OkCronProg $frp.e2.e 1 $my_mode}
	button $scrollfr.f3.3.4.b3 -text "Delete"     -bd 2 -relief raised \
		-bg orange \
		-bd 5 \
		-state disabled \
		-highlightthickness 5 -highlightbackground black \
		-command {set st_cremod "delete";deleteCron $my_mode}
	button $scrollfr.f3.3.4.b4 -text "Cancel" -bd 2 -relief raised \
		-bg IndianRed \
		-bd 5 \
		-highlightthickness 5 -highlightbackground black \
		-command "destroyWindows;return"
	pack $scrollfr.f3.3.4.b1 $scrollfr.f3.3.4.b2 $scrollfr.f3.3.4.b3 $scrollfr.f3.3.4.b4 \
		-side left -anchor nw 
	initVar
	GetCurrentState $my_mode
}

proc set_minutes {val} {
	global minutes

	if {$minutes(*) == 1} {
		for {set i 0} {$i < 59} {incr i} {
			set minutes($i) 0
		}
		set minutes($val) 1
	}
}

proc every_minute {win} {
	global minutes

	if {$minutes(*) == 1} {
		$win configure -state normal
	} else {
		$win configure -state disabled
	}
	for {set i 0} {$i < 59} {incr i} {
		set minutes($i) 0
	}
}

proc every_hour {} {
	global hours

	for {set i 0} {$i < 59} {incr i} {
		set hours($i) 0
	}
}

proc every_day {} {
	global day

	for {set i 0} {$i <= 31} {incr i} {
		set day($i) 0
	}
}

proc every_month {} {
	global monthTab

	foreach month {january february march april may june july august september \
		october november december} {
		set monthTab($month) 0
	}
}

proc every_week {} {
	global weekTab

	foreach week {sunday monday tuesday wednesday thursday friday saturday} {
		set weekTab($week) 0
	}
}

proc select_chkbut {type value} {
	global monthTab days weekTab hours minutes
	if {$type == "minutes" && $minutes(*) == 1} {
		set i 0
		while { $i < 60 } {
			if {$i != $value} {
				set minutes($i) 0
			}
			incr i
		}
	}
	if {$type == "hours" && $hours(*) == 1} {
		set i 0
		while {$i < 24} {
			if {$i != $value} {
				set hours($i) 0
			}
			incr i
		}
	}
	if {$type == "days" && $days(*) == 1} {
		for {set i 0} {$i <= 31} {incr i} {
			if {$i != $value} {
				set days($i) 0
			}
		}
	}
	if {$type == "month" && $monthTab(*) == 1} {
		foreach month {january february march april may june july august september \
			october november december} {
			if {$month != $value} {
				set monthTab($month) 0
			}
		}
	}
	if {$type == "week" && $weekTab(*) == 1} {
		foreach week {sunday monday tuesday wednesday thursday friday saturday} {
			if {$week != $value} {
				set weekTab($week) 0
			}
		}
	}
}

proc disable_command {run_daily fr1 fr2 fr3} {
	global monthTab days weekTab hours minutes

	every_month
	every_week
	every_day
	if {$run_daily == 1} {
		set monthTab(*) 1
		set days(*) 1
		set weekTab(*) 1
		foreach month {january february march april may june july august september \
			october november december} {
			$fr1.$month configure -state disabled
		}
		for {set i 1} {$i < 8} {incr i} {
			$fr2.1.$i configure -state disabled
		}
		for {set i 8} {$i < 10} {incr i} {
			$fr2.2.$i configure -state disabled
		}
		for {set i 10} {$i < 15} {incr i} {
			$fr2.2.$i configure -state disabled
		}
		for {set i 15} {$i < 22} {incr i} {
			$fr2.3.$i configure -state disabled
		}
		for {set i 22} {$i < 29} {incr i} {
			$fr2.4.$i configure -state disabled
		}
		for {set i 29} {$i < 32} {incr i} {
			$fr2.5.$i configure -state disabled
		}
		foreach week {sunday monday tuesday wednesday thursday friday saturday} {
			$fr3.$week configure -state disabled
		}
	} else {
		foreach month {january february march april may june july august september \
			october november december} {
			$fr1.$month configure -state normal
		}
		for {set i 1} {$i < 8} {incr i} {
			$fr2.1.$i configure -state normal
		}
		for {set i 8} {$i < 10} {incr i} {
			$fr2.2.$i configure -state normal
		}
		for {set i 10} {$i < 15} {incr i} {
			$fr2.2.$i configure -state normal
		}
		for {set i 15} {$i < 22} {incr i} {
			$fr2.3.$i configure -state normal
		}
		for {set i 22} {$i < 29} {incr i} {
			$fr2.4.$i configure -state normal
		}
		for {set i 29} {$i < 32} {incr i} {
			$fr2.5.$i configure -state normal
		}
		foreach week {sunday monday tuesday wednesday thursday friday saturday} {
			$fr3.$week configure -state normal
		}
	}
}

proc initVar {} {
	global monthTab days weekTab hours minutes cron_line program spinwin

	$spinwin configure -state disabled
	set minutes(*) 0
	for {set i 0} {$i <= 59} {incr i} {
		set minutes($i) 0
	}
	set hours(*) 0
	for {set i 0} {$i <= 23} {incr i} {
		set hours($i) 0
	}
	set days(*) 0
	for {set i 0} {$i <= 31} {incr i} {
		set days($i) 0
	}
	set monthTab(*) 0
	foreach month {january february march april may june july august september \
		october november december} {
		set monthTab($month) 0
	}
	set weekTab(*) 0
	foreach week {sunday monday tuesday wednesday thursday friday saturday} {
		set weekTab($week) 0
	}
}

proc selectLine {args} {
	global monthTab days weekTab hours minutes run_daily
	global enabled
	global program
	global rundailyCheck
	global scrollfr
	global spinwin
	global minute_val
	variable comm

	set cronStatus [string index [lindex $args 1] 0]
	if {$cronStatus == "#"} {
		set data [string range [lindex $args 1] 2 end]
		set enabled 0
	} elseif {$cronStatus == "-"} {
		set data [string range [lindex $args 1] 1 end]
		set enabled 0
	} else {
		set data [lindex $args 1]
		set enabled 1
	}
	if {[string length $data]} {
		$scrollfr.f3.3.4.b2 configure -state normal
		$scrollfr.f3.3.4.b3 configure -state normal
	} else {
		return 0
	}
	initVar
	set champ [lindex $data 0]
	if [ regexp {\*/([0-9]*)} $champ all div ] {
		set minutes(*) 1  
		$spinwin configure -state normal
		set minutes($div) 1
		set minute_val $div
	} else {
		$spinwin configure -state disabled
		set tmpl [split $champ ","]
		foreach ind $tmpl {
			set minutes($ind) 1
		}
	}
	set champ [lindex $data 1]
	if [ regexp {\*/([0-9]*)} $champ all div ] {
		set hours(*) 1
		set hours($div) 1
	} else {
		set tmpl [split $champ ","]
		foreach ind $tmpl {
			set hours($ind) 1
		}
	}
	set champ [lindex $data 2]
	if [ regexp {\*/([0-9]*)} $champ all div ] {
		set days(*) 1
		set days($div) 1
	} else {
		set tmpl [split $champ ","]
		foreach ind $tmpl {
			set days($ind) 1
		}
	}

	set monthtmp {january february march april may june july august september \
				october november december}
	set champ [lindex $data 3]
	if [ regexp {\*/([0-9]*)} $champ all div ] {
		set monthTab(*) 1
		incr $div -1
		set monthTab([lindex $monthtmp $div]) 1
	} else {
		set tmpl [split $champ ","]
		if {[string compare $tmpl "\*"] == 0} {
			set monthTab(*) 1
		} else {
			foreach ind $tmpl {
				set idx [expr $ind - 1]
				set monthTab([lindex $monthtmp $idx]) 1
			}
		}
	}

	set weektmp {sunday monday tuesday wednesday thursday friday saturday}
	set champ [lindex $data 4]
	if [ regexp {\*/([0-9]*)} $champ all div ] {
		set weekTab(*) 1
		set weekTab([lindex $weektmp $div]) 1
	} else {
		set tmpl [split $champ ","]
		if {[string compare $tmpl "\*"] == 0} {
			set weekTab(*) 1
		} else {
			foreach ind $tmpl {
				set weekTab([lindex $weektmp $ind]) 1
			}
		}
	}
	regexp {[^ ]* [^ ]* [^ ]* [^ ]* [^ ]* (.*)} $data all comm
	set program $comm
	if {$monthTab(*) == 1 && $weekTab(*) == 1 && $days(*) == 1} {
		set run_daily 1
		$rundailyCheck select
	}
}

proc GetCurrentState {mode} {
	global scrollfr User
#       if no crontab file , create an empty one 
#       to avoid the close to produce an error
	if {$User == "postmaster" || $mode == 1} {
		exec sh << "crontab -l > /dev/null 2>&1 ; if \[ \$? -ne 0 \]; then > /tmp/croninit.[pid]; crontab /tmp/croninit.[pid]; rm /tmp/croninit.[pid]; fi"
	} else {
		exec sh << "crontab -u $User -l > /dev/null 2>&1 ; if \[ \$? -ne 0 \]; then > /tmp/croninit.[pid]; crontab /tmp/croninit.[pid]; rm /tmp/croninit.[pid]; fi"
	}

	$scrollfr.list.c list delete 0 end
	if {$User == "postmaster" || $mode == 1} {
	set cmd "| crontab -l"
	} else {
	set cmd "| crontab -u $User -l"
	}
	if {[catch {open $cmd r} fid] } {
		tk_dialog . "crontab" $fid {} {} "OK"
		return 1
	}
	while {[gets $fid line] >= 0} {
		if {[string index $line 0] != "#"} {
			if {[regexp -expanded {.* .* .* .* .* .*} $line]} {
				$scrollfr.list.c list insert end "$line"
	    	}
		} else {
			if {[string index $line 1] == "-"} {
				$scrollfr.list.c list insert end "$line"
			}
		}
	}
	close $fid
}

proc RePostCronTab {mode} {
	global User
	source @scriptdir@/global.tcl
	global scrollfr cron_line program enabled
	if {[catch {open "/tmp/croninit.[pid]" w} fid] } {
		tk_dialog . "crontab" $fid {} {} "OK"
		return 1
	}
	# set each cron line
	set ind 0
	set max [$scrollfr.list.c list size]
	while { $ind < $max } {
		set line [$scrollfr.list.c list get $ind]
		puts $fid $line
		incr ind
	}
	close $fid
	if {$User == "postmaster" || $mode == 1} {
	set cmd "exec crontab /tmp/croninit.[pid]"
	} else {
	set cmd "exec crontab -u $User /tmp/croninit.[pid]"
	}
	runCommand $cmd
	file delete /tmp/croninit.[pid]
	if {$returnstatus == 0} {
		msg_dialog .d "Scheduler" "Cron Modified" @imagedir@/warning.gif 0 "OK"
		set cron_line ""
		set program ""
		set enabled 0
		initVar
		return 0
	} else {
		msg_dialog .d "$cmd" "$result" @imagedir@/warning.gif 0 "OK"
		return 1
	}
}

proc checkDup {new_line} {
	global scrollfr
	set ind 0
	set max [$scrollfr.list.c list size]
	while { $ind < $max } {
		set line [$scrollfr.list.c list get $ind]
		if {[string compare $line $new_line] == 0} {
			return 1
		}
		incr ind
	}
	return 0
}

proc OkCronProg {entwin operation mode} {
	source @scriptdir@/global.tcl
	global monthTab days weekTab hours minutes
	global program
	global st_cremod
	global cron_line
	variable isset
	global scrollfr enabled
    set line ""
    set isset(min) 0
    set isset(hour) 0
    set isset(day) 0
    set isset(month) 0
    set isset(week) 0

    ##################
	if {$enabled == 0} {
		append line "#-"
	}
    if {$minutes(*) == 1 } {
		set isset(min) 1
		append line "*"
		set any 1
	} else {
		set any 0
	}
	set min 0
	while {$min < 60} {
		if {$minutes($min)} {
			set isset(min) 1
	    	if {$any} {
				# more than one value with * is forbidden !
				append line "/$min"
			} else {
				append line "$min,"
			}
		}
		incr min
	}
    set line [ string trimright $line ","]
    append line " "
    ##################
	if { $hours(*) == 1 } {
		append line "*"
		set isset(hour) 1
		set any 1
	} else {
		set any 0
	}
   	set hour 0
	while { $hour < 24 } {
		if {$hours($hour)} {
			set isset(hour) 1
	    	if {$any} {
				# more than one value with * is forbidden !
				append line "/$hour"
			} else {
				append line "$hour,"
			}
		}
		incr hour
	}
	set line [ string trimright $line ","]
	append line " "
    ##################
	if { $days(*) == 1 } {
		append line "*"
		set isset(day) 1
		set any 1
	} else {
		set any 0
	}
	set dom 1
	while {$dom <= 31} {
		if { $days($dom) } {
			set isset(day) 1
			if {$any} {
				# more than one value with * is forbidden !
				append line "/$dom"
			} else {
				append line "$dom,"
			}
		}
		incr dom
	}
    set line [ string trimright $line ","]
    append line " "
    ##################
	if {$monthTab(*) == 1} {
		append line "*"
		set isset(month) 1
		set any 1
	} else {
		set any 0
	}
	set i 1
	foreach month {january february march april may june july august september \
		october november december} {
		if {$monthTab($month)} {
			set isset(month) 1
			if {$any} {
				# more than one value with * is forbidden !
				append line "/$i"
			} else {
				append line "$i,"
			}
		}
		incr i
	}
	set line [ string trimright $line ","]
	append line " "
    ##################
	if { $weekTab(*) == 1 } {
		append line "*"
		set isset(week) 1
		set any 1
	} else {
		set any 0
	}
	set i 0
	foreach week {sunday monday tuesday wednesday thursday friday saturday} {
		if { $weekTab($week) } {
			set isset(week) 1
			if {$any} {
				# more than one value with * is forbidden !
				append line "/$i"
			} else {
				append line "$i,"
			}
		}
		incr i
	}
	set line [ string trimright $line ","]
	append line " "
    ##################
	set nbr [expr $isset(min) + $isset(hour) + $isset(day) + $isset(month) + $isset(week)]
	if { $nbr != 5 } {
		return "bad"
	}
    ##################
	if {$program == ""} {
		return "bad"
	}
	append line $program
	if {$st_cremod == "create"} {
		if {[checkDup $line] == 1} {
			msg_dialog .d "cron" "$line is duplicate" @imagedir@/warning.gif 0 "OK"
			set cron_line ""
			set program ""
			initVar
			return "Ok"
		}
		$scrollfr.list.c list insert end "$line" 
	} else {
    	set ind [$scrollfr.list.c curselection]
		$scrollfr.list.c list delete $ind $ind
		$scrollfr.list.c list insert $ind "$line" 
	}
	set cron_line $line
	if {$operation} {
		RePostCronTab $mode
	}
	return "ok"
}

proc deleteCron {mode} {
    global Messages
	global scrollfr
	global cron_line
	global program

   	set ind [$scrollfr.list.c curselection]
	if { $ind != "" } {
		set line [$scrollfr.list.c list get $ind]
		set typ [tk_dialog .type "Really Delete" \
    	"Do you really want to delete :\n$line" question -1 \
		"Ok" "Cancel"]
		if { ! $typ } {
			$scrollfr.list.c list delete $ind $ind
			RePostCronTab $mode
			set cron_line ""
			set program ""
			initVar
		}
	}
}

proc network_config {} {
	global BWidget_present prgtext User
	source @scriptdir@/global.tcl
	variable f

	if {$User == "root"} {
		catch {exec /usr/sbin/neat &} result
	} else {
		if {[catch {open "/tmp/neat.[pid]" w} fid] } {
			tk_dialog . "su" $fid {} {} "OK"
			return 1
		}
		puts $fid "#!/bin/sh"
		puts $fid "trap \"\" SIGHUP"
		puts $fid "/bin/echo \"Please Wait. Gathering your System Information. This may take time\""
		puts $fid "/usr/sbin/neat >/dev/null 2>&1 &"
		puts $fid "/bin/echo \"Completed gathering Info. Please wait for a while till the Network Configurator comes up\""
		puts $fid "/bin/rm \$0"
		puts $fid "exit 0"
		close $fid
		file attributes "/tmp/neat.[pid]" -permissions 0755
		exec $configs(xterm) -e /bin/su root -c /tmp/neat.[pid]
	}
}

proc smtproutes {args} {
	global BWidget_present prgtext
	source @scriptdir@/global.tcl
	global smtproute_file
	variable smtpfr
	variable types
	set types {
		{"All files"		*}
		{"Text files"		{.txt .doc}	}
		{"Text files"		{}		TEXT}
		{"Tcl Scripts"		{.tcl}		TEXT}
		{"C Source Files"	{.c .h} }
		{"All Source Files"	{.tcl .c .h} }
		{"Image Files"		{.gif} }
		{"Image Files"		{.jpeg .jpg} }
		{"Image Files"		""		{GIFF JPEG} }
	}

	set Description "Static SMTP Routes"
	set mode [lindex $args 0]
	if {[llength $args] > 1} {
		set w [lindex $args 1]
		catch {destroy $w.fr}
	} else {
		createWindow
		focus $w
		destroy $lwin
		destroy $rwin
		wm title . $Description
		.statusBar.lab configure -text $Description
	}
	set result ""
	if {$authenticated != 1} {
		Login $mode
	}
	if {$BWidget_present == 1} {
		TitleFrame $w.fr -text $Description -side center -relief ridge -bd 2
		pack $w.fr -side top -anchor w -fill both
		set fr [$w.fr getframe]
		set lwin [frame $fr.left  -relief flat  -bd 2]
		set rwin [frame $fr.right -relief flat  -bd 2]
		pack $lwin -side left -anchor nw -expand 0 -fill x -anchor nw -in $fr
		pack $rwin -side left -anchor nw -expand 0 -fill x -anchor nw -in $fr -after $lwin
	} else {
		$w configure -relief ridge -bd 2
		pack $lwin $rwin -pady 40
	}
	## Frame 1 #######################################################################
	set smtpfr  $lwin.smtpfr
	set butfr      $lwin.buttons
	frame $smtpfr -relief flat  -bd 0
	frame $butfr     -relief flat  -bd 2
	frame $lwin.entry
	set smtproute_file "$controldir/smtproutes"
	label $lwin.entry.l -relief flat   -text "SMTP Routes File"  -bd 2
	entry $lwin.entry.e -relief sunken -textvariable smtproute_file -bd 2 -width 30 \
		-vcmd {expr {[string length %P]<=64}} -validate key -invcmd bell
	set initialdir $controldir
	button $lwin.entry.button -padx "9" -pady "3" -relief ridge \
	-command { \
		set tmpfile [tk_getOpenFile -filetypes $types -parent $lwin -initialdir $initialdir]; \
		if {$tmpfile != ""} {; \
			set smtproute_file $tmpfile; \
			set tmp [file dirname $tmpfile]; \
			if {$tmp != ""} {; \
				set initialdir $tmp; \
			}; \
		}; \
	}
	$lwin.entry.button configure -image [image create photo -data "R0lGODlhEAAQAIUAAPwCBAQCBOSmZPzSnPzChPzGhPyuZEwyHExOTFROTFxaVFRSTMSGTPT29Ozu7Nze3NTS1MzKzMTGxLy6vLS2tLSytDQyNOTm5OTi5Ly+vKyqrKSmpIyOjLR+RNTW1MzOzJyenGxqZBweHKSinJSWlExKTMTCxKyurGxubBQSFAwKDJyanERCRERGRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAQABAAAAaRQIBwGCgGhkhkEWA8HpNPojFJFU6ryitTiw0IBgRBkxsYFAiGtDodDZwPCERCEV8sEk0CI9FoOB4BEBESExQVFgEEBw8PFxcYEBIZGhscCEwdCxAPGA8eHxkUGyAhIkwHEREQqxEZExUjJCVWCBAZJhEmGRUnoygpQioZGxsnxsQrHByzQiJxz3EsLSwWpkJ+QQAh/mhDcmVhdGVkIGJ5IEJNUFRvR0lGIFBybyB2ZXJzaW9uIDIuNQ0KqSBEZXZlbENvciAxOTk3LDE5OTguIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQpodHRwOi8vd3d3LmRldmVsY29yLmNvbQA7"]
	button $lwin.entry.showall -relief raised -bd 4 -bg IndianRed
	$lwin.entry.showall configure -image [image create photo -data "R0lGODlhEAAQAIIAAPwCBDQyNAQCBPz+/PzerAAAAAAAAAAAACH5BAEAAAAALAAAAAAQABAAAAMmCLrc/i1IAVkYg1Z1iRYUKCqitp1oikqBWV3ZOnhkWNagqu+qnwAAIf5oQ3JlYXRlZCBieSBCTVBUb0dJRiBQcm8gdmVyc2lvbiAyLjUNCqkgRGV2ZWxDb3IgMTk5NywxOTk4LiBBbGwgcmlnaHRzIHJlc2VydmVkLg0KaHR0cDovL3d3dy5kZXZlbGNvci5jb20AOw=="]
	balloonHelp $lwin.entry.showall  "Show/Hide Columns"
	pack $lwin.entry $smtpfr $butfr -side top -fill none -anchor nw
	pack $lwin.entry.l $lwin.entry.e $lwin.entry.button -side left
	pack $lwin.entry.showall -side left
	scrollbar $smtpfr.vsb -orient vertical   -trough black -command [list $smtpfr.listbox yview]
	scrollbar $smtpfr.hsb -orient horizontal -trough black -command [list $smtpfr.listbox xview]
	mclistbox $smtpfr.listbox \
	    -bd 0 \
		-font "Terminal" \
	    -height 10 \
	    -width 85 \
	    -labelanchor w \
	    -columnrelief flat \
	    -columnborderwidth 2 \
	    -labelborderwidth 2 \
		-resizablecolumn 1 \
	    -selectmode single \
		-selectcommand "smtprouteSelect" \
	    -xscrollcommand [list $smtpfr.hsb set] \
	    -yscrollcommand [list $smtpfr.vsb set]
	bind $smtpfr.listbox <<ListboxSelect>> {
		focus $smtpfr.listbox
	}
	bind $smtpfr.listbox  <Double-ButtonPress-1> {
		set count [llength [$smtpfr.listbox get 0 end]]
		if {$count > 0} {
			set li [expr %y / 16]
			if {$li >= $count} {
				set li [expr $count - 1]
			}
			$smtpfr.listbox selection clear 0 end
			$smtpfr.listbox selection set $li
			$smtpfr.listbox activate $li
		}
		showmenuSmtproute $smtpfr.listbox [$smtpfr.listbox get $li] \
			[::mclistbox::convert %W -x %x] \
			[::mclistbox::convert %W -y %y]  %X %Y 
	}
	bind $smtpfr.listbox <ButtonPress-3> {
		set count [llength [$smtpfr.listbox get 0 end]]
		if {$count > 0} {
			set li [expr %y / 16]
			if {$li >= $count} {
				set li [expr $count - 1]
			}
			$smtpfr.listbox selection clear 0 end
			$smtpfr.listbox selection set $li
			$smtpfr.listbox activate $li
		} else {
			set li -1
		}
		showmenuSmtproute $smtpfr.listbox [$smtpfr.listbox get $li] \
	   		[::mclistbox::convert %W -x %x] \
			[::mclistbox::convert %W -y %y]  %X %Y 
	}
	$smtpfr.listbox column add domain -label "Domain"     -width 25
	$smtpfr.listbox column add ipaddr -label "IP Address" -width 20
	$smtpfr.listbox column add port   -label "SMTP Port"  -width 10
	$smtpfr.listbox column add user   -label "Username"   -width 30
	$smtpfr.listbox column add pass   -label "Password"   -width 10

	$smtpfr.listbox label bind domain <ButtonPress-1> "listboxsort %W domain"
	$smtpfr.listbox label bind ipaddr <ButtonPress-1> "listboxsort %W ipaddr"
	$smtpfr.listbox label bind port   <ButtonPress-1> "listboxsort %W port"
	$smtpfr.listbox label bind user   <ButtonPress-1> "listboxsort %W user"
	$smtpfr.listbox label bind pass   <ButtonPress-1> "listboxsort %W pass"
	$lwin.entry.showall configure -command {showContextMenu $smtpfr.listbox}

	pack $smtpfr.hsb     -side bottom -fill x
	pack $smtpfr.vsb     -side right  -fill y
	pack $smtpfr.listbox -side left -expand 1 -fill both
	$smtpfr.listbox column configure pass -visible false

	button $butfr.run  -text ListRoutes -bg Orange      -command {run_smtproutes $smtproute_file $smtpfr.listbox} -bd 5 \
		-highlightthickness 5 -highlightbackground black
	if {[llength $args] == 1} {
		button $butfr.quit -text Cancel -bg IndianRed   -command "destroyWindows;return" -bd 5 \
			-highlightthickness 5 -highlightbackground black
		pack $butfr.run $butfr.quit -side left -expand 0 -anchor nw -fill none
	} else {
		pack $butfr.run -side left -expand 0 -anchor nw -fill none
	}
	run_smtproutes $smtproute_file $smtpfr.listbox
}

proc smtprouteSelect {args} {
	global smtproute_line

	set smtproute_line $args
}

proc showmenuSmtproute {dbwin line x y rootx rooty} {
	global w

	if [winfo exists .pm1] {
		destroy .pm1
	}
	$dbwin configure -state disabled
	menu .pm1 -tearoff 0 -borderwidth 1
	.pm1 add command -label "Add    Route" \
		-command "getSmtprouteInput add $dbwin $x $y"
	set count [llength $line]
	if {$count > 0} {
		.pm1 add command -label "Modify Route" \
			-command "getSmtprouteInput mod $dbwin $x $y $line"
		.pm1 add command -label "Delete Route" \
			-command "getSmtprouteInput del $dbwin $x $y $line"
	}
	.pm1 add command -label "Cancel     " -command "$dbwin configure -state normal;return 0"
	showContextMenu1 \
		$dbwin \
		$x $y $rootx $rooty \
		.pm1
	.pm1 post [winfo pointerx $w] [winfo pointery $w]
}

proc getSmtprouteInput {mod dwin x y args} {
	global BWidget_present
	source @scriptdir@/global.tcl
	variable base
	variable dbwin
	variable mode
	variable my_domain 
	variable my_ipaddr 
	variable my_port 
	variable my_user 
	variable my_pass
	set dbwin $dwin
	set mode $mod

	$dbwin configure -state normal
	set base .f1
	catch {destroy $base}
	toplevel $base -class Toplevel -bd 2 -highlightthickness 2 -highlightbackground black -takefocus 1 -relief flat
	wm focusmodel $base passive
	wm geometry $base +${x}+${y}
	wm geometry $base 400x200
	wm maxsize $base 500 250
	wm minsize $base 1 1
	wm overrideredirect $base 1
	wm resizable $base 1 1
	wm title $base "SMTP Routes"
	grab $base

	set Description "SMTP Routes"
	if {$BWidget_present == 1} {
		TitleFrame $base.fr -text $Description -side center -relief ridge -bd 2
		pack $base.fr -side top -anchor w -fill both
		set fr [$base.fr getframe]
	} else {
		set fr $base
	}
	set my_domain [lindex $args 0]
	set my_ipaddr [lindex $args 1]
	set my_port   [lindex $args 2]
	set my_user   [lindex $args 3]
	set my_pass   [lindex $args 4]
	frame $fr.1
	frame $fr.2
	frame $fr.3
	frame $fr.4
	frame $fr.5
	frame $fr.6
	pack $fr.1 $fr.2 $fr.3 $fr.4 $fr.5 -side top -expand 1 -fill x
	pack $fr.6 -side top -expand 1 -fill x -pady 5

	label $fr.1.l -text "Domain" -width 15
	entry $fr.1.e -textvariable my_domain \
		-vcmd {expr {[string length %P]<=64}} -validate key -invcmd bell
	pack $fr.1.l -side left -anchor nw
	pack $fr.1.e -side left -anchor nw -fill x -expand 1

	label $fr.2.l -text "IP Address" -width 15
	entry $fr.2.e -textvariable my_ipaddr \
		-vcmd {regexp {^[0-9.]*$} %P} -validate key -invcmd bell
	pack $fr.2.l $fr.2.e -side left -anchor nw

	label $fr.3.l -text "Port" -width 15
	if {$BWidget_present} {
		SpinBox $fr.3.e -relief sunken -textvariable my_port -width 5 -range {25 65534 1} \
			-vcmd {regexp {^[0-9]*$} %P} -validate key -invcmd bell
	} else {
		entry $fr.3.e   -relief sunken -textvariable my_port -width 5 \
			-vcmd {regexp {^[0-9]*$} %P} -validate key -invcmd bell
	}
	pack $fr.3.l $fr.3.e -side left -anchor nw

	label $fr.4.l -text "User" -width 15
	entry $fr.4.e -textvariable my_user \
		-vcmd {expr {[string length %P]<=32}} -validate key -invcmd bell
	pack $fr.4.l -side left -anchor nw
	pack $fr.4.e -side left -anchor nw -fill x -expand 1
	
	label $fr.5.l -text "Pass" -width 15
	entry $fr.5.e -textvariable my_pass -show * -width 10 \
		-vcmd {expr {[string length %P]<=16}} -validate key -invcmd bell
	pack $fr.5.l $fr.5.e -side left -anchor nw

	button $fr.6.b1 -text Submit -bg orange    -bd 4 -highlightthickness 5 -highlightbackground black \
		-command {repostSmtpRoute $base $mode $dbwin $my_domain $my_ipaddr $my_port $my_user $my_pass}
	button $fr.6.b2 -text Cancel -bg IndianRed -bd 4 -highlightthickness 5 -highlightbackground black \
		-command "wm withdraw $base;grab release $base;return 0"
	pack $fr.6.b1 $fr.6.b2 -side left -anchor nw
	if {$mode == "del"} {
		$fr.1.e configure -state disabled
		$fr.2.e configure -state disabled
		$fr.3.e configure -state disabled
		$fr.4.e configure -state disabled
		$fr.5.e configure -state disabled
	} else {
		$fr.1.e configure -state normal
		$fr.2.e configure -state normal
		$fr.3.e configure -state normal
		$fr.4.e configure -state normal
		$fr.5.e configure -state normal
	}
}

proc repostSmtpRoute {base mode dbwin mydomain myipaddr myport myuser mypass} {
	global smtproute_file result

	if {$mode == "del"} {
		wm withdraw $base
		grab release $base
		set msg "You are About to Delete [$dbwin get active]\nAre you sure you want to do this?\nClick OK to continue"
		set action [msg_dialog .d {Confirm Deletion} $msg @imagedir@/warning.gif 0 "OK"]
		wm deiconify $base
		grab $base
		if {$action != 1} {
			return 0
		}
	}
	set ind -1
	if {$mode != "add"} {
		set ind [$dbwin curselection]
		if {$ind == -1 || $ind == ""} {
			$dbwin delete active
		} else {
			$dbwin delete $ind
		}
	}
	if {$mode == "add" || $mode == "mod"} {
		if {$ind == -1 || $ind == ""} {
			$dbwin insert end [list $mydomain $myipaddr $myport $myuser $mypass]
		} else {
			$dbwin insert $ind [list $mydomain $myipaddr $myport $myuser $mypass]
		}
	}
	if {[catch {open "/tmp/smtproute.[pid]" w} fid] } {
		msg_dialog .d "smtproutes" $fid @imagedir@/warning.gif 0 "OK"
		return 1
	}
	set ind 0
	set max [$dbwin size]
	while { $ind < $max } {
		set line [$dbwin get $ind]
		set my_domain [lindex $line 0]
		set my_ipaddr [lindex $line 1]
		set my_port   [lindex $line 2]
		set my_user   [lindex $line 3]
		set my_pass   [lindex $line 4]
		puts -nonewline $fid "$my_domain:$my_ipaddr:$my_port"
		if {$my_user != ""} {
			puts $fid " [encode $my_user] [encode $my_pass]"
		} else {
			puts $fid ""
		}
		incr ind
	}
	if {[catch {close $fid} result] != 0} {
		msg_dialog .d "smtproutes" $result @imagedir@/warning.gif 0 "OK"
		return 1
	}
	if {[catch {file rename -force "/tmp/smtproute.[pid]" $smtproute_file} result] == 0} {
		wm withdraw $base
		grab release $base
		msg_dialog .d "smtproutes" "smtproutes Modified" @imagedir@/warning.gif 0 "OK"
		return 0
	} else {
		msg_dialog .d "smtproutes" $result @imagedir@/warning.gif 0 "OK"
		return 1
	}
}

proc run_smtproutes {smtproute_file dbwin} {
	global BWidget_present prgtext
	source @scriptdir@/global.tcl

	if {[catch {open $smtproute_file r} f]} {
		return 0
	}
	set data [read $f]
	close $f
	set datalist [split $data "\n"]
	set line_count [llength $datalist]
	$dbwin delete 0 end
	for {set i 0} {$i < $line_count} {incr i} {
		if {[lindex $datalist $i] == ""} {
			continue
		}
		set tmp1 [split [lindex $datalist $i] ":"]
		set tmp2 [split [string trim [lindex $tmp1 2]] " "]
		set tmp_domain "[string trim [lindex $tmp1 0]]"
		set tmp_ipaddr "[string trim [lindex $tmp1 1]]"
		set tmp_port   "[string trim [lindex $tmp2 0]]"
		set tmp_user   "[decode [string trim [lindex $tmp2 1]]]"
		set tmp_pass   "[decode [string trim [lindex $tmp2 2]]]"
		$dbwin insert end [list $tmp_domain $tmp_ipaddr $tmp_port $tmp_user $tmp_pass]
		$dbwin yview scroll 1 units
	}
}
proc hands {} {
	global twopi

	catch { .c.clock delete withtag hands }
	# Compute seconds since midnight
	set tmval [clock seconds]
	set s [expr {$tmval - [clock scan 00:00:00]}]
	set clockval [clock format $tmval -format "%a %b %d %H:%M:%S %Z %Y"]
	.statusBar.foo configure -text $clockval
	# Angle of second hand
	set angle [expr { $s * $::twopi / 60. }]
	set y [expr { 100 - 90 * cos($angle) }]
	set x [expr { 100 + 90 * sin($angle) }]
	.c.clock create line 100 100 $x $y -width 1 -tags hands
	# Minute hand
	set angle [expr { $s * $::twopi / 60. / 60. }]
	set y [expr { 100 - 85 * cos($angle) }]
	set x [expr { 100 + 85 * sin($angle) }]
	.c.clock create line 100 100 $x $y -arrow last -width 2 -capstyle projecting -tags  hands -fill blue4
	# Hour hand
	set angle [expr { $s * $::twopi / 60. / 60. / 12. }]
	set y [expr { 100 - 60 * cos($angle) }]
	set x [expr { 100 + 60 * sin($angle) }]
	.c.clock create line 100 100 $x $y -arrow last -width 4 -capstyle projecting -tags hands -fill blue4
	after 1000 hands
}

proc madClock {mode} {
	source @scriptdir@/global.tcl
	global twopi interval
	global loadcheck

	if {$mode == 0} {
		pack forget .c
		return 0
	} elseif {$mode == 1} {
		if {[winfo exists .b]} {
			pack forget .b
		}
		if {[winfo exists .search]} {
			pack forget .search
		}
		if {[winfo exists .v]} {
			pack forget .v
		}
		if {[winfo exists .status]} {
			pack forget .status
		}
		if {[winfo exists .b]} {
			pack .b -fill x -expand no  -side top -anchor nw
		}
		if {[winfo exists .c]} {
			pack .c -side right -fill both -anchor se
		}
		if {[winfo exists .search]} {
			pack .search -fill x -expand no -side top -anchor nw
		}
		if {[winfo exists .v]} {
			pack .v -fill both -expand yes -side top -anchor nw
		}
		if {[winfo exists .status]} {
			pack .status -fill x -expand yes -side left -anchor nw
		}
		return 0
	}
	frame .c
	pack .c -side top -anchor ne -fill y
	checkbutton .c.c  -highlightbackground black \
		-text "Indium Load Monitor" -bg $menubarcolor \
		-variable loadcheck -command { \
			if {$loadcheck == 1} {
				pack forget .c.l
				pack .c.1 -fill both -expand 1
			} else {
				pack forget .c.1
				pack .c.l
			}
		}
	pack .c.c -side top -fill x -expand 1

	frame .c.1
	pack .c.1 -side top -expand 1 -fill both
	text .c.1.text \
		-width 20 \
		-height 14 \
		-wrap none -bd 2 \
		-relief sunken \
		-insertofftime 0 \
		-background DeepSkyBlue4 \
		-xscrollcommand ".c.1.scrollx set" \
		-yscrollcommand ".c.1.scrolly set"
	scrollbar .c.1.scrolly -orient vertical -trough black -command {.c.1.text yview}
	scrollbar .c.1.scrollx -orient horiz    -trough black -command {.c.1.text xview}
	pack .c.1.scrolly -side right  -fill y -anchor ne
	pack .c.1.scrollx -side bottom -fill x -anchor sw
	pack .c.1.text -fill x
	.c configure -bg black
	if {[file exist @imagedir@/pwrdLogo150.gif]} {
		label .c.l
		.c.l config -image [image create photo -file @imagedir@/pwrdLogo150.gif] -bg black
		pack .c.l -side top -fill y
	}
	if {$loadcheck == 1} {
		pack forget .c.l
	}
	#pack [canvas .c.clock -width 200 -height 205 -bd 0 -relief flat -bg #0C104A] -side bottom -fill both -anchor se
	pack [canvas .c.clock -width 200 -height 205 -bd 0 -relief flat -bg black] -side bottom -fill both -anchor se
	set halfpi 1.570796
	set piover6 0.5235987
	set twopi 6.283185
	.c.clock create oval 2 2 198 198 -fill green -outline red -width 2
	if {[file exist @imagedir@/indimaillogo_small.gif]} {
		image create photo indimaillogo -file @imagedir@/indimaillogo_small.gif
		.c.clock create image 97 120 -image indimaillogo
	}
	for { set h 1 } { $h <= 12 } { incr h } {
		set angle [expr { $halfpi - $piover6 * $h }]
		set x [expr { 100 + 90 * cos($angle) }]
		set y [expr { 100 - 90 * sin($angle) }]
		.c.clock create text $x $y -text $h -font {Helvetica -12}
	}
	hands
}

proc qmailAdv {mode} {
	global w BWidget_present prgtext real_domain
	source @scriptdir@/global.tcl
	variable cmd
	variable mycmd
	variable arguments
	variable twin1
	variable twin2
	variable bwin1
	variable flag1
	variable flag2
	variable output_desc
	set result ""
	set w .dname
	set flag1 1
	set flag2 0

	destroyFirstPage
	if {$authenticated != 1} {
		Login $mode
	} 
	set Description "Advanced Tools"
	if {$BWidget_present == 1} {
		set   pw  [PanedWindow $w -weights available -side top]
		pack $pw  -expand 1 -fill both
		set pane1  [$pw add -weight 50 -minsize 40]
		set pane2  [$pw add -weight 50 -minsize 40]
		set lf [TitleFrame $pane1.f1 -text $Description -side center -relief ridge -bd 2]
		pack $lf -padx 20 -pady 20 -side top -anchor nw -expand 1 -fill x
		set fr [$lf getframe]
		set twin1 [frame $fr.1]
		set twin2 [frame $fr.2]
		set tmp   [frame $fr.b]
		pack $twin1 -side top -anchor nw -expand 1 -fill x
		pack $twin2 -side top -anchor nw -expand 1 -fill x
		pack $tmp   -side top -anchor nw
		set bwin1 [frame $tmp.1 -bd 0]
		set bwin2 [frame $tmp.2 -bd 0]
		pack $bwin1 $bwin2 -side left -anchor nw
		set dwin $pane2.debug
	} else {
		frame $w -relief ridge -bd 2
		pack $w -side left -expand 1 -fill both -anchor nw
		frame $w.left -relief ridge -bd 2
		frame $w.right
		pack $w.left  -side left -anchor nw -expand 1 -fill x
		pack $w.right -side left -anchor nw -expand 1 -fill both
		set twin1 [frame $w.left.1 -relief flat]
		set twin2 [frame $w.left.2 -relief flat]
		set tmp   [frame $w.left.b -relief flat]
		pack $twin1 -side top -anchor nw -expand 1 -fill x
		pack $twin2 -side top -anchor nw -expand 1 -fill x
		pack $tmp   -side top -anchor nw
		set bwin1 [frame $tmp.1 -bd 0]
		set bwin2 [frame $tmp.2 -bd 0]
		pack $bwin1 $bwin2 -side left -anchor nw
		set dwin $w.right.debug
	}
	wm title . $Description
	.statusBar.lab configure -text $Description
	bind . <F1> {doHelp moddomain}
	text_create $Description 1 40 25

	label $twin1.label -relief flat -text "Arguments" -bd 2
	entry $twin1.entry -relief sunken -textvariable arguments -bd 2 \
		-vcmd {expr {[string length %P]<=64}} -validate key -invcmd bell
	bind $twin1.entry <Return> {$bwin1.2.run invoke}
	pack $twin1.label -side left -expand 0 -anchor nw
	pack $twin1.entry -side left -expand 1 -fill x -anchor nw
	entry $twin2.entry -relief sunken -textvariable mycmd -bd 2 \
		-state disabled
	pack $twin2.entry -side left -expand 1 -fill x -anchor nw

	if {$BWidget_present == 1} {
		TitleFrame $bwin1.opts -text "IP Options"    -side center -relief sunken -bd 2
		TitleFrame $bwin2.opts -text "Queue Options" -side center -relief sunken -bd 2
		pack $bwin1.opts $bwin2.opts -side top -anchor w
		set opframe1 [$bwin1.opts getframe]
		set opframe2 [$bwin2.opts getframe]
	} else {
		frame $bwin1.opts -relief ridge -bd 2
		pack $bwin1.opts -side top -anchor w
		set opframe1 $bwin1.opts
		set opframe2 $bwin2.opts
	}
	radiobutton $opframe1.1 -value 1 -variable flag1 -text "IP Info" \
		-command { \
			set flag2 0; \
			set arguments ""; \
			set output_desc "Local IP Addresses"; \
			$bwin1.2.run configure -text "Info"; \
			$bwin1.2.run configure -cursor {}; \
			set cmd "exec @prefix@/bin/ipmeprint"; \
			set mycmd "$cmd $arguments"; \
			$bwin1.1.queue configure -state disabled; \
		}
	radiobutton $opframe1.2 -value 2 -variable flag1 -text "DNS cname" \
		-command { \
			set flag2 0; \
			set arguments ""; \
			set output_desc "DNS cnames"; \
			$bwin1.2.run configure -text "DNS cname"; \
			$bwin1.2.run configure -cursor {}; \
			set cmd "exec @prefix@/sbin/dnscname"; \
			set mycmd "$cmd $arguments"; \
			$bwin1.1.queue configure -state disabled; \
		}
	radiobutton $opframe1.3 -value 3 -variable flag1 -text "DNS ptr" \
		-command { \
			set flag2 0; \
			set arguments ""; \
			set output_desc "DNS ptrs"; \
			$bwin1.2.run configure -text "DNS ptr"; \
			$bwin1.2.run configure -cursor {}; \
			set cmd "exec @prefix@/sbin/dnsptr"; \
			set mycmd "$cmd $arguments"; \
			$bwin1.1.queue configure -state disabled; \
		}
	radiobutton $opframe1.4 -value 4 -variable flag1 -text "DNS fq" \
		-command { \
			set flag2 0; \
			set arguments ""; \
			set output_desc "DNS Fully Qualified Name"; \
			$bwin1.2.run configure -text "DNS fq"; \
			$bwin1.2.run configure -cursor {}; \
			set cmd "exec @prefix@/sbin/dnsfq"; \
			set mycmd "$cmd $arguments"; \
			$bwin1.1.queue configure -state disabled; \
		}
	radiobutton $opframe1.5 -value 5 -variable flag1 -text "DNS ip" \
		-command { \
			set flag2 0; \
			set arguments ""; \
			set output_desc "DNS IP Addresses"; \
			$bwin1.2.run configure -text "DNS ip"; \
			$bwin1.2.run configure -cursor {}; \
			set cmd "exec @prefix@/sbin/dnsip"; \
			set mycmd "$cmd $arguments"; \
			$bwin1.1.queue configure -state disabled; \
		}
	radiobutton $opframe1.6 -value 6 -variable flag1 -text "DNS mxip" \
		-command { \
			set flag2 0; \
			set output_desc "DNS MX IP Addresses"; \
			set arguments ""; \
			$bwin1.2.run configure -text "DNS mxip"; \
			$bwin1.2.run configure -cursor {}; \
			set cmd "exec @prefix@/sbin/dnsmxip"; \
			set mycmd "$cmd $arguments"; \
			$bwin1.1.queue configure -state disabled; \
		}
	pack $opframe1.1 $opframe1.2 $opframe1.3 $opframe1.4 $opframe1.5 $opframe1.6 -side top -anchor w
	radiobutton $opframe2.1 -value 1 -variable flag2 -text "Queue Info" \
		-command { \
			set flag1 0; \
			set arguments ""; \
			set output_desc "Queued Mail Stats"; \
			$bwin1.2.run configure -text "Queue Info"; \
			$bwin1.2.run configure -cursor {}; \
			set cmd "exec @prefix@/bin/qmail-qread"; \
			set mycmd "$cmd $arguments"; \
			$bwin1.1.queue configure -state disabled; \
		}
	balloonHelp $opframe2.1 \
"qmail-qread \[options\] queue_dir
 -l		list local message queue
 -r		list remote message queue
 -c		show some statistics
"

	radiobutton $opframe2.2 -value 2 -variable flag2 -text "Queue Read" \
		-command { \
			set flag1 0; \
			set arguments ""; \
			set output_desc "Queued Mail Information"; \
			$bwin1.2.run configure -text "Queue Read"; \
			$bwin1.2.run configure -cursor {}; \
			set cmd "exec @prefix@/bin/qmail-qread"; \
			set mycmd "$cmd $arguments"; \
			$bwin1.1.queue configure -state disabled; \
		}
	radiobutton $opframe2.3 -value 3 -variable flag2 -text "Queue Print" \
		-command { \
			set flag1 0; \
			set arguments ""; \
			set output_desc "Queued Mail Headers"; \
			$bwin1.2.run configure -text "Queue Print"; \
			$bwin1.2.run configure -cursor {}; \
			set cmd "exec @prefix@/bin/qpq"; \
			set mycmd "$cmd $arguments"; \
			$bwin1.1.queue configure -state disabled; \
		}
	radiobutton $opframe2.4 -value 4 -variable flag2 -text "Queue Timeouts" \
		-command { \
			set flag1 0; \
			set arguments ""; \
			set output_desc "Queued Mail Remote Timeouts"; \
			$bwin1.2.run configure -text "Queue Timeouts"; \
			$bwin1.2.run configure -cursor {}; \
			set cmd "exec @prefix@/sbin/qmail-tcpto"; \
			set mycmd "$cmd $arguments"; \
			$bwin1.1.queue configure -state disabled; \
		}
	radiobutton $opframe2.5 -value 5 -variable flag2 -text "Queue Fix" \
		-command { \
			set flag1 0; \
			set arguments ""; \
			set output_desc "Queue Fix"; \
			$bwin1.2.run configure -text "Queue Fix"; \
			$bwin1.2.run configure -cursor {}; \
			set cmd "exec @prefix@/bin/queue-fix"; \
			set mycmd "$cmd $arguments"; \
			$bwin1.1.queue configure -state normal; \
		}
	balloonHelp $opframe2.5 \
"queue-fix \[-i | -N | -v\] queue_dir
 -i	Interactive Mode
 -N	Test Mode
 -v	Verbose Mode"
	radiobutton $opframe2.6 -value 6 -variable flag2 -text "Queue RM" \
		-command { \
			set flag1 0; \
			set arguments ""; \
			set output_desc "Queue RM"; \
			$bwin1.2.run configure -text "Queue RM"; \
			$bwin1.2.run configure -cursor {}; \
			set cmd "exec @prefix@/bin/qmail-rm"; \
			set mycmd "$cmd $arguments"; \
			$bwin1.1.queue configure -state normal; \
		}
	balloonHelp $opframe2.6 \
"qmail-rm \[options\]
 -e		use extended POSIX regular expressions
 -h, -?		this help message
 -i		search case insensitively \[default: case sensitive\]
 -p <pattern>	specify the pattern to search for
 -q <queuedir>	specify the base qmail queue dir \[default: /var/qmail/queue\]
 -r		actually remove files, without this we'll only print them
 -s <split>	specify your conf-split value if non-standard \[default: 151\]
 -v		increase verbosity (can be used more than once)
 -y <yankdir>	directory to put files yanked from the queue \[default: <queuedir>/yanked\]"

	frame $opframe2.7 -bd 0
	button $opframe2.7.b -text "Reset Timeout" -command {exec @prefix@/sbin/qmail-tcpok}
	$opframe2.7.b configure -image [image create photo -data "R0lGODlhEAAQAIUAAPwCBCRaJBxWJBxOHBRGBCxeLLTatCSKFCymJBQ6BAwmBNzu3AQCBAQOBCRSJKzWrGy+ZDy+NBxSHFSmTBxWHLTWtCyaHCSSFCx6PETKNBQ+FBwaHCRKJMTixLy6vExOTKyqrFxaXDQyNDw+PBQSFHx6fCwuLJyenDQ2NISChLSytJSSlFxeXAwODCQmJBweHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAAALAAAAAAQABAAAAaBQIBQGBAMBALCcCksGA4IQkJBUDIDC6gVwGhshY5HlMn9DiCRL1MyYE8iiapaSKlALBdMRiPckDkdeXt9HgxkGhWDXB4fH4ZMGnxcICEiI45kQiQkDCUmJZskmUIiJyiPQgyoQwwpH35LqqgMKiEjq5obqh8rLCMtowAkLqovuH5BACH+aENyZWF0ZWQgYnkgQk1QVG9HSUYgUHJvIHZlcnNpb24gMi41DQqpIERldmVsQ29yIDE5OTcsMTk5OC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4NCmh0dHA6Ly93d3cuZGV2ZWxjb3IuY29tADs="]
	label $opframe2.7.l -text "Reset Timeouts"
	pack $opframe2.7.b $opframe2.7.l -side left -anchor w
	pack $opframe2.1 $opframe2.2 $opframe2.3 $opframe2.4 $opframe2.5 $opframe2.6 $opframe2.7 -side top -anchor w

	set arguments ""
	set cmd "exec @prefix@/bin/ipmeprint"		
	set output_desc "Local IP Addresses"
	set queuedirs [glob -nocomplain @indimaildir@/queue*]
	frame $bwin1.1
	frame $bwin1.2
	pack $bwin1.1 $bwin1.2 -side top -anchor nw
	ComboBox $bwin1.1.queue \
		-textvariable arguments \
		-editable true \
		-width 30 \
		-height 10 \
		-bd 2 \
		-state disabled \
		-values $queuedirs
	pack $bwin1.1.queue -side left -anchor nw -pady 5
	button $bwin1.2.run -text Info   -bg orange -bd 4 -highlightthickness 5 \
		-highlightbackground black -width 15 \
		-command { \
			set returnstatus 0; \
			if {$arguments != ""} {; \
				set mycmd "$cmd $arguments"
			} else {; \
				if {$flag1 > 1 || $flag2 == 5} {; \
					set returnstatus 1; \
					if {$flag2 == 5} {
					msg_dialog .d "$cmd" "Queue Directory required as argument" @imagedir@/warning.gif 0 "OK"; \
					} else {
					msg_dialog .d "$cmd" "Argument required" @imagedir@/warning.gif 0 "OK"; \
					}
				}; \
				set mycmd $cmd
			}; \
			if {$returnstatus == 0} {; \
				catch {$dwin.log insert end "Running command $mycmd\n"}
				runCommand $mycmd; \
				if {$returnstatus == 0} {; \
					catch {$dwin.log insert end "$output_desc\n\n"}; \
					catch {$dwin.log insert end "$result\n\n"}; \
					catch {$dwin.log yview moveto 1}; \
				} else {; \
					.statusBar.lab configure -text "$cmd: $result"; \
					msg_dialog .d "$cmd" "$result" @imagedir@/warning.gif 0 "OK"; \
				}; \
			}; \
		}
	button $bwin1.2.quit -text Cancel -bg IndianRed -command "destroyWindows;return" -bd 4 \
		-highlightthickness 5 -highlightbackground black -state normal
	pack $bwin1.2.run $bwin1.2.quit  -side left -pady 5 -expand 0 -anchor nw -fill x
}

proc showCtl {mode} {
	global BWidget_present prgtext lwin rwin
	source @scriptdir@/global.tcl
	set result ""

	createWindow
	set result ""
	focus $w
	if {$authenticated != 1} {
		Login $mode
	}
	set Description "Qmail Control Information"
	wm title . "qmailctl"
	.statusBar.lab configure -text $Description
	if {$BWidget_present == 1} {
		destroy $lwin
		destroy $rwin
		TitleFrame $w.fr -text $Description -side center -relief ridge -bd 2
		pack $w.fr -side top -anchor w -fill both
		set fr [$w.fr getframe]
		set lwin [frame $fr.left  -relief flat  -bd 2]
		set rwin [frame $fr.right -relief flat  -bd 2]
		pack $lwin -side left -anchor nw -expand 0 -fill x -anchor nw -in $fr
		pack $rwin -side left -anchor nw -expand 0 -fill x -anchor nw -in $fr -after $lwin
		set dwin $fr.debug
	} else {
		$w configure -relief ridge -bd 2
		pack $lwin $rwin -pady 40
	}

	text_create $Description 1 80 20
	progressbar $lwin.p0 -variable pc -shape 3d -width 200
	pack $lwin.p0 -side top

	button $lwin.quit -text Quit -bg IndianRed -command {destroyWindows;return} -bd 5 \
		-highlightthickness 5 -highlightbackground black -state normal
	pack $lwin.quit -side top -expand 0 -fill none -anchor nw

	set cmd "| @prefix@/bin/qmail-showctl"
	if {$BWidget_present == 1} {
		set prgtext "Hmm... I am Busy"
		progressDialog
	}
	if {[catch {open $cmd r} f] } {
		destroy .progress
		msg_dialog .d "qmailctl" $f @imagedir@/warning.gif 0 "OK"
		return 1
	}
	set count 0
	while {[gets $f line] >= 0} {
		$dwin.log insert end "$line\n"
		set count [expr $count + 1]	
		set pc [expr $count * 100 / 239]
		update
		$dwin.log yview moveto 1
		.statusBar.foo configure -text "$pc %"
	}
	set pc 100
	update
	.statusBar.foo configure -text "$pc %"
	if {$BWidget_present == 1} {
		destroy .progress
	}
	set returnstatus [catch {close $f} result]
	if {$returnstatus != 0} {
		msg_dialog .d "qmailctl" $result @imagedir@/warning.gif 0 "OK"
		return 1
	}
}

proc fetch_config {} {
	global User env

	if {[file exists $env(HOME)/etc] == 0} {
		if {[catch {file mkdir $env(HOME)/etc} result]} {
			msg_dialog .d {config} "$result" @imagedir@/warning.gif 0 "OK"
			return 1
		}
	} else {
		if {[file isdirectory $env(HOME)/etc] == 0} {
			msg_dialog .d {config} "$env(HOME)/etc is not a directory" @imagedir@/warning.gif 0 "OK"
			return 1
		}
	}
	if {[file exists @prefix@/bin/fetchmailconf]} {
		set conffile @prefix@/bin/fetchmailconf
	} 
	if {[catch {exec su $User -c "$conffile -f $env(HOME)/etc/.fetchmailrc" &} result]} {
		msg_dialog .d {config} "$result" @imagedir@/warning.gif 0 "OK"
		return 1
	}
}

proc Login {mode} {
	global BWidget_present prgtext
	source @scriptdir@/global.tcl
	global User Password option env homeList

	set authenticated 0
	set twin .login.top
	set lwin1 .login.left
	set lwin2 .login.right
	#set logincolor #bebcca
	set logincolor #d9d9d9

	if {[info exists User] == 0} {
		if {$mode == 1} {
			set User "indimail"
		} else {
			catch {set User $env(LOGNAME)}
			if {[info exists User] == 0} {
				set User "indimail"
			}
		}
	}
	if {$mode == 1} {
		set domain $default_domain
	}

	catch {destroy .login}
	set Description "Authentication"

	wm withdraw .
	toplevel .login -relief flat -borderwidth 2 -bg black
	wm protocol .login WM_DELETE_WINDOW {exit}
	wm title .login $Description
	wm geometry .login "=480x259"
	wm resizable .login 0 0
	SetIcon .login $option(icon)

	catch {.statusBar.lab configure -text $Description}
	frame $twin  -relief flat
	pack $twin  -side top -anchor nw
	frame $lwin1 -relief flat
	pack $lwin1 -side left -anchor nw
	if {$BWidget_present == 1} {
		TitleFrame $lwin2 -text Authentication -side center -relief sunken -bd 0 -bg $logincolor
		pack $lwin2 -side left -expand 1 -fill both -anchor nw
		set fr [$lwin2 getframe]
	} else {
		set fr [frame $lwin2 -relief ridge -bd 2 -bg $logincolor]
		pack $lwin2 -side left -expand 1 -fill both -anchor nw
	}
	if {[file exist @imagedir@/loginleft.gif]} {
		image create photo loginlt -file @imagedir@/loginleft.gif
		label $lwin1.pic -width 146 -height 259 -image loginlt
		pack $lwin1.pic -side left -anchor nw
	}
	if {$mode == 1} {
		if {[file exist @imagedir@/logintop.gif]} {
			image create photo logintop -file @imagedir@/logintop.gif
			label $twin.logo -width 475 -height 27 -image logintop
			pack $twin.logo
		}
	} else {
		if {[file exist @imagedir@/logintop.gif]} {
			image create photo logintop -file @imagedir@/logintop.gif
			label $twin.logo -width 475 -height 27 -image logintop
			pack $twin.logo
		}
	}
	frame $fr.1 -bg $logincolor
	frame $fr.2 -bg $logincolor
	frame $fr.3 -bg $logincolor
	frame $fr.4 -bg $logincolor
	frame $fr.5 -bg $logincolor
	frame $fr.6 -bg $logincolor
	frame $fr.7 -bg $logincolor
	frame $fr.8 -bg $logincolor
	pack $fr.1 $fr.2 $fr.3 $fr.4 $fr.5 $fr.6 $fr.7 $fr.8 -side top -expand 1 -fill both

	label $fr.1.userl -relief flat -text Username -width 15 -bg $logincolor
	set homeList {}
	set userList {}
	if {$mode == 1} {
		set User "postmaster"
		set len1 [string length "$env(HOME)/.indimail/"]
		foreach line [glob -nocomplain $env(HOME)/.indimail/*.indiumrc] {
			set len2 [string length $line]
			incr len2 -8
			lappend  userList [string range $line $len1 $len2]
		}
		ComboBox $fr.1.user \
			-textvariable User \
			-editable true \
			-highlightthickness 1 \
			-borderwidth 2 \
			-values $userList
	} else {
		combobox $fr.1.user \
			-textvariable User \
			-editable false \
			-highlightthickness 1 \
			-value $User \
			-width 14 \
			-maxheight 5 \
			-state normal \
			-borderwidth 2 \
			-command "setHomeValue $fr.1.user"

		if {[catch {open {| cut -d: -f6 /etc/passwd} r} f] } {
			msg_dialog .d {Login} $f @imagedir@/warning.gif 0 "OK"
			return 1
		}
		set homeList [read $f]
		close $f
		if {[catch {open {| cut -d: -f1 /etc/passwd} r} f] } {
			msg_dialog .d {Login} $f @imagedir@/warning.gif 0 "OK"
			return 1
		} else {
			while {[gets $f line] >= 0} {
				$fr.1.user list insert end $line
			}
			set returnstatus [catch {close $f} result]
			if {$returnstatus != 0} {
				msg_dialog .d {Login} $result @imagedir@/warning.gif 0 "OK"
				return 1
			}
		}
	}
	pack $fr.1.userl $fr.1.user -side left

	label $fr.2.passwordl -relief flat   -text Password -width 15 -bg $logincolor
	entry $fr.2.password  -relief sunken -textvariable Password -bd 2 -show * -bg $logincolor \
		-vcmd {expr {[string length %P]<=16}} -validate key -invcmd bell
	pack $fr.2.passwordl $fr.2.password -side left
	if {[file exist @imagedir@/passwd.gif]} {
		label $fr.2.image -bg $logincolor
		$fr.2.image configure -image [image create photo -file @imagedir@/passwd.gif]
		pack $fr.2.image -side left
	}
	
	if {$mode == 1} {
		label $fr.3.domainl -relief flat -text Domain -width 15 -bg $logincolor
		combobox $fr.3.domain \
		-textvariable domain \
		-editable false \
		-bd 2 \
		-bg $logincolor \
		-command "setServerVal $fr.4.server"
		if {$mode == 1} {
			foreach line $domain_list {
				$fr.3.domain list insert end $line
			}
		}
		pack $fr.3.domainl $fr.3.domain -side left
	
		label $fr.4.serverl   -relief flat -text Server -width 15 -bg $logincolor
		combobox $fr.4.server \
		-textvariable adminhost \
		-editable false \
		-bg $logincolor \
		-bd 2 
		pack $fr.4.serverl $fr.4.server -side left
	}

	if {$mode == 1} {
		set cindex [$fr.3.domain curselection]
		$fr.3.domain select $cindex
		setServerVal $fr.4.server .login $domain
	}

	if {$mode == 1} {
		label $fr.5.adminuserl -relief flat   -text "Admin User" -width 15 -bg $logincolor
		entry $fr.5.adminuser  -relief sunken -textvariable adminuser -bd 2 -bg $logincolor \
			-vcmd {expr {[string length %P]<=32}} -validate key -invcmd bell
		pack $fr.5.adminuserl $fr.5.adminuser -side left

		label $fr.6.adminpassl -relief flat   -text "Admin Password" -width 15 -bg $logincolor
		entry $fr.6.adminpass  -relief sunken -textvariable adminpass -show * -bd 2 -bg $logincolor \
			-vcmd {expr {[string length %P]<=16}} -validate key -invcmd bell
		pack $fr.6.adminpassl $fr.6.adminpass -side left

		label $fr.7.adminportl -relief flat   -text "Admin Port" -width 15 -bg $logincolor
		if {$BWidget_present == 1} {
		SpinBox $fr.7.adminport  -relief sunken -textvariable adminport -bd 2 -width 5 -range {101 65534 1} -bg $logincolor \
			-vcmd {regexp {^[0-9]*$} %P} -validate key -invcmd bell
		} else {
		entry   $fr.7.adminport  -relief sunken -textvariable adminport -bd 2 -bg $logincolor \
			-vcmd {regexp {^[0-9]*$} %P} -validate key -invcmd bell
		}
		pack $fr.7.adminportl $fr.7.adminport -side left
	}

	button $fr.8.run  -text Login  -bg $bgColor -activebackground DarkOliveGreen -command "authenticate $mode"
	if {[file exist @imagedir@/buttonlogin.gif]} {
		$fr.8.run configure -image [image create photo -file @imagedir@/buttonlogin.gif]
	}
	button $fr.8.quit -text Exit -bg $bgColor -activebackground SaddleBrown -command exit
	if {[file exist @imagedir@/buttonexit.gif]} {
		$fr.8.quit configure -image [image create photo -file @imagedir@/buttonexit.gif]
	}
	if {$mode == 1} {
		foreach win "$fr.1.user $fr.2.password $fr.5.adminuser $fr.6.adminpass" {
			bind $win <Return> "authenticate $mode"
		}
	} else {
		foreach win "$fr.1.user $fr.2.password" {
			bind $win <Return> "authenticate $mode"
		}
	}
	pack $fr.8.run  -side left  -anchor w
	pack $fr.8.quit -side right -anchor e
	focus $fr.2.password

	# have the insertion cursor at the end
	$fr.2.password  icursor [string length $Password]
	if {$mode == 1} {
		$fr.5.adminuser icursor [string length $adminuser]
		$fr.6.adminpass icursor [string length $adminpass]
	}
	if {$mode == 2} {
		$fr.1.user      icursor [string length $User]
	}
	setGrab .login
}

proc setHomeValue {parent curwin username} {
	global env homeList
	source @scriptdir@/global.tcl

	set uindex [$curwin list index active]
	if {[llength $homeList] > 0} {
		set env(HOME) [lindex $homeList $uindex]
	}
}

proc authenticate {mode} {
	global clockmode
	source @scriptdir@/global.tcl
	global User Password env
	global logfile fileSize
	variable t_server

	set authenticated 0
	if {[string length $User] <= 0} {
		msg_dialog .d {Invalid User} {Username value not given} @imagedir@/warning.gif 0 "OK"
		return 1
	}
	if {[string length $Password] <= 0} {
		msg_dialog .d {Invalid Password} {Password value not given} @imagedir@/warning.gif 0 "OK"
		return 1
	}
	if {$mode == 1} {
		if {[string length $domain] <= 0} {
			msg_dialog .d {Invalid Domain} {Domain value not given} @imagedir@/warning.gif 0 "OK"
			return 1
		}
		catch {exec @libexecdir@/pwhelper $User@$domain $Password @prefix@/sbin/vchkpass /bin/false} result
	} else {
		catch {exec @libexecdir@/pwhelper $User $Password @prefix@/sbin/systpass /bin/false} result
	}
	if {[string length $result] == 0 } {
		if {$mode == 1} {
			menuStatus disabled
			if {$User != "postmaster"} {
				if {$is_distributed($domain)} {
					if {[catch {exec @prefix@/bin/vuserinfo $User@$domain | grep "Sql Database" | awk {{print $4}}} result]} {
						msg_dialog .d "Userinfo" $result @imagedir@/warning.gif 0 "OK"
					}
					set t_server $result
				} else {
					set t_server $adminhost
				}
				if {[catch {sql connect $t_server $mysql_user $mysql_pass} result]} {
					catch {destroy .progress}
					msg_dialog .d "MySQL Connect" $result @imagedir@/warning.gif 0 "OK"
					return 1
				}
				if {[catch {sql selectdb indimail} result]} {
					catch {destroy .progress}
					msg_dialog .d "MySQL SelectDB" $result @imagedir@/warning.gif 0 "OK"
					sql disconnect
					return 1
				}
				set sql_statement "SELECT pw_gid FROM indimail where pw_name=\"$User\" and pw_domain=\"$domain\""
				set returnstatus [catch {sql $sql_statement} result]
				if {$returnstatus != 0} {
					msg_dialog .d "MySQL Query" $result @imagedir@/warning.gif 0 "OK"
					sql disconnect
					return 1
				}
				sql disconnect
				set admin_priv 0
				foreach row $result {
					if {$row & 0x80} {
						set admin_priv 1
						break
					}
				}
				if {$admin_priv == 0} {
					set Password ""
					msg_dialog .d {Login Failed} {Insufficient Privilege} @imagedir@/warning.gif 0 "OK"
					return 1
				}
			}
		}
		set exists [winfo exists .login]
		if $exists {destroy .login}
		set authenticated 1
		catch {.statusBar.lab configure -text "Authentication Successful"}
		releaseGrab .login
		set x [expr {[winfo screenwidth .]/2 - [winfo reqwidth .]/2 - [winfo vrootx .]}]
		set y [expr {[winfo screenheight .]/2 - [winfo reqheight .]/2 - [winfo vrooty .]}]
		if {$mode == 1} {
			menuStatus normal
		}
		wm deiconify .
		loadPreferences
		madClock $clockmode
		if {$mode == 1} {
			activityLog $User@$domain indium
		} else {
			activityLog $User lite
		}
		if {[info exists logfile] && $logfile != ""} {
			set fileSize 0
			loadFile $logfile
		}
		return 0
	} else {
		set Password ""
		if {$mode == 1} {
			menuStatus disabled
		}
		msg_dialog .d {Login Failed} "$result" @imagedir@/warning.gif 0 "OK"
	}
	return 1
}

proc menuStatus {status} {
	catch {.mbar1.admin.domain entryconfigure 1 -state $status}
	catch {.mbar1.admin.domain entryconfigure 2 -state $status}
	catch {.mbar1.admin.domain entryconfigure 4 -state $status}
	catch {.mbar1.admin.domain entryconfigure 6 -state $status}
	catch {.mbar1.admin.domain entryconfigure 7 -state $status}
	catch {.mbar1.admin.domain entryconfigure 8 -state $status}

	catch {.mbar1.admin.menu   entryconfigure 1 -state $status}
	catch {.mbar1.admin.menu   entryconfigure 3 -state $status}
	catch {.mbar1.qmail configure -state $status}
	catch {.mbar1.misc  configure -state $status}
	catch {.mbar2.b2    configure -state $status}
	catch {.mbar2.b3    configure -state $status}
	catch {.mbar2.b4    configure -state $status}
	catch {.mbar2.b5    configure -state $status}
	catch {.mbar2.b6    configure -state $status}
	catch {.mbar2.b7    configure -state $status}
	catch {.mbar2.b8    configure -state $status}
	catch {.mbar2.b9    configure -state $status}
	catch {.mbar2.b10   configure -state $status}
	catch {.mbar2.b11   configure -state $status}

	catch {.l1.b.menu.b2 configure -state $status}
	catch {.l1.b.menu.b3 configure -state $status}
	catch {.l1.b.menu.b4 configure -state $status}
	catch {.l1.b.menu.b5 configure -state $status}
	catch {.l1.b.menu.b6 configure -state $status}
	catch {.l1.b.menu.b7 configure -state $status}
	catch {.l1.b.menu.b8 configure -state $status}
	catch {.l1.b.menu.b9 configure -state $status}
	catch {.l1.b.menu.b10 configure -state $status}
	catch {.l1.b.menu.b11 configure -state $status}
	catch {.l1.b.scale.e.o configure -state $status}
	catch {.l1.b.scale.e.f configure -state $status}
	catch {.mbar2.inac configure -state $status}
	catch {.mbar2.userlist configure -state $status}
}

proc oshcmd {} {
	global BWidget_present prgtext
	global User configs
	variable cmd
	variable fid
	source @scriptdir@/global.tcl

	if {$User == "root"} {
		catch {exec $configs(xterm) -e @prefix@/sbin/osh &} result
	} else {
		if {[catch {open "/tmp/osh.[pid]" w} fid] } {
			tk_dialog . "osh" $fid {} {} "OK"
			return 1
		}
		puts $fid "#!/bin/sh"
		puts $fid "trap \"\" SIGHUP"
		puts $fid "@prefix@/sbin/osh"
		puts $fid "/bin/rm -f \$0"
		puts $fid "exit 0"
		close $fid
		file attributes "/tmp/osh.[pid]" -permissions 0755
		exec $configs(xterm) -e /bin/su $User -c /tmp/osh.[pid] &
	}
}

proc activityLog {user name} {
	global env logfd
	global indiumversion indiliteversion

	set tmval [clock seconds]
	set timestamp [clock format $tmval -format "%d-%b-%Y %H:%M:%S"]
	set host [info hostname]
	if {[file exists $env(HOME)/logs] == 0} {
		if {[catch {file mkdir $env(HOME)/logs} result]} {
			puts stderr "mkdir: $env(HOME)/logs $result"
			return 1
		}
	} else {
		if {[file isdirectory $env(HOME)/logs] == 0} {
			puts stderr "$env(HOME)/logs is not a directory"
			return 1
		}
	}
	set serial_num [lockFile $env(HOME)/logs/serialnum]
	set logfile "$env(HOME)/logs/$name.[clock format $tmval -format %d%m%Y%H%M%S]"
	if {[catch {open $logfile "CREAT EXCL WRONLY"} logfd]} {
		puts stderr "open: $logfile: $logfd"
		exit 1
	}
	file attributes $logfile -permissions 0600
	fconfigure $logfd -buffering line
	if {[info exists indiumversion]} {
		puts $logfd "Created by Indium $indiumversion"
	}
	if {[info exists indiliteversion]} {
		puts $logfd "Created by IndiLITE $indiliteversion"
	}
	puts $logfd "Indium LOGIN ON $host, serial no $serial_num at $timestamp by $user"
	puts $logfd "-----------------------Indium Login  Details------------------------------------\n"
	catch {set unixuser $env(LOGNAME)}
	if {[info exists unixuser]} {
		puts $logfd "Unix User $unixuser"
	} else {
		catch {set unixuser $env(LOGNAME)}
		if {[info exists unixuser]} {
			puts $logfd "Unix User $unixuser"
		} else {
			puts stderr "Who are you ?"
			puts $logfd "Unix User Unknown"
			flush $logfd
			exit 1
		}
	}
}

proc lockFile {filename} {
	for {set i 1} {$i < 10} {incr i} {
		if {[catch {open $filename.lock "CREAT EXCL WRONLY"} f1]} {
			after 1000
			continue
		}
		puts $f1 "[pid]"
		if {[file exists $filename]} {
			if {[catch {open $filename RDWR} f2]} {
				close $f1
				file delete -force -- $filename.lock
				puts stderr "open: $filename: $f2"
				exit 1
			}
			set serialnum [read -nonewline $f2]
			incr serialnum
			close $f1
			file delete -force -- $filename.lock
			seek $f2 0 start
			puts -nonewline $f2 $serialnum
			close $f2
			return $serialnum
		} else {
			if {[catch {open $filename "CREAT EXCL WRONLY"} f2]} {
				close $f1
				file delete -force -- $filename.lock
				puts stderr "open: $filename: $f2"
				exit 1
			}
			close $f1
			file delete -force -- $filename.lock
			puts -nonewline $f2 "1"
			close $f2
			return 1
		}
	}
	if {[catch {open $filename.lock "RDONLY"} f1]} {
		puts stderr "open: $filename.lock: $f1"
		exit 1
	}
	set mypid [read -nonewline $f1]
	set cmd "| kill -0 $mypid"
	if {[catch {open $cmd r} fid]} {
		puts stderr "Failed to obtain serial lock"
		exit 1
	}
	if {[catch {close $fid}]} {
		file delete -force -- $filename.lock
	} else {
		puts stderr "Process $mypid has lock"
		exit 1
	}
	puts stdout "removing stale lock $mypid"
	if {[catch {open $filename.lock "CREAT EXCL WRONLY"} f1]} {
		puts stderr "open: $filename.lock: $f1"
		exit 1
	}
	if {[file exists $filename]} {
		if {[catch {open $filename RDWR} f2]} {
			close $f1
			file delete -force -- $filename.lock
			puts stderr "open: $filename: $f2"
			exit 1
		}
		set serialnum [read -nonewline $f2]
		if {[catch {incr serialnum}]} {
			close $f1
			file delete -force -- $filename.lock
			puts stderr "Invalid Serial Number. Please correct $filename"
			exit 1
		}
		close $f1
		file delete -force -- $filename.lock
		seek $f2 0 start
		puts -nonewline $f2 $serialnum
		close $f2
		return $serialnum
	} else {
		if {[catch {open $filename "CREAT EXCL WRONLY"} f2]} {
			close $f1
			file delete -force -- $filename.lock
			puts stderr "open: $filename: $f2"
			exit 1
		}
		close $f1
		file delete -force -- $filename.lock
		puts -nonewline $f2 "1"
		close $f2
		return 1
	}
}
