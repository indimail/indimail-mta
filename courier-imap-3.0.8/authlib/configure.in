dnl Process this file with autoconf to produce a configure script.
dnl
dnl $Id: configure.in,v 1.96 2004/08/07 16:18:10 mrsam Exp $
dnl
dnl Copyright 1998 - 2001 Double Precision, Inc.  See COPYING for
dnl distribution information.

AC_INIT(mod.h)
LPATH="$PATH:/usr/local/bin"

AM_INIT_AUTOMAKE(authlib, 0.10, 0)
AM_CONFIG_HEADER(config.h)

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB
AC_PROG_SYSCONFTOOL
AC_PATH_PROGS(PERL, perl5 perl, perl, $LPATH)

if test "$PERL" = "perl"
then
	AC_MSG_ERROR(Perl is required)
fi

AC_ARG_ENABLE(changepass,
[ --disable-changepass               Disable webmail password changing ],
	changepass="$enableval",
	changepass="yes")

if test "$changepass" = "no"
then
	changepass="0"
else
	changepass="1"
fi

AC_DEFINE_UNQUOTED(AUTHCHANGEPASS,$changepass,
	[ Whether password changing should be enabled ])

AC_PATH_PROGS(EXPECT, expect, expect, $LPATH)

if test "$EXPECT" = "expect"
then
	AC_MSG_WARN(-----------------------------------------------------)
	AC_MSG_WARN(expect not found - will not be able to change passwds)
	AC_MSG_WARN(in webmail)
	AC_MSG_WARN(-----------------------------------------------------)
	sleep 5
else
	AC_DEFINE_UNQUOTED(HAVE_EXPECT, 1, [ Whether expect(1) is installed ])
fi

AC_PATH_PROGS(PASSWD, passwd, passwd, $LPATH)
AC_SUBST(PASSWD)

if test "$GCC" = "yes"
then
	CFLAGS="$CFLAGS -Wall"
fi

CFLAGS="$CFLAGS -I.. -I${srcdir}/.."

dnl Check whether to install man pages

AC_ARG_WITH(authlib-man, [], installman="$withval", installman="yes")

case "$installman" in
y*)
	installman=yes
	;;
Y*)
	installman=yes
	;;
esac

if test "$installman" = "yes"
then
	manFILES='$(man7)'
	manLINKS='$(manlinks)'
fi

AC_SUBST(manFILES)
AC_SUBST(manLINKS)

test "x$prefix" = xNONE && prefix=$ac_default_prefix
test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'
eval "prefix=$prefix"
eval "exec_prefix=$exec_prefix"
eval "sysconfdir=$sysconfdir"
eval "localstatedir=$localstatedir"
eval "libexecdir=$libexecdir"

AC_MSG_CHECKING(whether -lm is needed for floor)
AC_TRY_LINK_FUNC(floor,
	AC_MSG_RESULT(no),
	LIBM="-lm"
	AC_MSG_RESULT(yes))

dnl #########################################################################

dnl Check if the MD5 library is available

dnl #########################################################################


if test -d ../md5
then
	MD5=1
	AC_DEFINE_UNQUOTED(HAVE_MD5LIB, 1,
			[ Whether we have the MD5 library available ])
	MD5LIB=../md5/libmd5.a
else
	MD5LIB=""
	MD5=0
fi
AC_SUBST(MD5LIB)
AM_CONDITIONAL(HAVE_MD5, test "$MD5" = 1)

dnl #########################################################################

dnl Check if the SHA1 library is available

dnl #########################################################################


if test -d ../sha1
then
	SHA1=1
	AC_DEFINE_UNQUOTED(HAVE_SHA1LIB, 1,
			[ Whether we have the SHA1 library available ])
	SHA1LIB=../sha1/libsha1.a
else
	SHA1LIB=""
	SHA1=0
fi
AC_SUBST(SHA1LIB)
AM_CONDITIONAL(HAVE_SHA1, test "$SHA1" = 1)



dnl #########################################################################

dnl Check if the HMAC library is available

dnl #########################################################################

if test -d ../libhmac
then
	HMAC=1
	AC_DEFINE_UNQUOTED(HAVE_HMACLIB, 1,
			 [ Whether we have the HMAC library available ])
	HMACLIB=../libhmac/libhmac.a
else
	HMACLIB=""
	HMAC=0
fi
AC_SUBST(HMACLIB)
AM_CONDITIONAL(HAVE_HMACLIB, test "$HMAC" = 1)

saveLIBS="$LIBS"
NETLIBS=""
USENSL=no

AC_CHECK_LIB(socket,socket,result=yes,result=no)
if test $result = yes; then
        NETLIBS="-lsocket"
else
        AC_CHECK_LIB(socket,socket,result=yes,result=no,-lnsl)
        if test $result = yes; then
                NETLIBS = "-lsocket -lnsl"
                USENSL=yes
        else
                AC_CHECK_LIB(socket,connect,result=yes,result=no)
                if test $result = yes; then
                        NETLIBS="-lsocket"
                else
                        AC_CHECK_LIB(socket,connect,result=yes,result=no,-lnsl)
                        if test $result = yes; then
                                NETLIBS="-lsocket -lnsl"
                                USENSL=yes
                        fi
                fi
        fi
fi

if test $USENSL != yes; then
	LIBS="$LIBS $NETLIBS"
	AC_TRY_LINK_FUNC(inet_addr, [ : ],
	[
	        AC_CHECK_LIB(nsl,inet_addr,result=yes,result=no)
	        if test $result = yes; then
	                NETLIBS="$NETLIBS -lnsl"
	        fi
	])
fi

LIBS="$saveLIBS"
AC_SUBST(NETLIBS)

STATIC_LIST=""
LIBAUTH=""
SASL_LIST="SASL(\"PLAIN\", authsasl_plain, authsaslclient_plain) SASL(\"LOGIN\", authsasl_login, authsaslclient_login)"

rm -f authconfiglist
cp /dev/null authconfiglist

dnl #########################################################################

dnl Prepare authuserdb module if userdb library is available

dnl #########################################################################

AC_ARG_WITH(authuserdb,
[ --without-authuserdb               Do not include the authuserdb module ],
	doauthuserdb="$withval",
	doauthuserdb="no"
	if test -d ../userdb
	then
		doauthuserdb="yes"
	fi)

if test "$doauthuserdb" = "no"
then
	USE_DB=0
	USE_GDBM=0
	LIBGDBM=""
	LIBDB=""
	dblibrary=""
	AUTHUSERDB=""
else

	AC_ARG_WITH(userdb, [], userdb="$withval", userdb="/etc/userdb")
	AC_ARG_WITH(db, [], db="$withval", db="")

	case "$db" in
	gdbm)
		. ../dbobj.config
		USE_GDBM=1
		USE_DB=0
		LIBDB=""
		dblibrary=../gdbmobj/libgdbmobj.a
		AUTHUSERDB="authuserdb${EXEEXT}"
		if test "$userdb" = ""
		then
			AC_MSG_ERROR(--with-userdb option required)
		fi
		;;
	db)
		. ../dbobj.config
		USE_DB=1
		USE_GDBM=0
		LIBGDBM=""
		dblibrary=../bdbobj/libbdbobj.a
		AUTHUSERDB="authuserdb${EXEEXT}"
		if test "$userdb" = ""
		then
			AC_MSG_ERROR(--with-userdb option required)
		fi
		;;
	"")
		USE_DB=0
		USE_GDBM=0
		LIBGDBM=""
		LIBDB=""
		dblibrary=""
		AUTHUSERDB=""
		;;
	*)
		AC_MSG_ERROR(Invalid --with-db option)
	esac
fi

PWSCRIPTS="authsystem.passwd"
AC_SUBST(USE_GDBM)
AC_SUBST(USE_DB)

AC_SUBST(dblibrary)
AC_SUBST(LIBGDBM)
AC_SUBST(LIBDB)
AC_SUBST(AUTHUSERDB)
if test "$userdb" = ""
then
	userdb="/etc/userdb"
fi
AC_DEFINE_UNQUOTED(USERDB,"$userdb", [ Location of the userdb database ])
AC_SUBST(userdb)
AM_CONDITIONAL(HAVE_AUTHUSERDB, test "$USE_GDBM$USE_DB" != 00)

if test "$USE_GDBM$USE_DB" != 00
then
	STATIC_LIST="$STATIC_LIST authuserdb_info"
	LIBAUTH="$LIBAUTH libauth-authuserdb.a"
fi


AC_ARG_WITH(authchangepwdir, [],
	authchangepwdir="$withval",
	AC_MSG_ERROR(--with-authchangepwdir missing))

AC_SUBST(authchangepwdir)


dnl Checks for header files.
dnl
dnl Because autoconf sets macros for C preprocessor where
dnl AC_CHECK_HEADERS appears first, the first AC_CHECK_HEADERS
dnl must not place in conditional level but top level.
dnl This is a dummy AC_CHECK_HEADERS for it.
dnl
AC_CHECK_HEADERS(stdio.h)

dnl #########################################################################

dnl Prepare authpam module if libpam is available.

dnl #########################################################################

AC_ARG_WITH(authpam,
[ --without-authpam                  Do not include the authpam module ],
	doauthpam="$withval")

if test "$doauthpam" = "no"
then
	HAVE_PAM=0
	LIBDL=""
else
	AC_CHECK_HEADERS(security/pam_appl.h Pam/pam_appl.h)

	saveLIBS="$LIBS"
	LIBDL=""
	AC_CHECK_LIB(dl, dlopen, [ LIBDL="-ldl" ])
	LIBS="$saveLIBS"

	AC_CHECK_LIB(pam, pam_start,
		[ HAVE_PAM=1
		LIBS="-lpam $LIBDL $LIBS"
		AC_CHECK_FUNCS(pam_setcred)],

		HAVE_PAM=0,
		$LIBDL)
	LIBS="$saveLIBS"
fi
AC_SUBST(LIBDL)
AC_SUBST(HAVE_PAM)
AM_CONDITIONAL(HAVE_PAM, test "$HAVE_PAM" = 1)

AUTHPAM=""
if test "$HAVE_PAM" = 1
then
	AUTHPAM="authpam${EXEEXT}"
	STATIC_LIST="$STATIC_LIST authpam_info"
	LIBAUTH="$LIBAUTH libauth-authpam.a"
fi

AC_ARG_WITH(authpam-libraries,
[ --with-authpam-libraries="libs"    Link 'libs' with authpam, this may be
                                    required for FreeBSD 3.3],
	authpamcrypt="$withval")

AUTHPAMCRYPT="$authpamcrypt"
AC_SUBST(AUTHPAMCRYPT)

dnl #########################################################################

dnl Prepare authldap module if ldap functions are available.

dnl #########################################################################

AC_ARG_WITH(authldap,
[ --without-authldap                 Do not include the authldap module ],
	doauthldap="$withval",
	doauthldap="yes")

AC_CHECK_HEADERS(ldap.h lber.h netinet/in.h)

if test "$doauthldap" = "no"
then
	HAVE_LDAP=0
else
	saveLIBS="$LIBS"
	LIBS="$NETLIBS $LIBS"
	LDAPLIBS=""

        AC_MSG_CHECKING(whether -lresolv is needed for res_query)
	AC_LINK_IFELSE(AC_LANG_PROGRAM([
#include <sys/types.h>
#if HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
#include <resolv.h>

void (*func)()= (void (*)())res_query;
],
			[  (*func)(); ]),
        	AC_MSG_RESULT(no),
		[
        	LIBS="-lresolv $LIBS"

		AC_LINK_IFELSE(AC_LANG_PROGRAM([
#include <sys/types.h>
#if HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
#include <resolv.h>

void (*func)()= (void (*)())res_query;
],
			[  (*func)(); ]), [
        		LDAPLIBS="-lresolv $LDAPLIBS"
			HAVE_LDAP=1
        		AC_MSG_RESULT(yes)
			],
        		AC_MSG_ERROR(Cannot find function res_query))
			])

	AC_CHECK_LIB(lber, ber_scanf,
		[ LDAPLIBS="-llber $LDAPLIBS" LIBS="-llber $LIBS" ])
	AC_CHECK_LIB(ldap, ldap_open,
		[ LDAPLIBS="-lldap $LDAPLIBS" ; LIBS="-lldap $LIBS" ])
	AC_CHECK_FUNC(ldap_search_st, HAVE_LDAP=1, HAVE_LDAP=0)
	AC_CHECK_FUNC(ldap_start_tls_s, HAVE_LDAP_TLS=1, HAVE_LDAP_TLS=0)
	AC_CHECK_FUNC(ldap_result2error, HAVE_LDAP_RESULT2ERROR=1, HAVE_LDAP_RESULT2ERROR=0)
	LIBS="$saveLIBS"
fi

AC_ARG_WITH(authldaprc,
[ --with-authldaprc=filename         Expect to find authldaprc here ],
	authldaprc="$withval",
	authldaprc="$sysconfdir/authldaprc")
AC_SUBST(authldaprc)

AUTHLDAP=""
if test "$HAVE_LDAP" = 1
then
	AUTHLDAP="authldap${EXEEXT}"
	STATIC_LIST="authldap_info $STATIC_LIST"
	LIBAUTH="$LIBAUTH libauth-authldap.a"
	echo authldaprc.dist >>authconfiglist
else
	authldaprc=""
fi
AC_SUBST(LDAPLIBS)

AM_CONDITIONAL(HAVE_LDAP, test "$HAVE_LDAP" = 1)
AC_DEFINE_UNQUOTED(HAVE_LDAP_TLS,$HAVE_LDAP_TLS,
	[ Whether we have ldap_start_tls_s ])
AC_DEFINE_UNQUOTED(HAVE_LDAP_RESULT2ERROR, $HAVE_LDAP_RESULT2ERROR,
	[ Whether we have ldap_result2error() function ])

dnl #########################################################################

dnl Prepare authpwd module

dnl #########################################################################

AC_ARG_WITH(authpwd,
[ --without-authpwd                  Do not include the authpwd module ],
	doauthpwd="$withval",
	doauthpwd="yes"
	test "$HAVE_PAM" = 1 && doauthpwd="no"
	test "$HAVE_LDAP" = 1 && doauthpwd="no"
	)

HAVE_PWD=1
if test "$doauthpwd" = "no"
then
	HAVE_PWD=0
fi
AC_CHECK_FUNCS(endpwent)

dnl #########################################################################

dnl Prepare authshadow module if shadow functions are available.

dnl #########################################################################

AC_ARG_WITH(authshadow,
[ --without-authshadow               Do not include the authshadow module ],
	doauthshadow="$withval",
	doauthshadow="yes"
	test "$HAVE_PAM" = 1 && doauthshadow="no"
	test "$HAVE_LDAP" = 1 && doauthshadow="no")

AC_CHECK_HEADERS(shadow.h)
saveLIBS="$LIBS"
SHADOWLIBS=""
AC_CHECK_LIB(shadow, getspent,
	[ SHADOWLIBS="-lshadow" ; LIBS="-lshadow $LIBS" ])
AC_CHECK_FUNCS(endspent getspent)
LIBS="$saveLIBS"

if test "$doauthshadow" = "no"
then
	HAVE_SHADOW=0
else

	saveLIBS="$LIBS"
	AC_CHECK_LIB(shadow, getspent)
	AC_CHECK_FUNC(getspent, HAVE_SHADOW=1, HAVE_SHADOW=0)
	LIBS="$saveLIBS"
fi

AUTHSHADOW=""
if test "$HAVE_SHADOW" = 1
then
	AUTHSHADOW="authshadow${EXEEXT}"
	STATIC_LIST="$STATIC_LIST authshadow_info"
	LIBAUTH="$LIBAUTH libauth-authshadow.a"
fi
AC_SUBST(SHADOWLIBS)

AM_CONDITIONAL(HAVE_SHADOW, test "$HAVE_SHADOW" = 1)

AUTHPWD=""
if test "$HAVE_PWD" = 1
then
	AUTHPWD="authpwd${EXEEXT}"
	STATIC_LIST="$STATIC_LIST authpwd_info"
	LIBAUTH="$LIBAUTH libauth-authpwd.a"
fi

AM_CONDITIONAL(HAVE_PWD, test "$HAVE_PWD" = 1)

dnl #########################################################################

dnl Prepare authvchkpw module if vchkpw is installed.

dnl #########################################################################

changequote(<<,>>)

vpopmail_home=`$PERL -e '@a=getpwnam("vpopmail"); print "$a[7]";'`

changequote([,])

AC_ARG_WITH(authvchkpw,
[ --without-authvchkpw               Do not include the authvchkpw module ],
	doauthvchkpw="$withval",
	doauthvchkpw=no
	if test "$vpopmail_home" != ""
	then
		doauthvchkpw=yes
	fi)

if test "$doauthvchkpw" = "no"
then
	HAVE_VCHKPW=0
	vpopmail_home=.
else
	HAVE_VCHKPW=1


	cat >authvchkpw.flag <<EOF
----------------------------------------------------
                     NOTE


All questions regarding ANY vpopmail-related problems,
such as compiling/building failures, or login errors
should be referred to the vpopmail mailing list.
Vpopmail questions sent to the sqwebmail or Courier
mailing lists will be IGNORED.
----------------------------------------------------

EOF

	if test -f ${vpopmail_home}/etc/lib_deps
	then
		CFLAGS="`cat ${vpopmail_home}/etc/inc_deps` $CFLAGS"
		VPOPMAILLIBS="`cat ${vpopmail_home}/etc/lib_deps`"
	else
		AC_MSG_ERROR(${vpopmail_home}/etc/lib_deps does not exist - upgrade vpopmail to the current version or fix the permissions on this file)
	fi
fi
AC_SUBST(vpopmail_home)
AC_SUBST(VPOPMAILLIBS)

AUTHVCHKPW=""
if test "$HAVE_VCHKPW" = 1
then
	AUTHVCHKPW="authvchkpw${EXEEXT}"
	STATIC_LIST="authvchkpw_info $STATIC_LIST"
	LIBAUTH="$LIBAUTH libauth-authvchkpw.a"
fi

AM_CONDITIONAL(HAVE_VCHKPW, test "$HAVE_VCHKPW" = 1)

dnl Check if vpopmail has open_smtp_relay() function
if test "$HAVE_VCHKPW" = 1; then
	_SAVE_LIBS=$LIBS
	LIBS="$VPOPMAILLIBS $CRYPTLIBS $LIBS"
	AC_CHECK_FUNC(open_smtp_relay, 
		AC_DEFINE(HAVE_OPEN_SMTP_RELAY, 1,
		[ Whether -lvpopmail has the open_smtp_relay() function ]) )
	AC_CHECK_FUNC(vset_lastauth,
		AC_DEFINE(HAVE_VSET_LASTAUTH, 1,
		[ Whether -lvpopmail has the vset_lastauth() function ]))
	LIBS=$_SAVE_LIBS
fi

dnl #########################################################################

dnl Prepare authpgsql module

dnl #########################################################################

AC_ARG_WITH(authpgsqlrc,
[ --with-authpgsqlrc=filename        Expect to find authpgsql here ],
	authpgsqlrc="$withval",
	authpgsqlrc="$sysconfdir/authpgsqlrc")
AC_SUBST(authpgsqlrc)

AC_ARG_WITH(authpgsql,
[ --without-authpgsql               Do not include the authpgsql module ],
        doauthpgsql="$withval",

# Do not configure authpgsql if authvchkpw was found

	if test "$HAVE_VCHKPW" = 1
	then
		doauthpgsql="no"
	fi
)

AC_PATH_PROGS(PG_CONFIG, pg_config, pg_config, $LPATH)

PGSQL_LIBS="-lpq"
AC_ARG_WITH(pgsql-libs,
[ --with-pgsql-libs=DIR		Look for pgsql libs in this dir ],
	PGSQL_LIBS="-L$withval $PGSQL_LIBS",
	if test -x $PG_CONFIG
	then
		PGSQL_LIBS="-L`$PG_CONFIG --libdir` $PGSQL_LIBS"
	fi
)
AC_ARG_WITH(pgsql-includes,
[ --with-pgsql-includes=DIR	Look for pgsql includes in this dir ],
	PGSQL_CFLAGS="-I$withval",
	if test -x $PG_CONFIG
	then
		PGSQL_CFLAGS="-I`$PG_CONFIG --includedir`"
	fi
)

if test "$doauthpgsql" = ""
then
	LIBS="$PGSQL_LIBS $LIBS"
	AC_CHECK_FUNC(PQsetdbLogin,
		doauthpgsql="yes"
		)
	LIBS="$saveLIBS"
fi

if test "$doauthpgsql" != "yes"
then
	AUTHPGSQL=""
	HAVE_AUTHPGSQL=0
else
	saveLIBS="$LIBS"
	LIBS="$PGSQL_LIBS $LIBS"
	AC_CHECK_FUNC(PQsetdbLogin,
		AUTHPGSQL="authpgsql${EXEEXT}"
		HAVE_AUTHPGSQL=1,
		AC_MSG_ERROR([--with-authpgsql specified but no libpq.so]))
	LIBS="$saveLIBS"
	echo authpgsqlrc.dist >>authconfiglist
	HAVE_AUTHPGSQL=1
	CFLAGS="$PGSQL_CFLAGS $CFLAGS"
fi

if test $HAVE_AUTHPGSQL = 1
then
    STATIC_LIST="authpgsql_info $STATIC_LIST"
fi

AC_SUBST(PGSQL_LIBS)
AC_SUBST(AUTHPGSQL)
AM_CONDITIONAL(HAVE_AUTHPGSQL, test "$HAVE_AUTHPGSQL" = 1)

dnl #########################################################################

dnl Prepare authcram module if userdb and libhmac is available, and either
dnl md5 or sha1 (or both) is available

dnl #########################################################################
dnl #########################################################################

dnl Prepare authmysql module

dnl #########################################################################

AC_ARG_WITH(authmysqlrc,
[ --with-authmysqlrc=filename        Expect to find authmysql here ],
	authmysqlrc="$withval",
	authmysqlrc="$sysconfdir/authmysqlrc")
AC_SUBST(authmysqlrc)

AC_ARG_WITH(authmysql,
[ --without-authmysql               Do not include the authmysql module ],
        doauthmysql="$withval",

# Do not configure authmysql if authvchkpw was found

	if test "$HAVE_VCHKPW" = 1
	then
		doauthmysql="no"
	fi
)
AC_ARG_WITH(mysql-libs,
[ --with-mysql-libs=DIR		Look for mysql libs in this dir ],
	MYSQL_LIBS="-L$withval -lmysqlclient"
)
AC_ARG_WITH(mysql-includes,
[ --with-mysql-includes=DIR	Look for mysql includes in this dir ],
	MYSQL_CFLAGS="-I$withval"
)

AC_PATH_PROGS(MYSQL_CONFIG, mysql_config, mysql_config, $LPATH)

if test -x "$MYSQL_CONFIG"
then
	MYSQL_CFLAGS="`$MYSQL_CONFIG --cflags`"
	MYSQL_LIBS="`$MYSQL_CONFIG --libs`"

	eval "MYSQL_CFLAGS=\"\`echo $MYSQL_CFLAGS\`\""
	eval "MYSQL_LIBS=\"\`echo $MYSQL_LIBS\`\""
fi

if test "$doauthmysql" = ""
then
	LIBS="$MYSQL_LIBS $LIBS"
	AC_CHECK_FUNC(mysql_connect,
		doauthmysql="yes"
		)
	AC_CHECK_FUNC(mysql_real_connect,
		doauthmysql="yes"
		)
	LIBS="$saveLIBS"
fi

if test "$doauthmysql" != "yes"
then
	AUTHMYSQL=""
	HAVE_AUTHMYSQL=0
else
	saveLIBS="$LIBS"
	LIBS="$MYSQL_LIBS $LIBS"
	AC_CHECK_FUNC(mysql_connect,
		AUTHMYSQL="authmysql${EXEEXT}"
		HAVE_AUTHMYSQL=1,
		[
			AC_CHECK_FUNC(mysql_real_connect,
				AUTHMYSQL="authmysql"
				HAVE_AUTHMYSQL=1,

					AC_MSG_ERROR([--with-authmysql specified but no mysqlclient.so])
					)
		]
)
	LIBS="$saveLIBS"
	echo authmysqlrc.dist >>authconfiglist
	HAVE_AUTHMYSQL=1
	CFLAGS="$MYSQL_CFLAGS $CFLAGS"
fi

if test $HAVE_AUTHMYSQL = 1
then
    STATIC_LIST="authmysql_info $STATIC_LIST"
fi

AC_SUBST(MYSQL_LIBS)
AC_SUBST(AUTHMYSQL)
AM_CONDITIONAL(HAVE_AUTHMYSQL, test "$HAVE_AUTHMYSQL" = 1)

dnl #########################################################################

dnl Prepare authcram module if userdb and libhmac is available, and either
dnl md5 or sha1 (or both) is available

dnl #########################################################################


AC_ARG_WITH(authcram,
[ --without-authcram                 Do not include the authcram module ],
	doauthcram="$withval",
	doauthcram=yes)

AUTHCRAM=""

if test "$USE_GDBM$USE_DB" != 00
then
	if test "$HMAC" != 0
	then
		if test "$MD5$SHA1" != 00
		then
			if test "$doauthcram" = "yes"
			then
				AUTHCRAM="authcram${EXEEXT}"
				STATIC_LIST="authcram_info $STATIC_LIST"
				LIBAUTH="$LIBAUTH libauth-authcram.a"
			fi
		fi

		if test "$MD5" != 0
		then
			SASL_LIST="SASL(\"CRAM-MD5\", authsasl_cram, authsaslclient_crammd5) $SASL_LIST"
		fi

		if test "$SHA1" != 0
		then
			SASL_LIST="SASL(\"CRAM-SHA1\", authsasl_cram, authsaslclient_cramsha1) $SASL_LIST"
		fi

	fi
fi

AM_CONDITIONAL(HAVE_AUTHCRAM, test "$AUTHCRAM" != "")


dnl #########################################################################

dnl Prepare authcustom stub module.

dnl #########################################################################


AC_ARG_WITH(authcustom,
[ --without-authcustom               Do not include the authcustom module ],
	doauthcustom="$withval",
	doauthcustom=yes)

AUTHCUSTOM=""

if test "$doauthcustom" = "yes"
then
	AUTHCUSTOM="authcustom${EXEEXT}"

	STATIC_LIST="authcustom_info $STATIC_LIST"
	LIBAUTH="$LIBAUTH libauth-authcustom.a"
fi

AM_CONDITIONAL(HAVE_CUSTOM, test "$AUTHCUSTOM" != "")

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(sys/stat.h sys/time.h sys/wait.h unistd.h fcntl.h crypt.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_PID_T
AC_TYPE_UID_T

dnl Other checks
AC_CHECK_FUNCS(setsid setlogin)
AC_CHECK_LIB(crypt, crypt, CRYPTLIBS="-lcrypt")
saveLIBS="$LIBS"
LIBS="$CRYPTLIBS $LIBS"
AC_CHECK_FUNC(crypt, AC_DEFINE_UNQUOTED(HAVE_CRYPT, 1,
		     [ Whether we have the crypt() function ]))
LIBS="$saveLIBS"
AC_CACHE_CHECK([for crypt() prototype],userdb_cv_NEED_CRYPT_PROTOTYPE,

	AC_TRY_COMPILE( [
	       #if HAVE_CRYPT_H
               #include <crypt.h>
               #endif
	       #if HAVE_UNISTD_H
	       #include <unistd.h>
	       #endif
	       int crypt(int, int);

		], [], userdb_cv_NEED_CRYPT_PROTOTYPE=1,
			userdb_cv_NEED_CRYPT_PROTOTYPE=0 )

	)

AC_DEFINE_UNQUOTED(NEED_CRYPT_PROTOTYPE, $userdb_cv_NEED_CRYPT_PROTOTYPE,
			 [ Whether we must a prototype for crypt()] )
AC_SUBST(CRYPTLIBS)

AUTHMODULES="$AUTHCUSTOM $AUTHCRAM $AUTHUSERDB $AUTHVCHKPW $AUTHLDAP $AUTHPGSQL $AUTHMYSQL $AUTHPAM $AUTHSHADOW $AUTHPWD"

dnl #########################################################################

dnl Prepare the authdaemon module.

dnl #########################################################################

AC_ARG_WITH(authdaemonrc,
[ --with-authdaemonrc=filename       Expect to find authmysql here ],
	authdaemonrc="$withval",
	authdaemonrc="$sysconfdir/authdaemonrc")
AC_SUBST(authdaemonrc)

AC_ARG_WITH(authdaemonvar,
[ --with-authdaemonvar=directory     Directory where authdaemon.pid and
                                    the listening socket is created],
	authdaemonvar="$withval",
	authdaemonvar="$localstatedir/authdaemon")

AC_ARG_WITH(authdaemon,
[ --with-authdaemon                  Include the authdaemon module
--without-authdaemon               Do not include the authdaemon module],
[
	doauthdaemon="$withval"

	if test "$doauthdaemon" = "yes"
	then
		doauthdaemon=1
	else
		doauthdaemon=0
	fi
],

	doauthdaemon=1
	)

AM_CONDITIONAL(HAVE_AUTHDAEMON, test $doauthdaemon = 1)

DAEMON_STATIC_LIST=""
NONDAEMONAUTHMODULES="$AUTHMODULES"

INSTALLAUTHMODULES="$NONDAEMONAUTHMODULES"
INSTALLAUTHSCRIPTS=""

cp /dev/null authdaemond.versions.final

AUTHMODULES_PROGS="`echo $AUTHMODULES`"

AUTHDAEMONMODULELIST=""

if test $doauthdaemon = 1
then
	if test "$changepass" = 1
	then
		PWPROGS="$PWPROGS authdaemon.passwd"
	fi

	AUTHDAEMONMODULELIST="$AUTHMODULES_PROGS"

	DAEMON_STATIC_LIST="$STATIC_LIST"
	STATIC_LIST="authdaemon_info"
	NONDAEMONAUTHMODULES="authdaemon"
	INSTALLAUTHMODULES="$NONDAEMONAUTHMODULES"

	LIBAUTH="$LIBAUTH libauth-authdaemon.a"
	echo authdaemonrc.dist >>authconfiglist
	authdaemondprog="authdaemontest authmksock"

authdaemond_build() {
filename="$1"
modules="$2"
required="$3"
dependencies="$4"

	prereq=1

	for f in $required dummy
	do
		found=0

		for ff in $DAEMON_STATIC_LIST dummy
		do
			if test "$f" = "$ff"
			then
				found=1
			fi
		done

		if test "$found" = "0"
		then
			prereq=0
		fi
	done

	modlist=""

	if test "$prereq" = "1"
	then
		for f in $modules dummy
		do
			for ff in $DAEMON_STATIC_LIST dummy2
			do
				if test "$f" = "$ff"
				then
					modlist="$modlist $f"
				fi
			done
		done
	fi

	if test "$modlist" != ""
	then
		INSTALLAUTHMODULES="$INSTALLAUTHMODULES $filename"
		modlist="`echo $modlist`"
		echo "authdaemond_build $filename '$modlist' '$dependencies'" >>authdaemond.versions.final
	fi
}
	. ${srcdir}/authdaemond.versions
	AUTHMODULES_PROGS="$AUTHMODULES_PROGS make-authdaemond"
else
	authdaemonvar=""
	authdaemondprog=""
fi

AUTHMODULES_PROGS="$AUTHMODULES_PROGS"

echo "PWPROGS=\"`echo $PWPROGS`\"" >authpwdprogs
echo "PWSCRIPTS=\"`echo $PWSCRIPTS`\"" >>authpwdprogs
AC_SUBST(PWPROGS)
AC_SUBST(PWSCRIPTS)
AC_SUBST(authdaemonvar)
AC_SUBST(authdaemondprog)
AUTHDAEMONMODULELIST=`echo $AUTHDAEMONMODULELIST`
AC_SUBST(AUTHDAEMONMODULELIST)
AC_SUBST(DAEMON_STATIC_LIST)
NONDAEMONAUTHMODULES=`echo $NONDAEMONAUTHMODULES`
AC_SUBST(NONDAEMONAUTHMODULES)
AUTHMODULES=`echo $AUTHMODULES`

AC_SUBST(AUTHMODULES_PROGS)

AC_SUBST(AUTHMODULES)
AC_SUBST(LIBAUTH)

cp /dev/null authdaemon.msg
if test $doauthdaemon = 1
then
	INSTALLAUTHSCRIPTS="$INSTALLAUTHSCRIPTS authdaemond"
	cat >authdaemon.msg <<EOF
----------------------------------------------------------------------------
You must now set up the following command to run at system boot:

$libexecdir/authlib/authdaemond start
----------------------------------------------------------------------------
EOF
fi
AC_SUBST(INSTALLAUTHMODULES)
AC_SUBST(INSTALLAUTHSCRIPTS)
AC_SUBST(LIBM)

AC_SUBST(DAEMON_STATIC_LIST)
AC_SUBST(STATIC_LIST)

AC_DEFINE_UNQUOTED(SASL_LIST,$SASL_LIST,
	[ This macro is used to build the list of SASL modules ])

rm -f authdaemonrc.h authldaprc.h authmysqlrc.h authpgsqlrc.h vpopmail_config.h

AC_ARG_ENABLE(unicode, [],
	unicode="$enableval",
	unicode="no")

if test -d ${srcdir}/../unicode
then
	if test "$unicode" != "no"
	then
		AC_DEFINE_UNQUOTED(HAVE_LIBUNICODE,1,
			[ Whether libunicode.a is available ])
	fi
	UNICODE_LIB=../unicode/libunicode.a
fi

AC_SUBST(UNICODE_LIB)

AM_CONDITIONAL(HAVE_SGML, test -d ${srcdir}/../docbook)

AC_OUTPUT(Makefile modulelist installlist installlist.sh authdaemond authdaemonrc authsystem.passwd README.authdebug.html)
