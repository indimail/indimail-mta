<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
       "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <title>Courier-IMAP</title>
  <meta name="MSSmartTagsPreventParsing" content="TRUE">
  <!-- $Id: INSTALL.html.in,v 1.68 2004/07/28 01:18:19 mrsam Exp $-->
</head>

<body text="#000000" bgcolor="#FFFFFF" link="#0000EE" vlink="#551A8B"
alink="#FF0000">
<!-- Copyright 1998 - 2004 Double Precision, Inc.  See COPYING for -->
<!-- distribution information. -->

<h1>Courier-IMAP</h1>

<p>For a general introduction and configuration settings for some popular
IMAP clients, go and read <code>imap/README(.html)</code>.</p>

<p>In this document:</p>
<ul>
  <li><a href="#requirements">Requirements</a></li>
  <li><a href="#upgrading">Upgrading</a></li>
  <li><a href="#install">Installation</a></li>
  <li><a href="#authmods">Authentication modules - General notes</a></li>
  <li><a href="#authint">Authentication internals</a></li>
  <li><a href="#userdb"><code>USERDB</code> Authentication module</a></li>
  <li><a href="#vchkpw"><code>VCHKPW</code> Authentication module</a></li>
  <li><a href="#ldap"><code>LDAP</code> Authentication module</a></li>
  <li><a href="#daemon"><code>DAEMON</code> Authentication module</a></li>
  <li><a href="#loginexec">Account initialization hook</a></li>
  <li><a href="#shared">Using shared folders</a></li>
  <li><a href="#crammd5">CRAM-MD5 Authentication</a></li>
  <li><a href="#imapsend">Sending mail via an IMAP connection</a></li>
  <li><a href="#idle">Realtime folder status updates</a></li>
  <li><a href="#options">Account OPTIONS</a></li>
  <li><a href="#smap">SMAP</a></li>
</ul>

<h2><a name="requirements" id="requirements">Requirements</a></h2>

<p>Now is the good time to read the FAQ, before you start. The FAQ is located
in the file <code>imap/FAQ(.html?)</code>.</p>
<ul>
  <li>C++ compiler - A C++ compiler is required. The server is written in C,
    but there are some configuration scripts that use C++ code.</li>
  <li>make - The GNU make is recommended. Solaris's make is to be avoided.
    xBSD already has a gmake port, install it and use it (use gmake
    everywhere this document refers to make).</li>
  <li>GDBM/DB - either the GDBM or the Berkeley DB library is required.</li>
  <li><a href="http://oss.sgi.com/projects/fam/" target="_blank">FAM, the
    File Alteration Monitor</a> (<tt>http://oss.sgi.com/projects/fam/</tt>)
    is optional. If FAM is installed, it is used for an enhanced IMAP
    <code>IDLE</code> implementation that provides real-time folder status
    updates to concurrent IMAP clients that have the same folder opened. <br>
  </li>
  <li>OpenLDAP/MySQL/PostgreSQL/OpenSSL - The IMAP server can optionally use
    a database back end for authentication. The database back end can be
    either an LDAP directory, a MySQL database, or a PostgreSQL database. The
    IMAP server can also implement IMAP over SSL (STARTTLS) as well.
    Generally, to enable the optional modules it is only necessary to install
    OpenLDAP, MySQL, PostgreSQLor OpenSSL. The configuration script checks
    for presence of these libraries, and compiles the appropriate files.
    Note: these packages <b>MUST BE</b> installed in directories that are
    searched by your C compiler by default. Some installation scripts default
    to installing the development libraries and include files in custom
    directories. In that case it will be necessary to set some environment
    variables, before running the configure script, to specify additional
    options to the compiler that add the custom directories to the compiler's
    search path. See the FAQ for more information. You also need to make sure
    that all the supporting DEVELOPMENT files are installed. Most
    LDAP/MySQL/PostgreSQL packages come in two parts: the runtime support,
    and development support. You may have just the runtime support installed,
    you will need to make sure that development support files are also
    installed.</li>
</ul>

<h2><a name="upgrading" id="upgrading">UPGRADING</a></h2>

<p>After upgrading from Courier-IMAP 1.7.3, or earlier, any existing mail in
POP3 mailboxes may show up as new mail, by some mail clients. Other mail
clients may end up downloading a second copy of any message that was left in
the mailbox before the upgrade. This is a one-time event. Courier-IMAP 2.0.0
uses a different mechanism for generating POP3 message identifiers. Mail
clients that use POP3 identifiers will behave as if all messages, that were
left in the POP3 mailbox before the upgrade, were removed, and replaced by
new messages that happen to be the same content. Depending on how the POP3
mail client works, it will either flag all messages in the mailbox as unread,
or download a second copy of the message.</p>

<p>Upgrading from Courier-IMAP 1.3.0, and later versions, is a
straightforward process. Follow the instructions in the <a
href="#install">INSTALLATION</a> section, below, to install the new version.
The "<code>make install-configure</code>" command automatically preserves the
existing system configuration. However, note that new versions of
Courier-IMAP will often introduce additional configuration options. After
<code>make install-configure</code> a cursory inspection of configuration
files in <code>@defaultprefix@/etc</code> (the default location of the
configuration directory) is recommended, in order to identify any new
configuration settings that might need adjustment.</p>

<h3>Upgrading from Courier-IMAP 1.3.8.2 and earlier</h3>

<p>The default configuration options have slightly changed. The default
configuration script will now always build the <code>authdaemon</code>
module, and build all real authentication modules inside
<code>authdaemond</code>. This is true even with the <code>authvchkpw</code>
module.</p>

<h3>Upgrading from Courier-IMAP 1.2.3 and earlier</h3>

<p>Courier-IMAP 1.3.0 introduced a new configuration file format that allows
configuration files to be automatically upgraded. Additionally, several
existing configuration files have been renamed in order for their names to be
consistent with the Courier build:</p>
<pre>Courier-IMAP &lt; 1.3  Courier-IMAP 1.3.0
--------            ---------
imapd.config        imapd
imapd-ssl.config    imapd-ssl
pop3d.config        pop3d
pop3d-ssl.config    pop3d-ssl</pre>

<p>The NEWS file has a detailed explanation of how configuration files are
now installed. Basically, <code>make install</code> now installs
<code>configfilename.dist</code>, and <code>make install-configure</code>
copies <code>configfilename.dist</code> to <code>configfilename</code>,
becoming the actual configuration file. If there is an existing
<code>configfilename</code>, the old settings in <code>configfilename</code>
which are still valid will be kept in the new <code>configfilename</code>.</p>

<p>This only works as long as both the old and the new configuration files
are in the new format, so this will actually take effect with your next
upgrade Courier-IMAP. If the previous installed version of Courier-IMAP did
not use the new format for configuration files (1.2.3 and earlier), the old
configuration file is backed up to <code>configfilename.bak</code>.</p>

<p>The recommended procedure for upgrading from versions 1.2.3 and earlier is
as follows:</p>

<p>The recommended upgrade procedure is as follows:</p>
<ul>
  <li>Back up <code>@defaultprefix@/etc</code></li>
  <li>Follow the installation procedures, below</li>
  <li>After installing, manually edit all configuration files. Restore, by
    hand, any custom configuration settings.</li>
</ul>

<p>All configuration files are kept in the configuration directory. Nothing
else in <code>@defaultprefix@</code> is configurable. Do not simply overwrite
1.3.0 configuration files with configuration files from the previous version.
It's tempting, but don't do it. It may work, but you will lose the automatic
upgrade capability for future releases.</p>

<h3>Upgrading from Courier-IMAP 1.1 or earlier</h3>

<p>Note that Courier-IMAP 1.2 includes a compatible POP3 server, and the
installation script will also install a POP3 server on your system. Even
though it is installed, you are not required to use it, but you still need to
be aware of its existence. If you install the RPM build of Courier-IMAP,
you're going to get the POP3 server started at system boot. If you do not
need POP3 services, edit both the <code>pop3d.config</code> and
<code>pop3d-ssl.config</code> configuration files, and set
<code>POP3DSTART</code> and <code>POP3DSSLSTART</code> to NO</p>

<h3>Upgrading from Courier-IMAP 1.0 or earlier</h3>

<p>If the server is running, manually stop the server before installing the
new version.</p>

<h2><a name="install" id="install">INSTALLATION</a></h2>

<p>To compile and install the Courier-IMAP server (this is the short version,
a longer version follows):</p>
<pre> 
$ ./configure [ options, see below ]
$ make
$ make check       # Note - the --enable-workarounds-for-imap-client-bugs
                   # option to configure will result in make check FAILING.
$ su root
# make install     # Or, make install-strip, to strip the executables.
# make install-configure   # Install configuration files.

                   # Start the authdaemond process</pre>

<blockquote>
  <p><b>NOTE</b></p>

  <p>You MUST run the <code>configure</code> script as normal user, not root.
  Did you extract the tarball as root? It won't work. Remove the extracted
  source code. Log in as a normal user. Extract the source code as a normal
  user, then run <code>configure</code>. You will do everything as a normal
  user, except for the final step of installing the compiled software.</p>
</blockquote>

<blockquote>
  <p><b>NOTE</b></p>

  <p>Courier-IMAP does not use <code>inetd</code> or <code>xinetd</code>. Any
  <code>inetd</code> or <code>xinetd</code> configuration settings for the
  IMAP and POP3 ports must be turned off. Courier-IMAP will not start if
  <code>inetd</code> or <code>xinetd</code> is listening for IMAP or POP3
  connections.</p>
</blockquote>
<hr>

<p>As mentioned in "Requirements", above, if you are using xBSD, you must use
gmake instead of make.</p>
<hr>

<p>NOTE: The <code>configure</code> script may run as much as 5-10 minutes on
slow machines. It may appear that <code>configure</code> is stuck in a loop,
but that's an illusion. Courier-IMAP is built from a collection of modular
components, each with its own configuration script. The configuration scripts
share a lot of common code, leading to an initial impression that the same
configuration script is being repeatedly run.</p>

<p>See below for a description of the options to the <code>configure</code>
script.</p>

<p><b>WARNING:</b> set your umask to 022 before running <code>make
install</code> or <code>make install-strip</code>.</p>

<p>You should try <code>make install-strip</code> first. Use <code>make
install</code> if <code>make install-strip</code> fails.</p>

<p>The configure script accepts certain options, but the defaults should be
fine most of the time. <code>make install</code> puts everything in
<code>@defaultprefix@</code>. If the directory <code>/etc/pam.d</code>
exists, <code>make install</code> creates <code>/etc/pam.d/imap</code> and
<code>/etc/pam.d/pop3</code>, overwriting any existing files. If you have
some other IMAP server installed, this means that you will want to save your
existing configuration in <code>/etc/pam.d/{imap|pop3}</code>.</p>

<p>"<code>make check</code>" performs some internal sanity checks. If
<code>make check</code> fails, something is wrong, and Courier-IMAP may not
work for you reliably. Certain options are documented to cause <code>make
check</code> to fail, due to different IMAP protocol behavior. If you need to
use those options, first compile Courier-IMAP without them, run make check,
and if all goes well extract the source code again in a different directory,
then build it for the second time using your options.</p>

<p>After installation, you will need to review the files in
<code>@defaultprefix@/etc</code> and make any changes you deem necessary,
including:</p>
<ul>
  <li>If you do not want to create and use virtual mailboxes, you should
    remove <code>authuserdb</code> from <code>AUTHMODULES</code>. If
    <code>AUTHMODULES</code> contains "<code>authdaemon</code>", you will
    have another configuration file, <code>authdaemonrc</code>. Remove
    <code>authuserdb</code> from <code>authdaemonrc</code> instead.</li>
  <li>The configuration script automatically selects whatever authentication
    modules can be used on your system, but you may not necessarily want to
    use them. For example, if your system has OpenLDAP libraries installed,
    the <code>authldap</code> module gets compiled and installed, even though
    you might use LDAP for some other purposes, not necessarily
    authentication. If that's the case, remove <code>authldap</code> from the
    <code>AUTHMODULES</code> entry in the <code>imapd</code> configuration
    file, or from <code>authdaemonrc</code>, whatever the case might be.</li>
  <li>If you're using PAM authentication (<code>authpam</code> gets compiled
    and installed), you will have to tell your PAM library how to
    authenticate the "<code>imap</code>" service and the and
    "<code>pop3</code>" service (if you intend to use the bundled POP3 server
    too). What you need to tell your PAM library is something that you will
    have to figure out by yourself, because it depends on the version of your
    PAM library, and your operating system.
    <p>If the directory <code>/etc/pam.d</code> exists, the installation
    script will automatically install <code>/etc/pam.d/imap</code> and
    <code>/etc/pam.d/pop3</code>, but that's just for starters. You will
    still have to inspect its contents and adjust the full pathname to the
    PAM modules, if necessary.</p>

    <blockquote>
      <b>NOTE:</b> If you have existing <code>imap</code> and
      <code>pop3</code> PAM configuration files, installed by some other
      IMAP/POP3 server, they will be overwritten!</blockquote>
    <p>Old versions of the PAM library, do not use the
    <code>/etc/pam.d</code> directory. Instead they use a single
    configuration file <code>/etc/pam.conf</code>. Here's an example of what
    needs to be added to <code>/etc/pam.conf</code> on FreeBSD 4.0. NOTE:
    other platforms may need something similar:</p>
    <pre>imap  auth    required        pam_unix.so      try_first_pass
imap  account required        pam_unix.so
imap  session required        pam_permit.so
pop3  auth    required        pam_unix.so      try_first_pass
pop3  account required        pam_unix.so
pop3  session required        pam_permit.so</pre>
    <p>Your PAM library may use pam_pwdb.so instead of pam_unix.so; consult
    the documentation for your PAM library for more information.</p>
  </li>
</ul>

<p><code>configure</code> should automatically detect if you use
<code>indimail</code>, and compile and install the <code>authvchkpw</code>
authentication module.</p>

<p>After running <code>make install</code> or <code>make install-strip</code>
you will then have to modify your system's startup scripts to run
Courier-IMAP when your system boots.</p>

<p>Use the following command to start the Courier-IMAP server:</p>
<pre> 
$ @defaultprefix@/libexec/imapd.rc start</pre>

<p>This assumes that Courier-IMAP is installed in
<code>@defaultprefix@</code>. Use the following command to stop
Courier-IMAP:</p>
<pre> 
$ @defaultprefix@/libexec/imapd.rc stop</pre>

<p>You will have to add these commands to your system startup/shutdown
scripts.</p>

<h4>IMAP over SSL</h4>

<p>To add SSL support you have to install OpenSSL before installing
Courier-IMAP. Download OpenSSL from <a target="_blank"
href="http://www.openssl.org/"><code>http://www.openssl.org/</code></a>.
Follow the instruction in OpenSSL package to install it and configure it. SSL
support in Courier-IMAP has been tested with OpenSSL 0.9.5a.</p>

<p>The <code>@defaultprefix@/lib/imapd-ssl</code> configuration file sets
some additional options for SSL support, which you may need to adjust.
Consult that configuration file for additional information. Then, you also
have to run the <code>@defaultprefix@/libexec/imapd-ssl.rc</code> script from
your system startup and shutdown scripts, just like the
<code>@defaultprefix@/libexec/imapd.rc</code> script. You may accept both SSL
and non-SSL connections by running both scripts.</p>

<p>Note that SSL requires a valid, signed, X.509 certificate to be installed
where Courier-IMAP expects to find it. The default location for the X.509
certificate, in PEM format, is <code>@defaultprefix@/share/imapd.pem</code>.
The X.509 certificate must be signed by a certificate authority that is known
to the IMAP client. You can generate your own self-signed certificate by
running the script <code>@defaultprefix@/share/mkimapdcert</code> which will
work too, except that IMAP clients using SSL will display a warning message
the first time they connect to the server. To get rid of the warning message
you'll have to pay for a signed X.509 certificate. The gory details of
setting up SSL is beyond the scope of this document, and you should consult
the OpenSSL documentation for more information.</p>

<p>The <code>mkimapdcert</code> script will not overwrite an existing
<code>imapd.pem</code> certificate, in order to allow precompiled packages to
simply call <code>mkimapdcert</code> after installation, without worry.</p>

<h4>The bundled POP3 server</h4>

<p>The POP3 server included with Courier-IMAP provides POP3 access to INBOX,
and that's about it. Enabling the POP3 server is very similar to enabling the
IMAP server, with the following differences:</p>

<p>The configuration files are <code>@defaultprefix@</code>/etc/pop3dand
<code>@defaultprefix@</code>/etc/pop3d-ssl.</p>

<p>The startup/shutdown scripts are
<code>@defaultprefix@</code>/libexec/pop3d.rcand
<code>@defaultprefix@</code>/libexec/pop3d-ssl.rc.</p>

<p>The SSL certificate is <code>@defaultprefix@/share/pop3d.pem</code>, and
the <code>@defaultprefix@/share/mkpop3dcert</code> script can be used to
create a self-signed SSL certificate for testing purposes.</p>

<h4>System-V style startup</h4>

<p>If your system uses System-V style startup scripts, take a look at
<code>courier-imap.sysvinit</code> - this is a sample
<code>/etc/init.d</code> script. <code>courier-imap.sysvinit</code> is
created by <code>configure</code>. In most cases it can be merely copied to
<code>/etc/init.d</code> and <code>/etc/rc?.d</code> directories (with the
execute permission bit turned on).</p>

<p>The sample startup script will check if IMAP or POP3 over SSL is enabled.
The sample startup script automatically creates dummy SSL certificates the
first time it is executed.</p>

<h4>Options to <code>configure</code>:</h4>
<ul>
  <li><code>--prefix=pathname</code> - install here, instead of
    <code>@defaultprefix@</code></li>
  <li><code>--without-ipv6</code> - do not compile IPv6 support. The
    <code>configure</code> automatically checks if IPv6 support is available,
    and enables it automatically. This option suppresses IPv6 support, even
    if it's available. IPv6 support means that Courier-IMAP will create an
    IPv6 socket and accept IPv6 connections. <code>--without-ipv6</code>
    should be used if your system does not fully support IPv6, or if its
    implementation is buggy. Most Linux distributions now ship with IPv6
    support in glibc, but without compiling the kernel for IPv6 support. This
    results in <code>modprobe</code> regularly complaining in
    <code>/var/log/messages</code> about the fact that it can't load the IPv6
    module. Use <code>--without-ipv6</code> to turn off IPv6 support, if that
    bothers you.</li>
  <li><code>--enable-unicode</code> - include the ability to search and sort
    messages in character sets other than the default ISO-8859-1/US-ASCII.
    All character set tables supported by Courier-IMAP will be included. See
    below for more details.</li>
  <li><code>--enable-unicode=<i>charset,charset,...</i></code> - include
    ability to search and sort messages, but only for these character sets.
    See below for more details.</li>
  <li><code>--without-<i>module</i></code> - explicitly specify that the
    authentication module named "<i>module</i>" should not be installed. See
    below for more details. Example: <code>--without-authdaemon</code>.</li>
  <li><code>--bindir=pathname</code> , <code>--mandir=pathname</code> -
    override default names of subdirectories under <code>prefix</code>. See
    below for more information.</li>
  <li><code>--with-db=db</code> - Use the DB library instead of the GDBM
    library You must have either the GDBM or the DB library installed. If
    both are present, GDBM is selected unless you use this option. The
    GDBM/DB library is used by Courier for certain functions.</li>
  <li><code>--with-piddir=dir</code> - use dir/imapd.pid to store
    couriertcpd's process ID.</li>
  <li><code>--with-syslog=DEST</code> - select syslog destination, giving one
    of the facility codes from syslog.h such as "LOCAL7". Defaults to
  "MAIL".</li>
  <li><code>--with-userdb=file</code> - use <i>file</i> instead of
    <code>@userdb@</code> (also means that userdb.dat and userdbshadow.dat
    are appropriately renamed).</li>
  <li><code>--enable-workarounds-for-imap-client-bugs</code> - there are a
    number of various bugs in certain IMAP clients. The current list of
    broken IMAP clients consists of Netscape Messenger and Sun's StarOffice.
    This option enables some workarounds for some bugs in these clients,
    however, note that this may break compatibility with software that
    correctly implements IMAP4rev1. Additionally, "<code>make check</code>"
    will fail when this option is used. See <code>imap/BUGS.(html|txt)</code>
    for more information. NOTE - if this option is used, <code>make
    check</code> WILL FAIL. You should first configure Courier-IMAP without
    this option, run <code>make check</code>, then reconfigure Courier-IMAP
    with this option.</li>
  <li><code>--with-trashquota</code> - include deleted messages, and the
    Trash folder, in the estimated quota usage for maildirs. Quotas are
    optional, see the file maildir/README.maildirquota.html for more
    information. The default configuration does not count messages marked as
    deleted (but not yet expunged) and the contents of the Trash folder
    (which are automatically purged by the server) against the quota usage.
    NOTE - if this option is used, <code>make check</code> WILL FAIL. You
    should first configure Courier-IMAP without this option, run <code>make
    check</code>, then reconfigure Courier-IMAP with this option.</li>
  <li><code>--with-dirsync</code> - after saving a new message to a maildir
    (the <code>IMAP</code> <code>COPY</code> and <code>APPEND</code>
    commands) explicitly sync the maildir's <code>directory</code> directory.
    There's a school of thought which believes that the Linux ext2 filesystem
    requires the parent directory to be synced, in addition to the new
    message file that's just been written to disk. There's another school of
    thought that thinks that this issue is completely blown out of
    proportion, and is really nothing more than a tempest in a teapot.
    However -- to accomodate the former school of thought -- this option adds
    a little bit of extra code to sync the parent directory.</li>
</ul>

<h4>Foreign character set sorting/searching</h4>

<p>The Courier-IMAP server can search and sort messages using other than the
default us-ascii/iso-8859-1 character set. You can find the list of available
character sets in the file <code>unicode/charsetlist.txt</code>.</p>

<p>The default is to include only the ISO-8859-1/US-ASCII character set. Use
the <code>--enable-unicode</code> option to include all available character
sets.</p>

<p>It is also possible to include translation tables only for selected
character sets. Example:</p>

<p><code>--enable-unicode=iso-8859-1,utf-8,iso-8859-10</code></p>

<p>Technically, IMAP servers must support the UTF-8 character set, however
few IMAP clients (I've yet to see one, actually) care about UTF-8, so the
UTF-8 character set is optional in Courier-IMAP. The only required character
set - which is always included, explicitly or implicitly - is
ISO-8859-1/US-ASCII.</p>

<p>Note that character set translation tables need substantial memory. This
should not be a problem in most cases. Most compilers will place the
read-only character set tables into a shared text segment, that's shared by
all running servers. <code>--enable-unicode</code> should not really be much
of a burden for most modern operating systems.</p>

<p>Attentive individuals will observe that all character set tables are
compiled even without the <code>--enable-unicode option</code>. That is
normal -- only the explicitly selected character set tables will actually
make it into the final executable.</p>

<h4>Installation directories</h4>

<p>Unless the options <code>--prefix</code>, <code>--bindir</code>, or
<code>--mandir</code> are used, everything will be installed in the directory
<code>@defaultprefix@</code>.</p>

<p>Use the <code>--prefix</code> option to specify a different directory.
This directory will have the following subdirectories:</p>
<ul>
  <li><code>etc</code> - configuration files</li>
  <li><code>bin</code> - binaries</li>
  <li><code>sbin</code> - superuser binaries</li>
  <li><code>libexec</code> - additional binaries</li>
  <li><code>man</code> - manual pages</li>
  <li><code>share</code> - scripts and data files</li>
  <li><code>var</code> - temporary files used by the
    <code>authdaemond</code>, daemon process (if the <code>authdaemon</code>
    authentication module is selected).</li>
</ul>

<p>Having everything installed underneath one directory allows its contents
to be easily backed up, before a newer version of <code>courier-imap</code>
is installed. Reverting to a previous version is as simple as restoring from
backup.</p>

<p>Because some binaries in <code>bin</code> and <code>sbin</code> may be
executed from the command line, it will be necessary to change your
systemwide global startup script to add this directory to the default
<code>PATH</code>. Additionally, it will also be necessary to modify the
configuration of the <code>man(1)</code> command so that it can find
Courier-IMAP's manual pages in this directory:</p>
<pre>        PATH="@defaultprefix@/bin:$PATH"
        if test -w /etc
        then
                PATH="@defaultprefix@/sbin:$PATH"
        fi
        export PATH
        MANPATH="@defaultprefix@/man:$MANPATH"
        export MANPATH</pre>

<p>As an alternative, you may use the <code>--bindir</code> and
<code>--mandir</code> options in order to install binaries to
<code>/usr/local/bin</code> and the manual pages to
<code>/usr/local/man</code>, which should already be searched by default:</p>
<pre>        ./configure --bindir=/usr/local/bin --mandir=/usr/local/man</pre>

<p>Other familiar configure options, such as <code>--sysconfdir</code> and
<code>--datadir</code> work too, for those who know how to properly use
them.</p>

<h2><a name="authmods" id="authmods">AUTHENTICATION MODULES - GENERAL
NOTES</a></h2>

<p>Courier now has extensive authentication debugging; for a guide see <a
href="authlib/README.authdebug.html">authlib/README.authdebug.html</a></p>

<p>An authentication module does a few things besides checking if a userid
and password are valid. It's job also includes specifying the location of the
primary maildir, and its system user and group id.</p>

<p>There are several authentication modules available. Each authentication
module implements a different way of authenticating logins, and not all
authentication modules can be used by everyone. Some authentication modules
can be used only on systems that have certain libraries or software installed
separately.</p>

<p>The <code>configure</code> script checks if the required libraries and
software are available for each authentication module. If the required
libraries and support files are available, the <code>configure</code> script
includes the corresponding authentication module. The option
<code>--without-<i>module</i></code> instructs <code>configure</code> not to
compile an authentication module, even if it could. Multiple
<code>--without</code> options are, of course, allowed (each one specifying a
different authentication module).</p>
<ul>
  <li><code>authpwd</code> - this module looks up userids and passwords in
    your <code>/etc/passwd</code> file, or the equivalent NIS map (as
    supported by your system's <code>getpw</code> library).</li>
  <li><code>authshadow</code> - this module is like <code>authpwd</code>,
    except that it should be used on systems that use shadow password files,
    <code>/etc/shadow</code>.</li>
  <li><code>authpam</code> - this module should be used on systems that have
    the PAM library. With this module, Courier-IMAP will use whatever PAM
    modules you specify for authenticating the "imap" PAM service.
    Essentially, <code>authpam</code> allows any PAM module to be used for
    authenticating logins. NOTE: in addition to including this module, you
    will have to take additional, site-specific, steps in order to configure
    your PAM library for the "imap" PAM service. The specific details
    regarding your PAM configuration differs from system to system, and you
    should consult your own documentation. It might be tempting to throw in a
    towel and use <code>authshadow</code> or <code>authpwd</code> if you
    cannot figure out how to install PAM support, however that is not
    advisable. It is highly recommended to use <code>authpam</code> wherever
    the PAM library is available.
    <p>Additionally: PAM is used only for password validation. The home
    directory and the user and group IDs for the account are still taken from
    the system password file.</p>
  </li>
  <li><code>authuserdb</code> - this module uses GDBM or DB database files,
    usually <code>/etc/userdb.dat</code> and
    <code>/etc/userdbshadow.dat</code> to look up userids and passwords.
    These files are GDBM or DB databases that are loosely equivalent in
    function to <code>/etc/passwd</code> and <code>/etc/shadow</code>. These
    databases are maintained indirectly by several Perl scripts - included
    with Courier-IMAP - which build these database files from a plain text
    file, usually called <code>/etc/userdb</code>. This file can be modified
    by any text editor, or it can be managed by some useful Perl scripts
    which are included. <code>/etc/userdb</code> may also be a subdirectory
    that has multiple text files in the same format, which are simply
    concatenated. <code>userdb</code> allows creation of virtual mail
    accounts that do not have a corresponding login account -- virtual mail
    accounts that can share the same, reserved, system userid.
    <code>/etc/userdb</code> can also be used to completely supersede
    <code>/etc/passwd</code>. With many accounts it can be quite a drain to
    have to continuously linearly scan <code>/etc/passwd</code> in order to
    look up an account. Instead, a fast database lookup can retrieve the same
    information from the database file. Read the included manual pages,
    starting with <code><code>userdb(8)</code></code> for more
  information.</li>
  <li><code>authcram</code> - this module is similar to
    <code>authuserdb</code> (it uses the same databases), but implements
    CRAM-MD5 authentication. See below for more information.</li>
  <li><code>authvchkpw</code> - this is another virtual mail database lookup
    module, except that it uses the indimail vpasswd files. This module is
    provided for a quick way to use your existing indimail vpasswd files.
    Where possible, you should convert over to <code>/etc/userdb</code>. The
    included script <code>vchkpw2userdb(8)</code> might be of some help in
    doing so.</li>
  <li><code>authldap</code> - authenticates against an LDAP server. This is a
    new module included with Courier-IMAP. See below for more information.<br>
  </li>
  <li><code>authmysql</code> - native MySQL authentication module Read
    <code>authlib/README.authmysql</code> for information on how to set up
    this module.</li>
  <li><code>authpgsql</code> - native PostgreSQL authentication module
    PostgreSQL configuration is nearly identical to MySQL information, see
    <code>authlib/README.authpostgres.html</code> for more information.</li>
  <li><code>authdaemon</code> - background daemon authentication proxy. See
    below for more information.</li>
  <li><code>authcustom</code> - this is a dummy authentication module that
    dose not authenticate anything. It is a placeholder that can be used to
    implement any site-specific authentication code, written in C. To
    implement some site-specific authentication, inspect the contents of the
    <code>authlib/preauthcustom.c</code> file for additional instructions.<br>
  </li>
</ul>

<p>It is possible to include more than one authentication module. For
example, if you select both <code>authuserdb</code> and <code>authpam</code>,
each login will first be authenticated against <code>/etc/userdb</code>. If
Courier-IMAP cannot find the account in <code>/etc/userdb</code>, it will
then attempt to authenticate using the PAM library.</p>

<p><code>configure</code> uses the following logic to determine which
authentication modules will be included by default:</p>
<ul>
  <li><code>authuserdb/authcram</code> - these modules are always included by
    default</li>
  <li><code>authpam</code> - <code>configure</code> attempts to detect if the
    PAM library is installed, or not. <code>--without-authpam</code> can be
    used to avoid installing <code>authpam</code> on systems that do have a
    PAM library installed. Hopefully, you will have a good reason to do
    something this silly.</li>
  <li><code>authldap</code> - <code>configure</code> checks if OpenLDAP is
    installed. If OpenLDAP development libraries are available,
    <code>authldap</code> will be compiled and installed.</li>
  <li><code>authpwd</code> , <code>authshadow</code> - whether or not these
    modules are installed by default depends upon what happened with
    <code>authpam</code> and <code>authldap</code>. If PAM or LDAP support is
    installed, via <code>authpam</code> or <code>authldap</code>, these two
    modules are usually not necessary, because the PAM library, or the LDAP
    server, provides this functionality. If PAM support is unavailable, these
    modules will be installed by default.</li>
  <li><code>authvchkpw</code> - this module is compiled by default only if
    the <code>indimail</code> account is defined.</li>
  <li><code>authmysql</code> - this module is compiled if MySQL client
    libraries are available.</li>
  <li><code>authpgsql</code> - this module is compiled if PostgreSQL client
    libraries are available.</li>
  <li><code>authdaemon</code> - this module is always compiled by default.
    See below for more information.</li>
</ul>

<h2>Confirming selected authentication options</h2>

<p>You can find out what authentication modules were actually used, but you
must first run <code>make</code> successfully. Running <code>make</code>
compiles the <code>authinfo</code> program in the <code>authlib</code>
subdirectory. This program tells you what authentication modules were
compiled.</p>

<h2><a name="userdb" id="userdb"><code>USERDB</code> AUTHENTICATION
MODULE</a></h2>

<p><i>userdb</i> is a way to implement many virtual mailboxes - many
mailboxes that do not have to have a separate system userid allocated for
each one, and there is no system login associated with each mailbox.
<i>userdb</i> uses a database for mapping virtual addresses to physical
maildirs. It should be scalable to thousands of mailboxes. It can also be
used to replace linear searches of <code>/etc/passwd</code> with a database
lookup, see <code>pw2userdb(8)</code>.</p>

<p>Note - you still MUST use some valid system userid and groupid that is
shared by all virtual mailboxes. Instead of allocating a single userid and
groupid per each mailbox, the same userid and groupid is used for all of
them.</p>

<p>This is a rough overview of using userdb. For additional information, read
<code>makeuserdb(8)</code>, and <code>userdb(8)</code>. All the scripts will
be installed in <code>@defaultprefix@</code>, so look for them there.</p>

<p>Courier-IMAP can use the <code>userdb</code> database simply by the virtue
of installing the <code>authuserdb</code>authentication module, which happens
by default. The tricky part is creating the database. Hopefully, it's only
tricky once, and the second time it won't be so tricky any more. The
<code>userdb</code> configuration is extremely flexible, and there are many
ways of actually setting up the database.</p>

<p>The best way to describe how <code>userdb</code> works is to try to create
one virtual mail account. As mentioned before, virtual mailboxes still need
one system account to be used for uid/gid purposes. Let's call this system
account "vmail".</p>

<h3>Simple userdb setup.</h3>

<p>This approach should be used if you do not have many virtual mailboxes.
It's very simple, but quickly becomes cumbersome if you administer many
virtual mailboxes.</p>

<p>Create an empty <code>@userdb@</code>.</p>
<pre> 
# cp /dev/null <code>@userdb@</code>
# chmod 700 <code>@userdb@</code></pre>

<p><code>@userdb@</code> must have 700 permissions.</p>

<p>Now, run the script <code>pw2userdb</code>. This script converts the
contents of your <code>/etc/passwd</code> to the <code>@userdb@</code> format
(including the contents of <code>/etc/shadow</code>, this is why permissions
on <code>@userdb@</code> must be 700). This script is usually used where you
want to convert a very large <code>/etc/passwd</code> to
<code>@userdb@</code>. <i>userdb</i> applications can now use a fast
<i>userdb</i> database instead of a linear scan of <code>/etc/passwd</code>
in order to look up system accounts. However, you probably don't want to do
use this feature right now, so what you simply want to do is take the output
of <code>pw2userdb</code>, and find the entry for the vmail account that you
created earlier. Look for a line that starts with 'vmail' followed by tab,
followed by familiar fields from <code>/etc/passwd</code>. Save the output of
<code>pw2userdb</code> in a temporary file, edit it, and remove everything
except the line containing vmail, and the very next line, which is a special
entry that maps vmail's userid back to the vmail record.</p>

<p>Here's what you might find in the output of <code>pw2userdb</code>:</p>
<pre> 
vmail   uid=1012|gid=1012|home=/home/vmail|systempw=*
1012=   vmail</pre>

<p>The actual numerical values and the home directory location may vary. Save
these two lines as <code>@userdb@</code>, and set the permissions on
<code>@userdb@</code> to 700:</p>
<pre> 
$ chmod 700 <code>@userdb@</code></pre>

<p>Now, with that out of the way, let's really create a virtual account. In
this example we'll create a virtual mailbox for 'john@example.com'.</p>
<pre> 
# su vmail
$ cd $HOME
$ maildirmake Maildir-john-example
$ exit
#</pre>

<p>You may need to specify a full path to your <code>maildirmake</code>
program. The end result is that you created
<code>$HOME/Maildir-john-example</code> in vmail's account.</p>

<p>The next step is to configure your mail server to deliver mail for
john@example.com directly into the maildir
<code>~vmail/Maildir-john-example</code>. How that's done depends on the mail
server that you use.</p>

<p>Now, let's connect the dots here, and create an entry in
<code>@userdb@</code> for <code>john@example.com</code>:</p>
<pre> 
# userdb "john@example.com" set home=/home/vmail \
                                mail=/home/vmail/Maildir-john-example \
                                uid=UUU gid=GGG</pre>

<p>This command runs a Perl script named <code>userdb</code> , which is
installed, by default in <code>@defaultprefix@/sbin</code>. Replace UUU and
GGG with the userid and groupid of the vmail account. If you now look in
<code>@userdb@</code>, you will see that a new record for john@example.com
has been appended to the end of the file.</p>

<p>We're not finished yet. We need to set the IMAP password for this
mailbox:</p>
<pre> 
# userdbpw | userdb "john@example.com" set imappw</pre>

<p>If you are running Red Hat Linux 6.0, or higher, you can specify the -md5
option to <code>userdbpw</code>, in order to use an MD5 password hash,
instead of crypt. Specify "<code>systempw</code>" instead of
"<code>imappw</code>" if you would like to use the same password for the POP3
server too. The imappw field is only checked by the IMAP server. If not
defined, <code>systempw</code> is used instead. The field <code>pop3pw</code>
will be checked by the POP3 server that's bundled with Courier-IMAP. If it is
not defined the POP3 server will check <code>systempw</code> too</p>

<p>Finally, compile the database:</p>
<pre> 
# makeuserdb</pre>

<p>This command creates the actual database, <code>@userdb@.dat</code> and
<code>@userdb@shadow.dat</code> from the plain text file
<code>@userdb@</code>. Courier-IMAP will now start accepting logins to this
mailbox. Adding and removing mailboxes can be done while Courier-IMAP is
running.</p>

<p>Courier-IMAP reads <code>@userdb@.dat</code> and
<code>@userdb@shadow.dat</code> only. The plain text source,
<code>@userdb@</code> is not read by Courier-IMAP itself. Changes take effect
only when <code>makeuserdb</code> runs.</p>

<h3>Large virtual domain farm.</h3>

<p>The previous approach uses a single flat file, <code>@userdb@</code>. This
might be a bit cumbersome if you have thousands of virtual mailboxes in many
domains. Here's an alternative approach that can scale to thousands of
domains and mailboxes.</p>

<p>Instead of creating a <code>@userdb@</code> file, create a
subdirectory:</p>
<pre> 
# mkdir <code>@userdb@</code>
# chmod 700 <code>@userdb@</code></pre>

<p>Now, create <code>@userdb@/default</code>, containing pw2userdb's output
for the vmail account, as previously described.</p>

<p>This time, you probably want to create all mailboxes for the same domain
in a separate subdirectory:</p>
<pre> 
# su vmail
$ cd $HOME
$ mkdir -p domains/example-com
$ maildirmake domains/example-com/john
$ exit</pre>

<p>The idea is that all the maildirs for <code>@example.com</code> will be
stored in <code>~vmail/domains/example-com</code>. All maildirs for
<code>domain.org</code> will be stored in
<code>~vmail/domains/domain.org</code>. The actual layout and naming
conventions are entirely up to you to define.</p>

<p>Now, configure your mail server to deliver mail for john@example.com into
this maildir.</p>

<p>Here's how configure <code>@userdb@</code>.</p>
<pre> 
$ userdb "example-com/john@example.com" set home=/home/vmail \
                                mail=/home/vmail/domains/example-com/john \
                                uid=UUU gid=GGG</pre>

<p>This creates the file <code>@userdb@</code>/example-com (the first
parameter to the <code>userdb</code> command), and appends a record named
"john@example.com". You will store all <i>userdb</i> entries for
<code>@example.com</code> in the file <code>@userdb@</code>/example-com. All
entries for <code>@domain.org</code> will be maintained in
<code>@userdb@</code>/domain-org, and so on.</p>
<pre> 
$ userdbpw | userdb "example-com/john@example.com" set imappw</pre>

<p>This sets the IMAP access password for this account. Finally:</p>
<pre> 
$ makeuserdb</pre>

<h2><a name="vchkpw" id="vchkpw"><code>VCHKPW</code> AUTHENTICATION
MODULE</a></h2>

<p>This authentication module is provided for legacy support. New installs
should use the <code>authuserdb</code> module. It is possible to convert
indimail/vchkpw single userid authentication passwd files to
<code>@userdb@</code> using the <code>vchkpw2userdb</code> script. See
<code>vchkpw2userdb(8)</code> for more information.</p>

<h2><a name="ldap" id="ldap"><code>LDAP</code> AUTHENTICATION MODULE</a></h2>

<p>This module attempts to authenticate against an LDAP server. This option
installs a sample configuration file, which is
<code>@defaultprefix@/etc/authldaprc</code> by default. You will need to edit
this file in order to configure LDAP authentication. This configuration file
defines the location of your LDAP server, as well as the names of attributes
used to perform LDAP authentication. See the comments in the sample
configuration file, and the <code>authldap(7)</code> manual page, for more
information.</p>

<h2><a name="daemon" id="daemon"><code>DAEMON</code> AUTHENTICATION
MODULE</a></h2>

<p>Selecting the <code>authdaemon</code> module (it is selected by default)
will compile and install a separate process, called
"<code>authdaemond</code>". The "<code>authdaemond</code>" process is started
and stopped by the <code>imapd.rc</code>, <code>imapd-ssl.rc</code>,
<code>pop3d.rc</code> and <code>pop3d-ssl.rc</code>. ATTENTION: all four
scripts stop <code>authdaemond</code>. Typically all the scripts are called
together, at system startup and shutdown. If you need to stop just ONE
service, find the pid and kill it manually. Otherwise
<code>authdaemond</code> stops and nobody can log in anymore.</p>

<p>The <code>authdaemon</code> module (and the <code>authdaemond</code>
process that goes with it) is very useful when a database is used as an
authentication back-end (like MySQL, PostgreSQL, or OpenLDAP). The
<code>authdaemon</code> module offers an alternative to compiling all the
authentication code as standalone modules. Enabling <code>authdaemon</code>
in addition to any other modules will result in <code>authdaemon</code> being
built as the only "official" authentication module. All other modules are
compiled into a separate process, "<code>authdaemond</code>".</p>

<p>Certain authentication modules -- such as <code>authldap</code>,
<code>authpgsql</code> and <code>authmysql</code> -- connect to an external
database in order to validate an authentication request. The database
connection is created and destroyed for every login request, and with a large
number of connections and authentications it is better to have a single
daemon process running in a background, with a semi-permanent connection to
the database, handling authentication requests. That's exactly what
<code>authdaemond</code> does.</p>

<p>The <code>authdaemon</code> authentication module takes an authentication
request, and forwards it to the permanently running <code>authdaemond</code>
process, waits for the answer, and returns the result to the application.
Courier-IMAP, by the virtue of its modular design, "sees" only the
<code>authdaemon</code> authentication module. Behind the scenes,
<code>authdaemon</code> takes every authentication request and passes it
along to the <code>authdaemond</code> for processing, where all the real
authentication happens.</p>

<p>The <code>@defaultprefix@/etc/authdaemonrc</code> configuration file sets
several parameters for the <code>authdaemond</code> process. See the comments
in this file for more information. Currently, <code>authdaemonrc</code> sets
two parameters: number of daemon processes, and which available
authentication modules are used.</p>

<p>Although <code>authdaemond</code> might be built with several
authentication modules, not all of them must be used. This allows for a
single <code>authdaemond</code> binary to be made that gets installed on
multiple systems with different authentication needs. The default module list
specified in <code>authdaemonrc</code> is a list of all the available
authentication modules.</p>

<p>All available authentication modules are compiled by default. Although it
is possible to disable unwanted authentication modules via the
<code>configure</code> script, it is better to disable them at runtime. The
list of all active authentication modules is read from the
<code>authdaemonrc</code> configuration file. Removing an authentication
module from this configuration file disables it.</p>

<p>The number of <code>authdaemond</code> processes is also set in this
configuration file. The more processes that are started, the more
authentication requests can be handled. If <code>authdaemon</code> does not
receive an answer within some amount of time, it will assume an
authentication failure, and abort. Try increasing the number of processes if
you start seeing random authentication failures. However, that should only be
used as a stop-gap measure. If the default number of <code>authdaemond</code>
processes proves to be insufficient, it is far more likely that more
resources are needed for the server (more RAM, a faster disk, or a faster
CPU) in the humble opinion of the author. Increasing the number of processes
should only be used as a stop-gap measure, until a more thorough analysis of
the system performance.</p>

<p>After making any changes to <code>authdaemonrc</code>, run the following
command for these changes to take effect:</p>
<pre>    @defaultprefix@/libexec/authlib/authdaemond restart</pre>

<h3>Alternative <code>authdaemond</code> modules</h3>

<p><code>@defaultprefix@/libexec/authlib/authdaemond</code> is actually a
script. Depending on your system configuration, there may be one or more
different <code>authdaemond</code> binaries installed, and here's why.</p>

<p><code>authdaemond.plain</code> will include all available authentication
modules except for certain "heavy" authentication modules. The current list
of "heavy" authentication modules is <code>authldap</code>,
<code>authpgsql</code>, and <code>authmysql</code>.</p>

<p>If support for a "heavy" authentication module is selected, there will be
an additional binary installed, such as <code>authdaemond.mysql</code>,
<code>authdaemond.pgsql</code> or <code>authdaemond.ldap</code>. The
<code>@defaultprefix@/libexec/authlib/authdaemond</code> script checks if any
"heavy" authentication daemon is installed, and, if so, runs that. Otherwise,
the default <code>authdaemond.plain</code> binary goes in.</p>

<p>This allows an easy way to create binary Courier-IMAP distributions with
and without LDAP, MySQL, or PostgreSQL support. The distributor would simply
build Courier-IMAP on a machine that contains both LDAP/MySQL/PostgreSQL
development libraries, then take everything but
<code>authdaemond.mysql</code>, <code>authdaemond.pgsql</code> and
<code>authdaemond.ldap</code> and roll it into the base Courier-IMAP package.
<code>authdaemond.mysql</code>, <code>authdaemond.pgsql</code>, and
<code>authdaemond.ldap</code> are rolled into separate sub-packages. Loading
a base package installs basic system authentication services. Adding LDAP,
MySQL, or PostgreSQL support is as simple as loading the corresponding
sub-package.</p>

<h2><a name="loginexec" id="loginexec">ACCOUNT INITIALIZATION HOOK</a></h2>

<p>If there is a file or a symbolic link in the maildir called "loginexec",
and if it is executable, then the executable file will be invoked after a
succesful login. If the program terminates with an exit code of 0, the
"loginexec" file (or a symbolic link) will be removed.</p>

<h2><a name="shared" id="shared">USING SHARED FOLDERS</a></h2>

<p>Courier-IMAP supports shared folders. See the file <a
href="README.sharedfolders.html"><code>README.sharedfolders.html</code></a>
for information on how to set up shared folders.</p>

<h2><a name="crammd5" id="crammd5">CRAM-MD5 AUTHENTICATION</a></h2>

<p>CRAM-MD5 authentication allows IMAP clients to authenticate themselves
without sending the password in clear-text over the network. Courier-IMAP now
supports CRAM-MD5 by default, but is not enabled for reasons explained below.
CRAM-MD5 support is implemented by the <code>authcram</code> module, with one
exception - <code>authldap</code>, <code>authpgsql</code>, and
<code>authmysql</code> support CRAM-MD5 authentication if the LDAP or the
MySQL/PostgreSQL server stores clear-text passwords, and not crypt-ed
passwords.</p>

<p>To use CRAM-MD5 it is necessary to use an IMAP client that support
CRAM-MD5 authentication, of course. That's the easy part.</p>

<p>The problem is that it is not possible to use the system password when
logging in using CRAM-MD5. That's because CRAM-MD5 requires the knowledge of
the actual password, in the clear, in order to calculate authentication
tokens (even though that the password itself is not sent in the clear over
the network).</p>

<p>So, implementation of CRAM-MD5 is an advanced task that should be
attempted only when you are comfortable with, and fully understand how
Courier-IMAP works in general. Here's an overview of this procedure:</p>
<ul>
  <li>Install and implement <code>@userdb@</code>, because CRAM-MD5
    authentication uses the <code>@userdb@</code> database (but see below for
    LDAP-specific notes).</li>
  <li>Figure out which accounts are going to use CRAM-MD5 authentication.
    People who do not use an IMAP client that supports CRAM-MD5 can continue
    and log in with the existing system password. But everyone who runs a
    client that supports CRAM-MD5 authentication will need a new password.
    Also, it will be necessary to set up CRAM-MD5 passwords for everyone at
    the same time. As soon as CRAM-MD5 authentication is enabled, all
    CRAM-MD5 enabled clients will attempt to use it. If no password is
    available, Courier-IMAP has no choice but to reject the authentication
    attempt. Once that happens, the client will correctly interpret it as an
    authentication failure (and it is), and the client will not even try to
    authenticate using the system password. Use the following command to
    assign a CRAM-MD5 password:
    <pre>userdbpw -hmac-md5 | userdb <i>userdb</i> set hmac-md5pw
    </pre>
    Then run the <code>makeuserdb</code> command, as always.</li>
  <li>NOTE: CRAM-MD5 authentication is also be supported by
    <code>authldap</code>, <code>authpgsql</code> and <code>authmysql</code>,
    as long as clear-text passwords are used. See below for more information.
    Therefore, if you use LDAP, PostgreSQL, or MySQL, and you store
    clear-text passwords, you <i>should</i> all set and ready to go, and you
    do not need to install <code>/etc/userdb</code>, as described in this
    section.</li>
</ul>

<h3>Enabling CRAM-MD5 authentication</h3>

<p>Because of these unfortunate complexities, CRAM-MD5 authentication is
disabled after installation. When you're ready to use CRAM-MD5, edit the
<code>imapd</code> configuration file and add the "AUTH=CRAM-MD5" keyword to
the IMAP_CAPABILITY environment variable, then restart Courier-IMAP. There
are instructions in the <code>imapd</code> configuration file to that
effect.</p>

<p>If you do not intend to ever use CRAM-MD5 authentication, you can either
specify <code>--without-authcram</code> option to the configure script, or
simply edit <code>imapd</code> and remove authcram from the AUTHMODULES
setting.</p>

<h2><a name="imapsend" id="imapsend">SENDING MAIL VIA AN IMAP
CONNECTION</a></h2>

<p>This server allows using the IMAP connection to send E-mail. Normally, the
IMAP protocol provides only access to mail in an existing mail account, and
mail clients must use SMTP in order to send mail. The Courier-IMAP server has
an optional setting to enable mail to be send via an IMAP connection in a
manner that should work with all existing IMAP mail clients. This can be
useful when an account is logged in from a shared access pool which normally
blocks most access to the SMTP port.</p>

<p>This is implemented by enabling a setting in the <code>imapd</code>
configuration file that designates a folder as a special "Outbox" folder. The
default setting is a folder called "Outbox" (IMAP path INBOX.Outbox), but the
name can be changed to anything. This folder, for the most part, is no
different than any other folder. If a folder by that name doesn't exist, it
needs to be created, just like any other IMAP folder. It looks and acts like
any other folder, except that each message added to the folder, via IMAP's
APPEND or COPY command, will also be mailed out by the Courier-IMAP server to
the addresses listed in the <code>To:</code>, <code>Cc:</code>, and
<code>Bcc:</code> headers.</p>

<p>It should be possible to use this to send mail from any IMAP client by:</p>
<ol>
  <li>Composing a draft message, telling the IMAP client to save the draft
    message in its drafts folder on the IMAP server.</li>
  <li>Opening the drafts folder, and moving or copying the message to the
    Outbox folder.</li>
  <li>The act of copying the message into the Outbox folder will send the
    mail. There won't be any explicit notification to the fact that the
    message was sent, so it's a good idea to include your own E-mail address
    on the Cc: list.</li>
</ol>

<blockquote>
  <p><b>NOTE:</b> it is tempting to configure the IMAP mail client to use
  Outbox as its default folder for saving drafts. Resist the temptation. If
  you forget, you'll save a partially completed draft, which will be then
  obediently mailed out.</p>
</blockquote>

<blockquote>
  <p><b>NOTE:</b> the message, in addition to being sent, will be saved in
  the folder in the normal fashion. After saving the message, reopen the
  Outbox folder and delete the sent message, or move it someplace else.</p>
</blockquote>

<blockquote>
  <p><b>NOTE:</b> when enabled, the Courier-IMAP server will advertize a
  private <code>XCOURIEROUTBOX</code> IMAP capability. It is theoretically
  possible to code an IMAP mail client that reads this capability and
  automatically configures itself accordingly -- when this IMAP capability is
  present -- to send E-mail in the normal way but using the IMAP connection.
  At this time, I'm not aware of any actual mail clients that know how to do
  this.</p>
</blockquote>

<blockquote>
  <p><b>NOTE:</b> many mail clients save some additional internal information
  in headers of draft messages. The internal information is normally removed
  before the mail client sends the message. Make sure that none of this extra
  information is something that should not be mailed out.</p>
</blockquote>

<h2><a name="idle" id="imapsend">REALTIME FOLDER STATUS UPDATES</a></h2>

<p>If the <a target="_blank" href="http://oss.sgi.com/projects/fam/">FAM, the
File Alteration Monitor</a> (<tt>http://oss.sgi.com/projects/fam/</tt>) is
installed it will be possible to allow multiple clients to open the same
folder, and have all clients to be simultaneously notified of any changes to
the folder contents.</p>

<p>After installing the server see the <tt>imapd(8)</tt> manual page for more
information.</p>

<h2><a name="options" id="options">Account OPTIONS</a></h2>

<p>It is possible to adjust certain parameters on an account-by-account
basis. This feature is only available with <code>userdb</code>,
<code>LDAP</code>, <code>MySQL</code>, and <code>PostgresSQL</code>
authentication. Individual account options are not supported with
system-based authentication modules (password/shadow files, or PAM).</p>

<blockquote>
  <p><strong>NOTE</strong></p>

  <p>This account option implementation is used by Courier, Courier-IMAP, and
  SqWebMail. Some of the following information may not be applicable. The
  inapplicable bits should be obvious.</p>
</blockquote>

<p>Account options have a single, uniform implementation by all supported
authentication methods. To summarize, account options are listed as a single
text string: a comma-separated list of "<code>OPTION=value</code>" settings.
At this point, the following options may be used:</p>
<dl>
  <dt><code>disableimap=</code><em>n</em></dt>
    <dd><p>If "n" is 1, disable IMAP access to this account, without
      affecting POP3 and webmail access.</p>
    </dd>
  <dt><code>disablepop3=</code><em>n</em></dt>
    <dd><p>If "n" is 1, disable POP3 access to this account, without
      affecting IMAP and webmail access.</p>
    </dd>
  <dt><code>disablewebmail=</code><em>n</em></dt>
    <dd><p>If "n" is 1, disable webmail access to this account, without
      affecting IMAP and POP3 access.</p>
    </dd>
  <dt><code>sharedgroup=</code><em>name</em></dt>
    <dd><p>Append "name" to the name of the top level virtual shared folder
      index file. This setting restricts which virtual shard folders this
      account could possibly access (and that's on top of whatever else the
      access control lists say). See the virtual shared folder documentation
      for more information.</p>
      <p>For technical reasons, group names may not include commas or "|"
      characters.</p>
    </dd>
</dl>

<p>Account options are specified via the authentication modules in the
following manner:</p>
<dl>
  <dt><strong>userdb</strong></dt>
    <dd><p>Use the <code>userdb</code> command to set a field called
      "<code>options</code>". Example:</p>

      <blockquote>
        <pre>userdb user1@example.com set options=disableimap=1,sharedgroup=44
makeuserdb</pre>
      </blockquote>
      <p>The option text string here is
      "<code>disableimap=1,sharedgroup=44</code>". It specifies two
      options.</p>
    </dd>
  <dt><strong>LDAP</strong></dt>
    <dd><p>Account options are defined by the <code>LDAP_AUXOPTIONS</code>
      setting in the <code>authldaprc</code> configuration file.
      <code>LDAP_AUXOPTIONS</code> consists of a comma-separated list of
      "<code>attribute=setting</code>". "attribute" is the name of an LDAP
      attribute, and "setting" is the corresponding account setting name. The
      value of the attribute becomes the value of the setting. Unless you
      value your sanity, the names of LDAP attributes should be the same as
      the actual setting names (in which case "=setting" may be dropped and
      <code>LDAP_AUXOPTIONS</code> becomes a simple comma-separated list of
      supported settings), but they don't have to be.</p>
      <p><code>LDAP_AUXOPTIONS</code> is nothing more than a simple mapping
      of LDAP attributes to account settings. A <code>LDAP_AUXOPTIONS</code>
      of "shared=sharedgroup,disableimap" means that the LDAP attribute
      called "shared" contains the "sharedgroup" setting, as described
      previously; and an LDAP attribute of disableimap contains the setting
      of the same name.</p>
    </dd>
  <dt><strong>MySQL</strong>, and <strong>PostgreSQL</strong></dt>
    <dd><p>Account options are defined by <code>MYSQL_AUXOPTIONS_FIELD</code>
      or <code>POSTGRESQL_AUXOPTIONS_FIELD</code>, in its corresponding
      configuration file. In the most simplest case, add a character field to
      the database, and put the field name into the
      <code>MYSQL_AUXOPTIONS_FIELD</code> or
      <code>POSTGRESQL_AUXOPTIONS_FIELD</code> configuration file setting.
      For each account, the character field should contain the literal option
      string. Yes, you'll just put "shared=sharedgroup,disableimap"
      literally, in that field.</p>
      <p>Fortunately, there is a cleaner way to do this, which avoid driving
      a database designer batty. Keep in mind that the contents of
      <code>MYSQL_AUXOPTIONS_FIELD</code>/<code>POSTGRESQL_AUXOPTIONS_FIELD</code>
      are simply inserted directly into the SQL query that fetches the
      account information. Both MySQL and PostgreSQL have a rich SQL that can
      be used to manufacture a suitable option string from plain,
      garden-variety, database fields. That is, you may define individual
      table fields like "disableimap", and "disablepop3", then provide a
      suitable (albeit ugly) SQL fragment that combines them together into
      the expected option string. An example of such an SQL string is
      provided in the comments portion of the configuration file.</p>

      <blockquote>
        <p><strong>NOTE</strong></p>
        <p>When using the alternative custom query option, the option string
        is the last field that the custom SQL query should return.</p>
      </blockquote>
    </dd>
</dl>

<h2><a name="smap" id="smap">SMAP</a></h2>

<p>Starting with Courier-IMAP 2.0, the server supports an experimental mail
access protocol, dubbed "Simple Mail Access Protocol". SMAP is an experiment
to provide enhanced mail processing beyond what's currently possible with
IMAP. SMAP's purpose is to prototype and develop advanced mail access
functionality that's not possible with IMAP. SMAP is disabled by default.
Uncomment the <code>SMAP_CAPABILITY</code> setting in the <code>imapd</code>
configuration file in order to enable SMAP. The <a target="_blank"
href="http://www.courier-mta.org/cone/index.html">Cone</a> mail client
supports SMAP.</p>
</body>
</html>
