This code borrows code from danetlsa program by Shumon Huque
I have extracted few parts of the code which just fetches
the TLSA resource records using the function do_dns_queries()

This is how you use the function do_dns_queries()
int
main(int argc, char **argv)
{
    char *cp;
    tlsa_rdata *rp;

	if (argc != 2)
		return (1);
	do_dns_queries(argv[1], 25);
	if (dns_bogus_or_indeterminate) {
		fprintf(stdout, "DNSSEC status of responses is bogus or indeterminate.\n");
		goto cleanup;
	}
	if (addresses == NULL) {
		fprintf(stdout, "No address records found, exiting.\n");
		goto cleanup;
	}
    if (auth_mode == MODE_DANE || auth_mode == MODE_BOTH) {
		if (tlsa_rdata_list == NULL) {
			fprintf(stdout, "No TLSA records found.\n");
			if (auth_mode == MODE_DANE)
				goto cleanup;
		} else
		if (tlsa_authenticated == 0) {
			fprintf(stdout, "Insecure TLSA records.\n");
			if (auth_mode == MODE_DANE)
				goto cleanup;
		} else
		if (v4_authenticated == 0 || v6_authenticated == 0) {
			fprintf(stdout, "Insecure Address records.\n");
			if (auth_mode == MODE_DANE)
				goto cleanup;
		} else
			attempt_dane = 1;
	}
    if (tlsa_rdata_list) {
        fprintf(stdout, "TLSA records found: %ld\n", tlsa_count);
        for (rp = tlsa_rdata_list; rp != NULL; rp = rp->next) {
            fprintf(stdout, "TLSA: %d %d %d %s\n", rp->usage, rp->selector,
                    rp->mtype, (cp = bin2hexstring(rp->data, rp->data_len)));
            free(cp);
        }
    }
cleanup:
	freeaddrinfo(addresses);
	free_tlsa(tlsa_rdata_list);

	return 0;
}
