.TH supervise 8
.SH NAME
supervise \- starts and monitors a service.

.SH SYNOPSIS
\fBsupervise\fR \fIs\fR

.SH DESCRIPTION
\fBsupervise\fR(8) switches to the directory named \fIs\fR and starts ./init
if it exists. It restarts ./init if ./init exits with non-zero status. It
pauses for 60 seconds after starting ./init, so that it does not loop too
quickly in case ./init exits immediately. \fIdirectory\fR has to be
relative to the current working directory and cannot start with the dot
(\fB.\fR) or the slash (\fB/\fR) character.

After ./init exits with zero exit status, \fBsupervise\fR starts ./run. It
restarts ./run if ./run exits. It pauses for a second after starting ./run,
so that it does not loop too quickly in case ./run exits immediately.
\fBsupervise\fR expects ./run to run in the foreground. Sometimes daemon
fork themselves into background, which some consider bad software design.
If you want to supervise such a daemon, set the sticky bit on ./run. This
makes \fBsupervise\fR go into \fBsubreaper\fR mode using \fBprctl\fR(2)
\fBPR_SET_CHILD_SUBREAPER\fR on Linux or \fBprocctl\fR(2)
\fBPROC_REAP_ACQUIRE\fR on FreeBSD.

If the file \fIs\fR/down exists, \fBsupervise\fR(8) does not start ./run
immediately. You can use \fBsvc\fR(8) to start ./run or to give other
commands to \fBsupervise\fR(8). \fBsupervise\fR uses
\fIs\fR/\fIsupervise\fR/\/\fIcontrol\fR fifo to read these commands.

if the file \fIs\fR/shutdown exists \fBsupervise\fR(8) executes
\fIshutdown\fR when asked to exit.

if the file \fIs\fR/alert exists \fBsupervise\fR(8) executes \fIalert\fR
whenever run exits. The pid of the process that exited is passed as the
first argument to \fIalert\fR. The exit value or signal (if killed by
signal) is passed as the second argument to \fIalert\fR. The third argument
is either \fIexited\fR or \fIstopped\fR / \fIsignalled\fR.

\fBsupervise\fR(8) creates the directory \fIs\fR/\fIsupervise\fR in
\fIrun\fR/\fIsvscan\fR where \fIrun\fR is either /run or /var/run tmpfs
filesystem depending on your operating system. \fBsupervise\fR(8) maintains
status information in a binary format in the directory
\fIs\fR/\fIsupervise\fR. The directory \fIs\fR must be writable to
\fBsupervise\fR(8). The status information can be read by \fBsvstat\fR(8).

\fBsupervise\fR(8) may exit immediately after startup if it cannot find the
files it needs in \fIs\fR or if another copy of \fBsupervise\fR(8) is already
running in \fIs\fR. Once \fBsupervise\fR(8) is successfully running, it will
not exit unless it is killed or specifically asked to exit. On a successful
startup \fBsupervise\fR(8) it opens the fifo
\fIs\fR/\fIsupervise\fR/\fIok\fR in O_RDONLY|O_NDELAY mode. You can use
\fBsvok\fR(8) to check whether \fBsupervise\fR(8) is successfully running.
You can use \fBsvscan\fR(8) to reliably start a collection of
\fBsupervise\fR(8) processes. \fBsvscan\fR mirrors the service directory in
/run or /var/run directory (whichever is found first). So /run/\fIs\fR will
be analogous to /service/\fIs\fR. When started by \fBsvscan\fR, error
messages printed by \fBsupervise\fR(8) will go the standard error output of
\fBsvscan\fR(8) process.

\fBsupervise\fR(8) can wait for another service by having a file named
\fIs\fR/\fIwait\fR. This file has two lines. The first line is time \fIt\fR
in seconds and the second line is service name \fIw\fR. \fIw\fR refers to
the service which service \fIs\fR should wait \fIt\fR secs after service
\fIw\fR starts up. The amount of time \fIt\fR is limited to a max of 32767
secs. Any value above this value will be limited to 60 secs.
\fIsupervise\fR(8) opens \fIw\fR/\fIsupervise\fR/\fIup\fR in write mode. If
service \fIw\fR is up, the write returns immediately. If service \fIw\fR is
done, write will block till \fIw\fR is up and running. If service \fIw\fR
doesn't have \fBsupervise\fR running, \fPsupervise\fR will wait for 60
seconds before opening for write the file \fIw\fR/\fIsupervise\fR/\fIup\fR
again. The default value of 60 seconds gets overriden by the
\fBSCANINTERVAL\fR environment variable used by \fBsvscan\fR(8).

\fBsupervise\fR(8) creates the following FIFOs for with O_RDONLY|O_NDELAY
mode. See open(2) for description of O_RDONLY, O_NDELAY

.IP \[bu] 2
\fIs\fR/\fIsupervise\fR/\fIcontrol\fR - for reading commands from clients
like \fBsvc\fR(8).
.IP \[bu] 2
\fIs\fR/\fIsupervise\fR/\fIok\fR - clients can open this in write mode
(O_WRONLY) to test if \fBsupervise\fR(8) is running in \fIs\fR. If write
returns, it means \fBsupervise\fR(8) is running.
.IP \[bu] 2
\fIs\fR/\fIsupervise\fR/\fIup\fR - clients can open this in write mode
(O_WRONLY) to test if service \fIs\fR is up. Any client that opens this
fifo will block until the service \fIs\fR is up. If write returns, it means
service \fBs\fR(8) is running.

.SH SEE ALSO
svc(8),
svok(8),
svstat(8),
svps(1),
svscanboot(8),
svscan(8),
svctool(8),
minisvc(8),
readproctitle(8),
fghack(8),
pgrphack(8),
multilog(8),
tai64n(8),
tai64nlocal(8),
setuidgid(8),
envuidgid(8),
envdir(8),
softlimit(8),
setlock(8),
open(2)
