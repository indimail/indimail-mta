.\" vim: tw=75
.TH envdir 8
.SH NAME
envdir \- run a program with environment modified according to files in a
specified directory.

.SH SYNOPSIS
\fBenvdir\fR [ -cipw ] \fId\fR \fIchild\fR

.SH DESCRIPTION
\fId\fR is a single argument. \fIchild\fR consists of one or more
arguments.

\fBenvdir\fR sets various environment variables as specified by files in
the directory named \fId\fR. It then runs \fIchild\fR with the environment
variables passed to \fBexecve\fR(2). These environment variables are not
set before the call to \fBexecve\fR(2). You can however set these
environment variables before the call to \fBexecve\fR(2) like this

.EX
  envdir \fId\fR envdir \fId\fR \fIchild\fR
.EE

For the \fBPATH\fR variable to be set before the call to \fBexecve\fR(2),
you can use the \fB\-p\fR option.

If \fId\fR contains a file named \fIs\fR whose first line is \fIt\fR,
\fBenvdir\fR removes an environment variable named \fIs\fR if one exists,
and then adds an environment variable named \fIs\fR with value \fIt\fR. The
name \fIs\fR must not contain =. Spaces and tabs at the end of \fIt\fR are
removed. Nulls in \fIt\fR are changed to newlines in the environment
variable. If the file \fIs\fR is completely empty (0 bytes long),
\fBenvdir\fR removes an environment variable named \fIs\fR if one exists,
without adding a new variable. \fBenvdir\fR reads a maximum of 256 bytes
from \fIs\fR.

If \fBenvdir\fR finds a directory named .\fIenvdir\fR or a link named
.\fIenvdir\fR pointing to a directory, it enters that directory and
modifies environment variables according to files in .\fIenvdir\fR.
\fBenvdir\fR avoids infinite recursive loops, by storing the inode number
of directories visited and checking against the list. Any directory already
processed is silently ignored. Files in .\fIenvdir\fR are read first. This
prevents environment variables in .\fIenvdir\fR from overriding or deleting
environment variables set in \fId\fR.

if \fBenvdir\fR finds a file named .\fIenvdir\fR, it assumes that a file
contains a list of additional directories to be processed for environment
variables. Any directory included in this file which have been already
processed are silently ignored.

if \fBenvdir\fR finds a file or a symbolic link named .\fIenvfile\fR, it
assumes that a file contains envirnoment variables in key=value format.
Comments, blank lines and leading white spaces are removed from the file.
If it finds a line of the form \fIs\fR=\fIt\fR, \fBenvdir\fR removes an
environment variable named \fIs\fR if one exists, and then adds an
evironment variable named \fIs\fR with value \fIt\fR. Whitespace at end of
\fIt\fR are preserved and are part of the value. Nulls in \fIt\fR are
changed to newlines in the environment variable. If \fBenvdir\fR finds a
line \fIs\fR, without =, \fBenvdir\fR removes an environment variable named
\fIs\fR if one exists, without adding a new variable.

Apart from .\fIenvdir\fR and \fI.envfile\fR, \fBenvdir\fR skips all files
and directories starting with the '.' dot character.

In case of any error, \fBenvdir\fR will not modify or add to the existing
set of environment variables. In case of error, \fBenvdir\fR will exit 111
without executing \fIchild\fR unless the \fB-w\fR has been specified.

To see what environment variables are getting set by \fId\fR, you can use
the command

.EX
envdir -c \fId\fR /usr/bin/env
.EE

.SH OPTIONS
.TP
.B \-c
This option clears all existing environment variables before modifying any
environment variables.

.TP
.B \-i
This option ignores if it cannot read a file in \fId\fR. This allows the
system administrator to specify different access to different users for
any environment variable

.TP
.B \-p
This options sets the PATH environment variable if defined in \fId\fR
before the call to \fBexecve\fR(2). This may be useful for \fBexecve\fR(2)
to be able to execute \fIchild\fR passed to \fBenvdir\fR without the full
path.

.TP
.B \-w
This option causes envdir to issue warnings on encountering errors instead
of quitting before executing \fIchild\fR.

.SH EXIT CODES
\fBenvdir\fR exits 111 if it has trouble reading \fId\fR, if it runs out of
memory for environment variables, or if it cannot run \fIchild\fR.
Otherwise its exit code is the same as that of \fIchild\fR.

.SH SEE ALSO
supervise(8),
svc(8),
svok(8),
svstat(8),
svscanboot(8),
svscan(8),
readproctitle(8),
fghack(8),
pgrphack(8),
multilog(8),
tai64n(8),
tai64nlocal(8),
setuidgid(8),
envuidgid(8),
softlimit(8),
setlock(8)
