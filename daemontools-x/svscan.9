.\" vim: tw=75
.TH svscan 8
.SH NAME
svscan \- starts and monitors a collection of services

.SH SYNOPSIS
.B svscan [ -vs ] [ \fIdir\fR ]

.SH DESCRIPTION
\fBsvscan\fR(8) starts one \fBsupervise\fR(8) process for each subdirectory
of the current directory, up to a limit of 1000 subdirectories. You can
override using current directory by passing \fIdir\fR as an argument. If
\fBsvscan\fR(8) is given a command-line argument \fIdir\fR, it switches to
that directory when it starts.

\fBsvscan\fR(8) skips subdirectory names starting with dots.
\fBsupervise\fR(8) must be in \fBsvscan\fR's path. If the environment
variable \fBSETSID\fR is set, \fBsvscan\fR(8) calls \fBsetsid(2)\fR to
become a session leader. When running as a session leader, \fBsvscan\fR
will terminate process group if the environment vairable
\fBTERMINATE_SESSION\fR is set. This will terminate all supervise proceses
started by \fBsvscan\fR by calling kill(0, 15).

\fBsvscan\fR(8) optionally starts a pair of \fRsupervise\fR(8) processes,
one for a subdirectory \fIs\fR, one for \fIs\fR/\fIlog\fR, with a pipe
between them. It does this if the name \fIs\fR is at most 255 bytes long
and \fIs\fR\fR/\fIlog\fR exists. \fBsvscan\fR(8) needs two free descriptors
for each pipe. The \fIlog\fR supervise process additionally sets argv2 as
\fIs\fR to easily locate the process in \fBps\fR(1) output like below

.EX
root    1588    1528  0 May05 ?      00:00:00 supervise qmail-smtpd.25
root    1589    1528  0 May05 ?      00:00:00 supervise log qmail-smtpd.25
.EE

For every \fBsupervise\fR log process it runs, \fBsvscan\fR also sets
\fBSV_PWD\fR=\fBs\fR as an environment variable. \fBsvscan\fR also sets
\fBPPID\fR environment variable as the process id of the parent for
supervise proceses and any initialization command it runs.

\fBsvscan\fR sets environment variable \fBSERVICEDIR\fR=\fIdir\fR on
startup. If \fIdir\fR argument to \fBsvscan\fR is omitted than it uses
current working directory for the value of \fBSERVICEDIR\fR environment
variable. \fBsvscan\fR also sets the the environment variable \fBPWD\fR to
\fIdir\fR. It then writes its pid to the file \fB.svscan.pid\fR in
/\fIrun\fR/\fIsvscan\fR, /\fIvar\fR/\fIrun\fR/\fIsvscan\fR (whichever is
found first) or the directory \fIdir\fR if the system doesn't have a
\fBrun\fR tmpfs filesystem or if the environment variable \fBDISABLE_RUN\fR
is set. The pid file is created exclusively. If the \fIrun\fR directory is
used, writing the pid file involves switching directories between the
\fBrun\fR filesystem and the \fIdir\fR directory.  \fBsvscan\fR(8) uses the
pid file to prevent multiple copies of \fBsvscan\fR(8) to run for the same
directory. If \fBDISABLE_RUN\fR is set, \fBsvscan\fR(8) will use \fIdir\fR
instead of /\fIrun\fR or /\fI/var\fR/\fIrun\fR. If \fBDISABLE_RUN\fR is
set, you can have an individual invocation of \fBsvscan\fR(8) run for each
\fIdir\fR passed on the command line. \fBsvscan\fR(8) uses the /\fIproc\fR
filesystem to verify if the pid belongs to a process named \fBsvscan\fR, by
opening the file /\fIproc\fR/\fIpid\fR/\fIcomm\fR. \fBsvscan\fR(8) will
start if the file does not exist, or if any process with pid \fIpid\fR does
not exist, or if the pid belongs to a non-svscan process. The file
\fB.svscan.pid\fR is deleted on \fBSIGTERM\fR.

After creating the pid file, \fBsvscan\fR is designed to run forever. If it
has trouble creating a pipe or running \fBsupervise\fR(8), it prints a
message to stderr; it will try again 60 seconds (or \fBSCANINTERVAL\fR
environment variable if set) later. If the environment variable
\fBAUTOSCAN\fR is set \fBsvscan\fR checks for subdirectories again every 60
seconds. If it sees a new subdirectory, it starts a new \fBsupervise\fR(8)
process. If it sees an old subdirectory where a \fBsupervise\fR(8) process
has exited, it restarts the \fBsupervise\fR(8) process. In the \fBlog\fR
case it reuses the same pipe so that no data is lost. The default scan
interval of 60 secs can be changed by setting \fBSCANINTERVAL\fR
environment variable. You can also send a \fBHUP\fR signal to \fBsvscan\fR
to force a directory scan. If running as PID 1, \fBsvscan\fR will
automatically scan for new subdirectories when any of it's children or any
orphaned process die.

\fBsvscan\fR can auto-start or auto-stop a service based on the presence or
absence of \fIs\fR/down file. During each scan, \fBsvscan\fR will
automatically stop a running service if it finds \fIs\fR/down and the
earlier status of the service was up. Similarly, \fBsvscan\fR will
automatically start a stopped service if it finds the file \fIs\fR/down
missing and the earlier status of the service was down.

\fBsvscan\fR output can be driven through \fBmultilog\fR. If a directory
(or symlink to a directory) named \fB@servicedir@/.svscan\fR exists and the
environment variable \fBSCANLOG\fR is defined in
\fI@servicedir@/.svscan/variables\fR, \fBsvscan\fR(8) will redirect
its output on descriptors 1 and 2 to the supervised service run from the
\fB@servicedir@/.svscan/log\fR directory. This simplifies \fBsvscan\fR
startup scripts and eliminates the use of \fBreadproctitle\fR, which does
not work on some platforms, e.g. FreeBSD. Redirecting \fBsvscan\fR output
through \fBmultilog\fR also provides a much better solution than other
\fBsvscan\fR startup scripts which redirect output exclusively to console,
which may cause problems to go undetected for a long time. The other big
advantage of setting \fBSCANLOG\fR is that all \fBsupervise\fR processes
started by \fBsvscan\fR (and also the children of supervise) inherit the
descriptors 0, 1 and 2. Any output of these processes not redirected to a
log file will get logged along with \fBsvscan\fR log.

\fBsvscan\fR can be run with a PID of 1 (init replacement) and reap child
processes. This feature is exploited in docker/podman/kubernates
environment. The \fBINITCMD\fR environment variable can be used to do
service management. The biggest advantage of \fBsvscan\fR is its
simplicity.  Unlike systemd(1), it is not complex and tied with multiple
pieces of software to make it work. You can also use openrc from Gentoo to
create a decent, simple service manager to start only the processes that
you require. If running as PID 1, \fBsvscan\fR will immediately restart a
\fBsupervise\fR process if it dies, rather waiting for 60 (or
\fBSCANINTERVAL\fR) seconds. This behaviour can be enabled as default by
setting \fBSCANNOW\fR environment variable. Setting this variable enables a
signal handler for \fBSIGCHILD\fR. If running as PID 1, \fBsvscan\fR will
relay \fBSIGTERM\fR to all children when it gets \fBSIGTERM\fR. By default,
it will send \fBSIGTERM\fR twice - first immediately and second one after
30 seconds followed by \fBSIGKILL\fR after another 30 secs. The default of
30 seconds can be changed by setting \fBKILLWAIT1\fR and \fBKILLWAIT2\fR
environment variables. Instead of \fBKILLWAIT1\fR, \fBKILLWAIT2\fR you can
set \fBKILLWAIT\fR environment variable to have second \fBSIGTERM\fR after
\fBKILLWAIT\fR/2 secs and \fBSIGKILL\fR after \fBKILLWAIT\fR secs. Setting
\fBKILLWAIT\fR overrides \fBKILLWAIT1\fR and \fBKILLWAIT2\fR.

If \fBINITCMD\fR environment variable is defined and set to an empty string
and if \fI@servicedir@\fR/.\fIsvscan\fR/\fIrun\fR exists and has the
executable bit set, \fIrun\fR is executed once during startup.
\fBINITCMD\fR can be set to full path of an executable / script to override
\fI@servicedir@\fR/.\fIsvscan\fR/\fIrun\fR. If \fBWAIT_INITCMD\fR
environment variable is set, it will additionally wait for \fIrun\fR to
exit, before starting the scan of \fIdir\fR. Typical use of \fBINITCMD\fR
is to mount --bind @sysconfdir@/resolv.conf as /etc/resolv.conf, to
redirect all dns resolver requests, to locally running \fBdnscache\fR(8). A
typical \fIrun\fR script to exploit \fBINITCMD\fR is as below

.EX
#!/bin/sh
/usr/bin/mount --bind @sysconfdir@/resolv.conf /etc/resolv.conf
/usr/bin/mount -l
if [ $PPID -eq 1 ] ; then
	openrc indimail
fi
.EE
If \fI@servicedir@\fR/.\fIsvscan\fR/\fIshutdown\fR exists, it will be
executed when \fBsvscan\fR receives a TERM signal. This can be used to
terminate all supervise processes started by \fBsvscan\fR. A typical
example of a \fIshutdown\fR script looks like this. The -G argument to
\fBsvc\fR(8) sends signal to the entire process group of \fBsvscan\fR.

.EX
#!/bin/sh
exec 2>&1
/usr/bin/umount /etc/resolv.conf
exec /usr/bin/svc -Gdx /service/* /service/*/log /service/.svscan/log
.EE

The above can also be achieved by setting \fBSETSID\fR and
\fBTERMINATE_SESSION\fR environment variables as explained earlier.

On most Linux distros, \fBsvscan\fR is started using a systemd(1) unit file
/usr/lib/systemd/system/svscan.service. On FreeBSD, it is started using rc
script in /usr/local/etc/rc.d/svscan. On Darwin, it is started by
launchd(8) using /Library/LaunchDaemons/org.indimail.svscan.plist. On
alpine linux, it is started by openrc using /etc/init.d/\fBsvscan\fR when
using the \fBservice\fR(8) command. All of these use a wrapper named
\fBsvscanboot\fR(8) to start \fBsvscan\fR. \fBsvscanboot\fR uses
\fBenvdir\fR(8) to set environment variables from
\fI/service/.svscan/variables\fR directory. Few examples of starting and
stopping \fBsvscan\fR are given below.

.EX
Linux
-----
sudo systemctl start/stop svscan
or
sudo systemctl start/stop indimail
or
sudo systemctl start/stop indimail-mta
or
sudo service svscan start/stop

FreeBSD
-------
sudo service svscan start/stop

Mac OSX
-------
sudo launchctl start/stop org.indimail.svscan

Universal
---------
sudo qmailctl start/stop
.EE

In a container environment, \fBsvscan\fR(8) is started through an
entrypoint for docker/podman and starts as PID 1. This entrypoint is
implemented using the \fBdocker-entrypoint\fR(8) script.

.SH OPTIONS
.TP
.B \-v
Display informational messages. Normally this is suppressed. You can toggle
this by sending \fBsvscan\fR \fBUSR1\fR signal. Setting this also sets
\fBVERBOSE\fR environment variable, which gets inherited by all processes
started by svscan. Informational messages can also be turned on by setting
\fBVERBOSE\fR environment variable. Note that \fBsupervise\fR(8) uses
\fBVERBOSE\fR environment variable.

.TP
.B \-s
Suppress warning message. Normally this is printed on the standard error.
You can toggle this by sending \fBsvscan\fR \fBUSR2\fR signal. Setting this
also sets \fBSILENT\fR environment variable, which gets inherited by all
processes started by svscan. Warning messages can also be suppressed by
setting \fBSILENT\fR environment variable. Note that \fBsupervise\fR(8)
also uses the \fBSILENT\fR environment variable.

.SH SEE ALSO
proc(5),
mount(8),
kill(2),
setsid(2),
supervise(8),
svc(8),
svok(8),
svps(1),
svstat(8),
svctool(8),
minisvc(8),
svscanboot(8),
readproctitle(8),
fghack(8),  
pgrphack(8),
multilog(8),
tai64n(8),
tai64nlocal(8),
setuidgid(8),
envuidgid(8),
envdir(8),
dnscache(8),
softlimit(8),
setlock(8),
docker-entrypoint(8),
systemctl(1),
systemd(1),
service(1),
init(1),
launchd(8),
openrc-init(8),
openrc-run(8)

http://cr.yp.to/daemontools.html
