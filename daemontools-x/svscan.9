.TH svscan 8
.SH NAME
svscan \- starts and monitors a collection of services
.SH SYNOPSIS
.B svscan
[
.I directory
]
.SH DESCRIPTION
.B svscan
starts one
.BR supervise (8)
process for each subdirectory of the current directory, up to a limit of 1000
subdirectories.
.B svscan
skips subdirectory names starting with dots.
.BR supervise (8)
must be in
.BR svscan 's
path. svscan calls \fBsetsid(2)\fR if the environment variable \fBSETSID\fR
is set.

.B svscan
optionally starts a pair of
.BR supervise (8)
processes, one for a subdirectory
.IR s ,
one for
.IR s\fR/\fIlog\fR ,
with a pipe between them. It does this if the name
.I s
is at most 255 bytes long and
.I s\fR/\fIlog\fR
exists.
.B svscan
needs two free descriptors for each pipe. The \fIlog\fR supervise process
additionally sets argv2 as \fIs\fR to easily locate the process in
\fBps\fR(1) output. e.g.

.EX
root    1588    1528  0 May05 ?      00:00:00 supervise qmail-smtpd.25
root    1589    1528  0 May05 ?      00:00:00 supervise log qmail-smtpd.25
.EE

\fBsvscan\fR is designed to run forever. If it has trouble creating a pipe
or running \fBsupervise\fR(8), it prints a message to stderr; it will try
again five seconds (or SCANINTERVAL) later.

If the environment variable \fBAUTOSCAN\fR is set, every 60 seconds,
\fBsvscan\fR checks for subdirectories again. If it sees a new
subdirectory, it starts a new \fBsupervise\fR(8) process. If it sees an old
subdirectory where a \fBsupervise\fR(8) process has exited, it restarts the
\fBsupervise\fR(8) process. In the \fBlog\fR case it reuses the same pipe
so that no data is lost. The default scan interval of 60 secs can be
changed by setting \fBSCANINTERVAL\fR environment variable. Set
\fBSCANINTERVAL\fR to 0 to disable the automatic scanning of the service
directory completely. You can also send a HUP signal to svscan to force a
directory scan. If running as PID 1, \fBsvscan\fR will automatically scan
for new subdirectories when any of it's children or any orphaned process
die.

If \fBsvscan\fR is given a command-line argument \fIdirectory\fR, it
switches to that \fIdirectory\fR when it starts.

\fBsvscan\fR writes its pid to the file \fB.svscan.pid\fR in
/\fIrun\fR/\fIsvscan\fR, /\fIvar\fR/\fIrun\fR/\fIsvscan\fR or the directory
where it starts (which ever is found first). It uses this file to prevent
multiple copies of \fBsvscan\fR to run for the same directory. It also uses
the /proc filesystem to verify if the pid belongs to a process named
\fBsvscan\fR, by opening the file /\fIproc\fR/\fIpid\fR/\fIcomm\fR.
\fBsvscan\fR will start if the file does not exist, or if pid does not
exist, or if the pid belongs to a non-svscan process. The file
\fB.svscan.pid\fR is deleted on SIGTERM. If \fBDISABLE_RUN\fR is set,
/\fIrun\fR will not be used.

\fBsvscan\fR output can be driven through \fBmultilog\fR. If a directory
(or symlink to a directory) named \fB@servicedir@/.svscan\fR exists and the
environment variable \fBSCANLOG\fR is defined. \fBsvscan\fR(8) will direct
its stdout and stderr to the supervised service run from the
\fB@servicedir@/.svscan/log\fR directory. This simplifies \fBsvscan\fR
startup scripts and eliminates the use of \fBreadproctitle\fR, which does
not work on some platforms, e.g. FreeBSD 5.1. Redirecting \fBsvscan\fR
output through \fBmultilog\fR also provides a much better solution than
other \fBsvscan\fR startup scripts which direct output exclusively to
console, causing problems to go undetected for a long time.

\fBsvscan\fR sets environment variable \fBSERVICEDIR\fR=\fIdirectory\fR.
If \fIdirectory\fR is omitted than it uses current working directory for
the value of \fBSERVICEDIR\fR. For every \fBsupervise\fR log process it
runs, \fBsvscan\fR also sets \fBSV_PWD\fR=\fBs\fR environment variable.
\fBsvscan\fR also sets PPID for supervise proceses and any initialization
command it runs.

\fBsvscan\fR can be run with a PID of 1 (init replacement) and reap child
processes. This feature exploited in docker/podman/kubernates environment.
The \fBINITCMD\fR environment variable can be used to do service
management. The biggest advantage of \fBsvscan\fR is its simplicity.
Unlike systemd(1), it is not complex and tied with multiple pieces of
software to make it work. You can also use openrc from Gentoo to create a
decent, simple service manager to start only the processes that you
require.

If \fBINITCMD\fR environment variable is defined and set to an empty string
and if \fI@servicedir@\fR/.\fIsvscan\fR/\fIrun\fR exists and has the
executable bit set, \fIrun\fR is executed. \fBINITCMD\fR can be set to full
path of an executable or script to override
\fI@servicedir@\fR/.\fIsvscan\fR/\fIrun\fR If \fBWAIT_INITCMD\fR env
variable is set, it will additionally wait for \fIrun\fR to exit, before
starting the scan of \fIdirectory\fR. Typical use of \fBINITCMD\fR is to
mount --bind @sysconfdir@/resolv.conf as /etc/resolv.conf, to redirect all
dns resolver requests, to locally running \fBdnscache\fR(8). A typical
\fIrun\fR to exploit \fBINITCMD\fR looks like this

.EX
#!/bin/sh
/usr/bin/mount --bind @sysconfdir@/resolv.conf /etc/resolv.conf
/usr/bin/mount -l
if [ $PPID -eq 1 ] ; then
	openrc indimail
fi
.EE

On most Linux distros, svscan is started using a systemd(1) unit file
/usr/lib/systemd/system/svscan.service. On FreeBSD, it is started using rc
script in /usr/local/etc/rc.d/svscan. On Darwin, it is started by
launchd(8) using /Library/LaunchDaemons/org.indimail.svscan.plist. On
alpine linux, it is started by openrc using /etc/init.d/svscan. In a
container environment, it is the entrypoint and starts as PID 1. The
entrypint is enabled using the \fBdocker-entrypoint\fR(8) script.

.SH SEE ALSO
proc(5),
mount(8),
supervise(8),
svc(8),
svok(8),
svps(1),
svstat(8),
svctool(8),
minisvc(8),
svscanboot(8),
readproctitle(8),
fghack(8),  
pgrphack(8),
multilog(8),
tai64n(8),
tai64nlocal(8),
setuidgid(8),
envuidgid(8),
envdir(8),
dnscache(8),
softlimit(8),
setlock(8),
docker-entrypoint(8)

http://cr.yp.to/daemontools.html
